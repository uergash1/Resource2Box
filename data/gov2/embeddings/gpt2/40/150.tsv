id	content
GX024-16-8049744	"Regierung            & Politik                                      Einführung               |                  Verfassung               |  Exekutive               |    Legislative               |  Judikative                                Bundesstaaten               |  Städte              & Gemeinden  |  Politische              Parteien  |  Wahlen                                            Hauptstadt Washington, D.C .               |  Flagge               |  Nationalhymne               |  Staatswappen               I  Treueschwur                                                                          Regierung          & Politik > Politische Parteien                                                                                                                                    E-Texte                                                       Outline                of U.S. Government: Political Parties                                         Political                Parties in the U.S. (from Electronic Journal U. S. Elections 2000)                                 Heute gibt es in den            Vereingten Staaten    zwei große            politische Parteien, die ""Demokraten"" und die ""Republikaner"".                        Die ""Demokratische Partei"" entwickelte sich aus der Partei Thomas            Jeffersons, die schon vor 1800 gegründet wurde. Die ""Republikanische            Partei"" wurde 1850 von Abraham Lincoln und anderen Gegnern der Ausweitung            der Sklaverei gegründet.                         Die Demokraten werden als die liberalere Partei angesehen und die Republikaner            als die eher konservative Partei. Demokraten glauben im allgemeinen, dass            die Regierung verpflichtet sei, soziale und wirtschaftliche Programme für            die Bedürftigen             bereitzustellen. Republikaner sind nicht            unbedingt gegen solche Programme, glauben aber, dass sie den Steuerzahler            zu viel kosten. Sie legen mehr Wert darauf, private Investitionen zu fördern,            in der Hoffnung, dass eine starke Privatwirtschaft die Bürger weniger            abhängig vom Staat macht.                         Beide grossen Parteien bekommen eine            Menge Unterstützung von einer Vielfalt von Amerikanern und vereinen            eine weitreichende Skala politischer Ansichten. Amerikaner müssen nicht            Parteimitglied sein, um zu wäehlen oder um selbst für ein Amt            zu kandidieren, aber es ist schwierig, sich für ein Amt zu bewerben            ohne das Geld und die freiwilligen Wahlhelfer, die eine Partei bereitstellt.                         Nach den Wahlen            1998 gab es nur einen einzigen Abgeordneten im Kongress, der als Unabhängiger            gewählt worden war, und nur 20 (0.003 %) der mehr als 7300 gewählten            Abgeordneten in den einzelstaatlichen Parlamenten waren weder Republikaner            noch Demokraten. Es sind diese zwei grossen Parteien, die die Regierungen            sowohl auf nationaler als auch auf einzelstaatlicher Ebene stellen.           Siehe auch:            About the USA >  Regierung            & Politik > Wahlen                        Auszug            aus Publikationen des  State            Department/IIP  und anderen U.S. Regierungsquellen.                                                            Hintergrund              ·             A            Brief History of American ""Major Parties"" and the ""Two Party            Systems"" in the United States   (The Green Papers)             ·  Democratic            Party               ·             Political            Parties  (Grolier Online)              ·              Political            Parties in the United States  (Encarta. MSN Learning and Research Page)                          ·                Republican Party                          Für Schüler             ·             Party            System  (American Memory. Library of Congress)              ·             What            Do Parties Stay For?  (Scholastic)                          Lehrermaterialien             ·              In            Praise of Political Parties  (Schools of California Online Resources            for Education)             ·              Third-Party            Politics  (U.S.News Classroom)                           Linksammlungen             ·              Contacting            National Political Parties  (National Political Index)             ·             Directory            of Political Parties  (Politics1.com)              ·             Political            Parties  (University of Michigan Library)             ·             Yahoo!            U.S. Political Parties                                                             Benutzen            Sie den Adobe Acrobat© Reader um die PDF-Dokumente auf dieser Seite lesen            zu können.                                                      HINWEIS           Verweise dieses Servers auf bestimmte Produkte oder          Dienste stellen keine Unterstützung der US-Regierung für das Produkt oder          dessen Produzenten bzw. Anbieter dar. Ansichten und Meinungen, die in den          Verweisdokumenten geäußert werden, entsprechend nicht zwingend denen der US-Regierung          und spiegeln diese auch nicht wider.                         U.S.            Diplomatic Mission to Germany              /Public Affairs/ Information Resource Centers                Aktualisiert: September 2003"
GX024-23-10674699	"Regierung            & Politik                          Einführung             |                Verfassung  |  Exekutive             |  Legislative  |  Judikative             I             Bundesstaaten  |   Städte & Gemeinden             |  Politische Parteien  |  Wahlen             I             Hauptstadt    Washington, D.C  |             Flagge  |  Nationalhymne             |  Staatswappen   I             Treueschwur                                                              Regierung          & Politk > Flagge                                                                                                                                     E-Texte                                                       Celebrate                Flag Day                                          The                Flag of the United States: The Stars and Stripes                                          Flag                Protection: A Brief History and Summary of Recent Supreme Court Decisions                and Proposed Constitutional Amendment                                          Guidelines                for Display of the Flag                                          The                Origin of Flag Day                                            Our                  Flag                                                           The                United States Flag                                         The                United States Flag:  (CRS Report)                                  Die ""Stars and Stripes""            haben ihren Ursprung in einer Resolution des ""Second Continental Congress""            in Philadelphia am 14. Juni 1777. Die Resolution lautet:                        ""Es sei beschlossen, dass die Flagge der Vereinigten Staaten dreizehn            Streifen, abwechselnd rot und weiss, haben soll; dass die Union dreizehn            Sterne, weiss auf einem blauen Feld, eine neue Konstellation sein sollen.""                        Die Resolution gab keinen Hinweis darauf, wieviele Zacken die Sterne haben            sollten noch wie die Sterne auf dem blauen Hintergrund angeordnet werden            sollten. Darausfolgend ergaben sich viele verschiedene Variationen. Während            des Unabhängigkeitskrieges stellten mehrere Patrioten Flaggen für            die neue Nation her. Betsy Ross ist die bekannteste unter ihnen, aber es            gibt keinen Beweis, dass sie wirklich die erste Fahne herstellte.                        Erst am 4. April 1818 stimmte Präsident Monroe einem Gesetzesvorschlag            zu, in dem festgelegt wurde, wie das Grunddesign der Flagge sein muss, damit            die Vergrößerung des Landes angemessen symbolisiert würde.            Es erforderte, dass die Flagge der Vereinigten Staaten eine Einheit von            zwanzig Sternen, weiss auf einem blauen Untergrund, habe. Wann immer ein            neuer Staat dazukäme, sollte ein weiterer Stern zu der Einheit hinzugefügt            werden, und zwar am vierten Juli nach dem Beitritt des Staates. Die abwechselnd            roten und weissen Streifen würden unverändert bleiben.                        1916 verkündetete Präsident Woodrow Wilson, dass im ganzen Land            am 14. Juni, dem Geburtstag der ""Star and Stripes"", der ""Flag            Day"" gefeiert werden solle. Der Kongress hat die permanente Einhaltung            dieser Proklamation erst 1949 beschlossen.                       Siehe          auch:          About the USA > U.S. Regierung >  Nationalhymne           About          the USA > U.S. Regierung > Treueschwur                                    Auszug            aus Publikationen des  State            Department/IIP  und anderen U.S. Regierungsquellen.                                                Hintergrund                         ·             The Betsy Ross Homepage              (Independence Hall Association)            ·  Facts            About the United States Flag  (Encyclopedia Smithsonian)            ·  The            Flag of the United States of America  (Duane Streufert. US flag.org)             ·             Die Geschichte            der amerikanischen Flagge              (MagazinUSA.com)  Deutsch              ·             National            Flag Day Foundation             ·             Our            Flag  (American Legion)             ·              Our            Flag  (Federal Citizen Information Center)             ·             The Star-Spangled            Banner .            The Flag that Inspired the National Anthem             (Smithsonian)             ·             Today            in History: June 14 - Flag Day  (American Memory. Library of Congress)             ·             Unoffical            American Flag Homepage  (Dick Grogan)             ·             USA Flag Site                        Originaldokumente                         ·               Federal            Flag Code               (Baltimore County Public Library)             ·               U.S.            Flag Code  (Legal Information Institute. Cornell University Law School)                                    Ausstellungen - Digitale Bilder             ·             Betsy            Ross House  (Indepedence Hall Association)             ·             Fort            McHenry  (The Patriots of Fort McHenry)             ·             Fort            McHenry National Monument and Historic Shrine  (National Park Service)                         ·             The            Star-Spangled Banner  (National Museum of American History)             ·             Star-Spangled Banner Flag House            and War of 1812 Museum.             Baltimore, MD                                                                   Für Schüler                          ·             The            American Flag  (Chris Witten. FoundingFathers.i nfo)                                      ·             Educational            Materials  (National Flag Day Foundation)                         ·  The            History of the U.S. Flag  (Fact Monster )             ·   Symbols            of U.S. Government: The Flag  (Ben's Guide to U.S. Government for Kids)             ·             The            United States Flag - Symbol of Our Freedom  (C. Douglas Sterner. Home            of Heroes.com )                                      Lehrermaterialien                             ·    Lesson            Plans Flag Day   (Education World)             ·    Mary            Pickersgill and the Making of the Star-Spangled Banner  (National Flag            Day Foundation)             ·    Oh            Say, Can You See -What the Star-Spangled Banner Means?   (Edsitement)             ·    Save            our History: The Star-Spangled Banner Project  (History Channel)             ·    Stars            and Stripes Forever: Flag Facts for Flag Day  (EdSitement)                       Linksammlungen                         ·  The            American Flag . Link List (The Electric Teacher Pages)               ·  National            Symbols > American Flag  (Yahoo!)                                                             Benutzen            Sie den Adobe Acrobat© Reader um die PDF-Dokumente auf dieser Seite lesen            zu können.                                                      HINWEIS           Verweise dieses Servers auf bestimmte Produkte oder          Dienste stellen keine Unterstützung der US-Regierung für das Produkt oder          dessen Produzenten bzw. Anbieter dar. Ansichten und Meinungen, die in den          Verweisdokumenten geäußert werden, entsprechend nicht zwingend denen der US-Regierung          und spiegeln diese auch nicht wider.                       U.S.          Diplomatic Mission to Germany            /Public Affairs/ Information Resource Centers              Aktualisiert: September 2003"
GX191-32-14004783	-5001: Missing  privilege        Explanation:      ...      The user is not authorized to execute the SQL  statement.      The user is not authorized to execute this SQL  statement for data definition. The  privilege   necessary for this SQL statement is only granted within a  role . Such limited  privileges are sufficient for other SQL statements, but not for those relating  to data definitions.      User  Action:      Use a  query statement issued on the system table  DOMAIN.TABLEPRIVILEGES   or  DOMAIN.COLUMNS  to  find out the tables or columns for which you have privileges. You cannot  execute the desired SQL statement.
GX194-25-3582168	"MySQL Reference Manual for version 3.23.51.         1  General Information About MySQL                  This is the MySQL reference manual; it documents MySQL Version 3.23.51.  As MySQL is work in progress, the manual gets updated frequently.  There is a very good chance that this version is out of date, unless you are looking at it online.  The most recent version of this manual is available at  http://www.mysql.com/documentation/  in many different formats.  If you have a hard time finding information in the manual, you can try the searchable PHP version at  http://www.mysql.com/documentation/manual.php .      MySQL is a very fast, multi-threaded, multi-user, and robust SQL (Structured Query Language) database server.      MySQL is free software.  It is licensed with the  GNU GENERAL PUBLIC LICENSE   http://www.gnu.org/ . See section  1.3  MySQL Licensing and Support .        The MySQL home page  provides the latest information about MySQL.      The following list describes some useful sections of the manual:          For information about the company behind MySQL, see  section  1.1.2  What Is MySQL AB .     For a discussion of MySQL's capabilities, see section  1.1.6  The Main Features of MySQL .     For installation instructions, see section  2  MySQL Installation .     For tips on porting MySQL to new architectures or operating systems, see section  G  Comments on porting to other systems .     For information about upgrading from a Version 3.22 release, see section  2.5.1  Upgrading From Version 3.22 to Version 3.23 .     For a tutorial introduction to MySQL, see section  3  Introduction to MySQL: A MySQL Tutorial .     For examples of SQL and benchmarking information, see the benchmarking directory ( `sql-bench'  in the distribution).     For a history of new features and bug fixes, see section  F  MySQL change history .     For a list of currently known bugs and misfeatures, see section  1.4.7  Known errors and design deficiencies in MySQL .     For future plans, see section  1.6  MySQL and the future (The TODO) .     For a list of all the contributors to this project, see section  E  Credits .       IMPORTANT:       Reports of errors (often called bugs), as well as questions and comments, should be sent to the mailing list at  mysql@lists.mysql.com . See section  1.2.22.3  How to Report Bugs or Problems . The  mysqlbug  script should be used to generate bug reports. For source distributions, the  mysqlbug  script can be found in the  `scripts'  directory.  For binary distributions,  mysqlbug  can be found in the  `bin'  directory. If you have found a sensitive security bug in MySQL, you should send an email to  security@mysql.com .                   If you have any suggestions concerning additions or corrections to this manual, please send them to the manual team at  docs@mysql.com .      This is a reference manual; it does not provide general instruction on SQL or relational database concepts.  If you want general information about SQL, see section  1.2.2  General SQL Information and Tutorials .  For books that focus more specifically on MySQL, see section  1.2.1  Books About MySQL .        1.1  MySQL, MySQL AB, and Open Source      1.1.1  What Is MySQL              MySQL, the most popular Open Source SQL database, is provided by MySQL AB.  MySQL AB is a commercial company that builds its business providing services around the MySQL database. See section  1.1.2  What Is MySQL AB .        MySQL is a database management system.   A database is a structured collection of data.  It may be anything from a simple shopping list to a picture gallery or the vast amounts of information in a corporate network.  To add, access, and process data stored in a computer database, you need a database management system such as MySQL.  Since computers are very good at handling large amounts of data, database management plays a central role in computing, as stand-alone utilities, or as parts of other applications.      MySQL is a relational database management system.   A relational database stores data in separate tables rather than putting all the data in one big storeroom.  This adds speed and flexibility.  The tables are linked by defined relations making it possible to combine data from several tables on request.  The SQL part of MySQL stands for ""Structured Query Language"" - the most common standardized language used to access databases.       MySQL is Open Source Software.   Open Source means that it is possible for anyone to use and modify. Anybody can download MySQL from the Internet and use it without paying anything.  Anybody so inclined can study the source code and change it to fit their needs.  MySQL uses the GPL (GNU General Public License)  http://www.gnu.org , to define what you may and may not do with the software in different situations.  If you feel uncomfortable with the GPL or need to embed MySQL into a commercial application you can buy a commercially licensed version from us.        Why use MySQL?   MySQL is very fast, reliable, and easy to use.  If that is what you are looking for, you should give it a try.  MySQL also has a very practical set of features developed in very close cooperation with our users.  You can find a performance comparison of MySQL to some other database managers on our benchmark page. See section  5.1.4  The MySQL Benchmark Suite .  MySQL was originally developed to handle very large databases much faster than existing solutions and has been successfully used in highly demanding production environments for several years.  Though under constant development, MySQL today offers a rich and very useful set of functions.  The connectivity, speed, and security make MySQL highly suited for accessing databases on the Internet.   The technical features of MySQL   For advanced technical information, see section  6  MySQL Language Reference .  MySQL is a client/server system that consists of a multi-threaded SQL server that supports different backends, several different client programs and libraries, administrative tools, and several programming interfaces.  We also provide MySQL as a multi-threaded library which you can link into your application to get a smaller, faster, easier to manage product.   MySQL has a lot of contributed software available.   It is very likely that you will find that your favorite application or language already supports MySQL.             The official way to pronounce MySQL is ``My Ess Que Ell'' (not MY-SEQUEL). But we try to avoid correcting people who say MY-SEQUEL.        1.1.2  What Is MySQL AB            MySQL AB is the Swedish company owned and run by the MySQL founders and main developers.  We are dedicated to developing MySQL  and spreading our database to new users.  MySQL AB owns the copyright to the MySQL server source code and the MySQL trademark. A significant amount of revenues from our services goes to developing  MySQL.  See section  1.1.1  What Is MySQL .      MySQL AB has been profitable providing MySQL from the start. We don't get any outside funding, but have earned all our money ourselves.      We are searching after partners that would like to support our development  of MySQL so that we could accelerate the development pace.  If you are interested in doing this, you can email  partner@mysql.com  about  this!      MySQL AB has currently 20+ people ( http://www.mysql.com/development/team.html ) on its payroll and is growing rapidly.       Our main sources of income are:          Commercial high quality support for MySQL provided by the  MySQL developers themselves.  If you are interested in purchasing a support contract, please visit  https://order.mysql.com/  to view our support options or to order support.     Consulting services.  We have developers and consultants in 12 countries and partners in many other countries that can help you with almost any MySQL related issues.  If you need consulting services, please email a good description of your needs to  info@mysql.com !  If we can't handle this ourselves we can usually find a partner or a developer that can help you with your problems.     We sell licenses for using MySQL as an embedded database. See section  1.3.4  MySQL Licensing and Support Costs .  If you have a commercial product for which you need a fast, high quality database, but you can't afford to make your product Open Source, you can buy the right to use the MySQL server under a normal commercial copyright.  If you are interested in this you can buy MySQL licenses at  https://order.mysql.com/  or contact us at  licensing@mysql.com .     Advertising.  http://www.mysql.com/  is a very popular web site with more than 10,000,000 page views per months (January 2001).  By putting a banner on this you are guaranteed to reach a lot of potential customers in the Open source, Linux and database community. If you are interested in this email  advertising@mysql.com .     We are building a partner program to be able to provide MySQL services in every country.  If you are interested in becoming a partner of MySQL AB please visit  http://www.mysql.com/information/partners.html  or email  partner@mysql.com .     We provide MySQL training through our partner programs.  For more information, please email  info@mysql.com .     The MySQL brand has, since 1995, been associated with speed and reliability, and is known to be something you can depend upon.  If you are interested in using the MySQL trademark in your marketing, you can email  info@mysql.com  about this.      The MySQL core values show our dedication to MySQL and Open Source.      We want MySQL to be:          The best and the most used database in the world.    Available and affordable for all.    Easy to use.    Continuously improved while remaining fast and safe.    Fun to use and improve.    Free from bugs.      MySQL AB and the people of MySQL AB:          Promote Open Source Philosophy and support the Open Source Community.    Aim to be good citizens.    Prefer partners that share our values and mind-set.    Answer mail and give support.    Are a virtual company, networking with others.    Work against software patents.       1.1.3  About This Manual     This manual is currently available in Texinfo, plain text, Info, HTML, PostScript, and PDF versions.  The primary document is the Texinfo file. The HTML version is produced automatically using a modified version of  texi2html .  The plain text and Info versions are produced with  makeinfo .  The Postscript version is produced using  texi2dvi  and  dvips .  The PDF version is produced with  pdftex .               This manual is written and maintained by David Axmark, Michael (Monty) Widenius, Jeremy Cole, and Paul DuBois.  For other contributors, see section  E  Credits .        1.1.4  Conventions Used in This Manual     This manual uses certain typographical conventions:                   constant    Constant-width font is used for command names and options; SQL statements; database, table and column names; C and Perl code; and environment variables. Example: ``To see how  mysqladmin  works, invoke it with the  --help  option.''   `filename'    Constant-width font with surrounding quotes is used for filenames and pathnames.  Example: ``The distribution is installed under the  `/usr/local/'  directory.''   `c'    Constant-width font with surrounding quotes is also used to indicate character sequences.  Example: ``To specify a wild card, use the  `%'  character.''   italic    Italic font is used for emphasis,  like this .   boldface    Boldface font is used for access privilege names (for example, ``do not grant the  process  privilege lightly'') and occasionally to convey  especially strong emphasis .      When commands are shown that are meant to be executed by a particular program, the program is indicated by a prompt shown before the command.  For example,  shell>  indicates a command that you execute from your login shell, and  mysql>  indicates a command that you execute from the  mysql  client program:      shell> type a shell command here mysql> type a mysql command here      Shell commands are shown using Bourne shell syntax.  If you are using a  csh -style shell, you may need to issue commands slightly differently. For example, the sequence to set an environment variable and run a command looks like this in Bourne shell syntax:      shell> VARNAME=value some_command               For  csh , you would execute the sequence like this:      shell> setenv VARNAME value shell> some_command      Often, database, table, and column names must be substituted into commands.  To indicate that such substitution is necessary, this manual uses  db_name ,  tbl_name  and  col_name .  For example, you might see a statement like this:      mysql> SELECT col_name FROM db_name.tbl_name;      This means that if you were to enter a similar statement, you would supply your own database, table, and column names, perhaps like this:      mysql> SELECT author_name FROM biblio_db.author_list;      SQL statements may be written in uppercase or lowercase.  When this manual shows a SQL statement, uppercase is used for particular keywords if those keywords are under discussion (to emphasize them) and lowercase is used for the rest of the statement.  For example, you might see the following in a discussion of the  SELECT  statement:      mysql> SELECT count(*) FROM tbl_name;      On the other hand, in a discussion of the  COUNT()  function, the same statement would be written like this:      mysql> select COUNT(*) from tbl_name;      If no particular emphasis is intended, all keywords are written uniformly in uppercase.      In syntax descriptions, square brackets ( `['  and  `]' ) are used to indicate optional words or clauses:      DROP TABLE [IF EXISTS] tbl_name      When a syntax element consists of a number of alternatives, the alternatives are separated by vertical bars ( `|' ).  When one member from a set of choices  may  be chosen, the alternatives are listed within square brackets ( `['  and  `]' ):      TRIM([[BOTH | LEADING | TRAILING] [remstr] FROM] str)      When one member from a set of choices  must  be chosen, the alternatives are listed within braces ( `{'  and  `}' ):      {DESCRIBE | DESC} tbl_name {col_name | wild}       1.1.5  History of MySQL                  We once started out with the intention of using  mSQL  to connect to our tables using our own fast low-level (ISAM) routines. However, after some testing we came to the conclusion that  mSQL  was not fast enough nor flexible enough for our needs.  This resulted in a new SQL interface to our database but with almost the same API interface as  mSQL .  This API was chosen to ease porting of third-party code.      The derivation of the name MySQL is not perfectly clear.  Our base directory and a large number of our libraries and tools have had the prefix ``my'' for well over 10 years.  However, Monty's daughter (some years younger) is also named My.  Which of the two gave its name to MySQL is still a mystery, even for us.        1.1.6  The Main Features of MySQL              The following list describes some of the important characteristics of MySQL:          Fully multi-threaded using kernel threads.  This means it can easily use multiple CPUs if available.     C, C++, Eiffel, Java, Perl, PHP, Python and Tcl APIs.  See section  8  MySQL APIs .     Works on many different platforms.  See section  2.2.2  Operating Systems Supported by MySQL .     Many column types: signed/unsigned integers 1, 2, 3, 4, and 8 bytes long,  FLOAT ,  DOUBLE ,  CHAR ,  VARCHAR ,  TEXT ,  BLOB ,  DATE ,  TIME ,  DATETIME ,  TIMESTAMP ,  YEAR ,  SET , and  ENUM  types.  See section  6.2  Column Types .     Very fast joins using an optimized one-sweep multi-join.     Full operator and function support in the  SELECT  and  WHERE  parts of queries.  For example:    mysql> SELECT CONCAT(first_name, "" "", last_name) FROM tbl_name            WHERE income/dependents > 10000 AND age > 30;       SQL functions are implemented through a highly optimized class library and should be as fast as possible!  Usually there isn't any memory allocation  at all after query initialization.     Full support for SQL  GROUP BY  and  ORDER BY  clauses.  Support  for group functions ( COUNT() ,  COUNT(DISTINCT ...) ,   AVG() ,  STD() ,  SUM() ,  MAX()  and  MIN() ).     Support for  LEFT OUTER JOIN  and  RIGHT OUTER JOIN  with ANSI SQL and ODBC syntax.     You can mix tables from different databases in the same query (as of Version 3.22).     A privilege and password system that is very flexible and secure, and allows host-based verification.  Passwords are secure because all password traffic is encrypted when you connect to a server.     ODBC (Open-DataBase-Connectivity) support for Win32 (with source).  All ODBC 2.5 functions and many others.  For example, you can use MS Access to connect to your MySQL server.  See section  8.3  MySQL ODBC Support .     Very fast B-tree disk tables with index compression.     Up to 32 indexes per table are allowed.  Each index may consist of 1 to 16 columns or parts of columns.  The maximum index length is 500 bytes (this may be changed when compiling MySQL).  An index may use a prefix of a  CHAR  or  VARCHAR  field.     Fixed-length and variable-length records.     In-memory hash tables which are used as temporary tables.     Handles large databases.  We are using MySQL with some databases that contain 50,000,000 records and we know of users that uses MySQL with 60,000 tables and about 5,000,000,000 rows     All columns have default values.  You can use  INSERT  to insert a subset of a table's columns; those columns that are not explicitly given values are set to their default values.     Uses GNU Automake, Autoconf, and Libtool for portability.     Written in C and C++.  Tested with a broad range of different compilers.     A very fast thread-based memory allocation system.     No memory leaks.  MySQL has been tested with Purify, a commercial memory leakage detector.     Includes  myisamchk , a very fast utility for table checking, optimization, and repair.  All of the functionality of  myisamchk  is also available through the SQL interface as well.   See section  4  MySQL Database Administration .     Full support for several different character sets, including ISO-8859-1 (Latin1), big5, ujis, and more.  For example, the Scandinavian characters `@ringaccent{a}', `@""a' and `@""o' are allowed in table and column names.     All data are saved in the chosen character set.  All comparisons for normal string columns are case insensitive.     Sorting is done according to the chosen character set (the Swedish way by default).  It is possible to change this when the MySQL server is started up.  To see an example of very advanced sorting, look at the Czech sorting code.  MySQL supports many different character sets that can be specified at compile and run time.     Aliases on tables and columns are allowed as in the SQL92 standard.      DELETE ,  INSERT ,  REPLACE , and  UPDATE  return the number of rows that were changed (affected).  It is possible to return the number of rows matched instead by setting a flag when connecting to the server.     Function names do not clash with table or column names.  For example,   ABS  is a valid column name.  The only restriction is that for a  function call, no spaces are allowed between the function name and the   `('  that follows it.  See section  6.1.6  Is MySQL Picky About Reserved Words? .     All MySQL programs can be invoked with the  --help  or  -?  options to obtain online assistance.     The server can provide error messages to clients in many languages.  See section  4.6.2  Non-English Error Messages .     Clients may connect to the MySQL server using TCP/IP Sockets, Unix Sockets (Unix), or Named Pipes (NT).     The MySQL-specific  SHOW  command can be used to retrieve information about databases, tables, and indexes.  The  EXPLAIN  command can be used to determine how the optimizer resolves a query.       1.1.7  How Stable Is MySQL?            This section addresses the questions ``How stable is MySQL?'' and  ``Can I depend on MySQL in this project?''  We will try to clarify some issues and to answer some of the more important questions that seem to  concern many people.  This section has been put together from information  gathered from the mailing list (which is very active in reporting bugs).      At TcX, MySQL has worked without any problems in our projects since mid-1996.  When MySQL was released to a wider public, we noticed that there were some pieces of ``untested code'' that were quickly found by the new users who made queries in a manner different than our own.  Each new release has had fewer portability problems than the previous one (even though each has had many new features).      Each release of MySQL has been usable, and there have been problems only when users start to use code from the ``gray zones.''  Naturally, outside users don't know what the gray zones are; this section attempts to indicate those that are currently known.  The descriptions deal with Version 3.23 of MySQL.  All known and reported bugs are fixed in the latest  version, with the exception of the bugs listed in the bugs section, which  are things that are design-related.  See section  1.4.7  Known errors and design deficiencies in MySQL .      MySQL is written in multiple layers and different independent modules.  These modules are listed below with an indication of how well-tested each of them is:               The ISAM table handler -- Stable    This manages storage and retrieval of all data in MySQL Version 3.22 and earlier.  In all MySQL releases there hasn't been a single  (reported) bug in this code. The only known way to get a corrupted table  is to kill the server in the middle of an update.  Even that is unlikely  to destroy any data beyond rescue, because all data are flushed to disk  between each query.  There hasn't been a single bug report about lost data  because of bugs in MySQL.            The MyISAM table handler -- Stable    This is new in MySQL Version 3.23.  It's largely based on the ISAM table code but has a lot of new and very useful features.   The parser and lexical analyser -- Stable    There hasn't been a single reported bug in this system for a long time.   The C client code -- Stable    No known problems.  In early Version 3.20 releases, there were some limitations in the send/receive buffer size.  As of Version 3.21, the buffer size is now dynamic up to a default of 16M.   Standard client programs -- Stable    These include  mysql ,  mysqladmin ,  mysqlshow ,  mysqldump , and  mysqlimport .   Basic SQL -- Stable    The basic SQL function system and string classes and dynamic memory handling.  Not a single reported bug in this system.   Query optimizer -- Stable     Range optimizer -- Stable     Join optimizer -- Stable     Locking -- Gamma    This is very system-dependent.  On some systems there are big problems using standard OS locking ( fcntl() ).  In these cases, you should run the MySQL daemon with the  --skip-locking  flag.  Problems are known to occur on some Linux systems, and on SunOS when using NFS-mounted file systems.   Linux threads -- Stable    The major problem found has been with the  fcntl()  call, which is fixed by using the  --skip-locking  option to  mysqld .  Some people have reported lockup problems with Version 0.5. LinuxThreads will need to be recompiled if you plan to use 1000+ concurrent connections.  Although it is possible to run that many connections with the default LinuxThreads (however, you will never go above 1021), the default stack spacing of 2 MB makes the application unstable, and we have been able to reproduce a coredump after creating 1021 idle connections.  See section  2.6.1  Linux Notes (All Linux Versions) .   Solaris 2.5+ pthreads -- Stable    We use this for all our production work.   MIT-pthreads (Other systems) -- Stable    There have been no reported bugs since Version 3.20.15 and no known bugs since Version 3.20.16.  On some systems, there is a ``misfeature'' where some operations are quite slow (a 1/20 second sleep is done between each query). Of course, MIT-pthreads may slow down everything a bit, but index-based  SELECT  statements are usually done in one time frame so there shouldn't be a mutex locking/thread juggling.   Other thread implementions -- Beta - Gamma    The ports to other systems are still very new and may have bugs, possibly in MySQL, but most often in the thread implementation itself.   LOAD DATA ... ,  INSERT ... SELECT  -- Stable    Some people thought they had found bugs here, but these usually have turned out to be misunderstandings.  Please check the manual before reporting problems!   ALTER TABLE  -- Stable    Small changes in Version 3.22.12.   DBD -- Stable    Now maintained by Jochen Wiedmann  ( wiedmann@neckar-alb.de ).  Thanks!   mysqlaccess  -- Stable    Written and maintained by Yves Carlier  ( Yves.Carlier@rug.ac.be ). Thanks!   GRANT  -- Stable    Big changes made in MySQL Version 3.22.12.   MyODBC  (uses ODBC SDK 2.5) -- Gamma    It seems to work well with some programs.   Replication -- Beta / Gamma    We are still working on replication, so don't expect this to be rock solid yet.  On the other hand, some MySQL users are already using this with good results.   BDB Tables -- Beta    The Berkeley DB code is very stable, but we are still improving the interface between MySQL and BDB tables, so it will take some time before this is as tested as the other table types.   InnoDB Tables -- Beta    This is a recent addition to  MySQL . They appear to work good and can be used after some initial testing.   Automatic recovery of MyISAM tables - Beta    This only affects the new code that checks if the table was closed properly on open and executes an automatic check/repair of the table if it wasn't.   MERGE tables -- Beta / Gamma    The usage of keys on  MERGE  tables is still not that tested.  The other part of the  MERGE  code is quite well tested.   FULLTEXT -- Beta    Text search seems to work, but is still not widely used.       MySQL AB provides e-mail support for paying customers, but the  MySQL mailing list usually provides answers to common questions. Bugs are usually fixed right away with a patch; for serious bugs, there is almost always a new release.        1.1.8  How Big Can MySQL Tables Be?                    MySQL Version 3.22 has a 4G limit on table size. With the new  MyISAM  in MySQL Version 3.23 the maximum table size is pushed up to 8 million terabytes (2 ^ 63 bytes).      Note, however, that operating systems have their own file size limits. Here are some examples:       Operating System     File Size Limit     Linux-Intel 32 bit   2G, 4G or more, depends on Linux version    Linux-Alpha   8T (?)    Solaris 2.5.1   2G (possible 4G with patch)    Solaris 2.6   4G    Solaris 2.7 Intel   4G    Solaris 2.7 ULTRA-SPARC   8T (?)        On Linux 2.2 you can get bigger tables than 2G by using the LFS patch for the ext2 file system.  On Linux 2.4 there exists also patches for ReiserFS to get support for big files.      This means that the table size for MySQL is normally limited by the operating system.      By default, MySQL tables have a maximum size of about 4G.  You can check the maximum table size for a table with the  SHOW TABLE STATUS  command or with the  myisamchk -dv table_name . See section  4.5.5   SHOW  Syntax .      If you need bigger tables than 4G (and your operating system supports this), you should set the  AVG_ROW_LENGTH  and  MAX_ROWS  parameter when you create your table.  See section  6.5.3   CREATE TABLE  Syntax .  You can also set these later with  ALTER TABLE . See section  6.5.4   ALTER TABLE  Syntax .      If your big table is going to be read-only, you could use  myisampack  to merge and compress many tables to one.  myisampack  usually compresses a table by at least 50%, so you can have, in effect, much bigger tables.  See section  4.7.4  myisampack, The MySQL Compressed Read-only Table Generator .      You can go around the operating system file limit for  MyISAM  data files by using the  RAID  option. See section  6.5.3   CREATE TABLE  Syntax .      Another solution can be the included MERGE library, which allows you to handle a collection of identical tables as one. See section  7.2  MERGE Tables .        1.1.9  Year 2000 Compliance                MySQL itself has no problems with Year 2000 (Y2K) compliance:          MySQL uses Unix time functions and has no problems with dates until  2069 ; all 2-digit years are regarded to be in the range  1970  to  2069 , which means that if you store  01  in a  year  column, MySQL treats it as  2001 .     All MySQL date functions are stored in one file  `sql/time.cc'  and coded very carefully to be year 2000-safe.     In MySQL Version 3.22 and later, the new  YEAR  column type can store years  0  and  1901  to  2155  in 1 byte and display them using 2 or 4 digits.      You may run into problems with applications that use MySQL in a way that is not Y2K-safe.  For example, many old applications store or manipulate years using 2-digit values (which are ambiguous) rather than 4-digit values.  This problem may be compounded by applications that use values such as  00  or  99  as ``missing'' value indicators.      Unfortunately, these problems may be difficult to fix, because different applications may be written by different programmers, each of whom may use a different set of conventions and date-handling functions.      Here is a simple demonstration illustrating that MySQL doesn't have any problems with dates until the year 2030:      mysql> DROP TABLE IF EXISTS y2k; Query OK, 0 rows affected (0.01 sec)  mysql> CREATE TABLE y2k (date date, date_time datetime, time_stamp timestamp); Query OK, 0 rows affected (0.00 sec)  mysql> INSERT INTO y2k VALUES      -> (""1998-12-31"",""1998-12-31 23:59:59"",19981231235959),     -> (""1999-01-01"",""1999-01-01 00:00:00"",19990101000000),     -> (""1999-09-09"",""1999-09-09 23:59:59"",19990909235959),     -> (""2000-01-01"",""2000-01-01 00:00:00"",20000101000000),     -> (""2000-02-28"",""2000-02-28 00:00:00"",20000228000000),     -> (""2000-02-29"",""2000-02-29 00:00:00"",20000229000000),     -> (""2000-03-01"",""2000-03-01 00:00:00"",20000301000000),     -> (""2000-12-31"",""2000-12-31 23:59:59"",20001231235959),     -> (""2001-01-01"",""2001-01-01 00:00:00"",20010101000000),     -> (""2004-12-31"",""2004-12-31 23:59:59"",20041231235959),     -> (""2005-01-01"",""2005-01-01 00:00:00"",20050101000000),     -> (""2030-01-01"",""2030-01-01 00:00:00"",20300101000000),     -> (""2050-01-01"",""2050-01-01 00:00:00"",20500101000000); Query OK, 13 rows affected (0.01 sec) Records: 13  Duplicates: 0  Warnings: 0  mysql> SELECT * FROM y2k; +------------+---------------------+----------------+ | date       | date_time           | time_stamp     | +------------+---------------------+----------------+ | 1998-12-31 | 1998-12-31 23:59:59 | 19981231235959 | | 1999-01-01 | 1999-01-01 00:00:00 | 19990101000000 | | 1999-09-09 | 1999-09-09 23:59:59 | 19990909235959 | | 2000-01-01 | 2000-01-01 00:00:00 | 20000101000000 | | 2000-02-28 | 2000-02-28 00:00:00 | 20000228000000 | | 2000-02-29 | 2000-02-29 00:00:00 | 20000229000000 | | 2000-03-01 | 2000-03-01 00:00:00 | 20000301000000 | | 2000-12-31 | 2000-12-31 23:59:59 | 20001231235959 | | 2001-01-01 | 2001-01-01 00:00:00 | 20010101000000 | | 2004-12-31 | 2004-12-31 23:59:59 | 20041231235959 | | 2005-01-01 | 2005-01-01 00:00:00 | 20050101000000 | | 2030-01-01 | 2030-01-01 00:00:00 | 20300101000000 | | 2050-01-01 | 2050-01-01 00:00:00 | 00000000000000 | +------------+---------------------+----------------+ 13 rows in set (0.00 sec)       This shows that the  DATE  and  DATETIME  types will not give any problems with future dates (they handle dates until the year 9999).      The  TIMESTAMP  type, which is used to store the current time, has a range up to only  2030-01-01 .   TIMESTAMP  has a range of  1970  to  2030  on 32-bit machines (signed value).  On 64-bit machines it handles times up to  2106  (unsigned value).      Even though MySQL is Y2K-compliant, it is your responsibility to provide unambiguous input.  See section  6.2.2.1  Y2K Issues and Date Types  for MySQL's rules for dealing with ambiguous date input data (data containing 2-digit year values).        1.2  MySQL Information Sources                1.2.1  Books About MySQL     For the latest book information, with user comments, please visit  http://www.mysql.com/portal/books/html/index.html .      While this manual is still the right place for up to date technical information, its primary goal is to contain everything there is to know about MySQL.  It is sometimes nice to have a bound book to read in bed or while you travel.  Here is a list of books about MySQL and related subjects (in English).      By purchasing a book through these hyperlinks provided herein, you are contributing to the development of MySQL.       MySQL     Available     Barnes and Noble     Publisher   New Riders    Author   Paul DuBois    Pub Date   1st Edition December 1999    ISBN   0735709211    Pages   800    Price   $49.99 US    Downloadable examples       samp_db  distribution     Errata     are available here           Foreword by Michael ``Monty'' Widenius, MySQL Moderator.        In  MySQL , Paul DuBois provides you with a comprehensive guide to one of the most popular relational database systems.  Paul has contributed to the online documentation for MySQL and is an active member of the MySQL community.  The principal MySQL developer, Monty Widenius, and a network of his fellow developers reviewed the manuscript, and provided Paul with the kind of insight no one else could supply.        Instead of merely giving you a general overview of MySQL, Paul teaches you how to make the most of its capabilities.  Through two sample database applications that run throughout the book, he gives you solutions to problems you're sure to face.  He helps you integrate MySQL efficiently with third-party tools, such as PHP and Perl, enabling you to generate dynamic Web pages through database queries.  He teaches you to write programs that access MySQL databases, and also provides a comprehensive set of references to column types, operators, functions, SQL syntax, MySQL programming, C API, Perl  DBI , and PHP API.  MySQL  simply gives you the kind of information you won't find anywhere else.        If you use MySQL, this book provides you with:       An introduction to MySQL and SQL.    Coverage of MySQL's data types and how to use them.    Thorough treatment of how to write client programs in C.    A guide to using the Perl  DBI  and PHP APIs for developing command-line and Web-based applications.    Tips on administrative issues such as user accounts, backup, crash recovery, and security.    Help in choosing an ISP for MySQL access.    A comprehensive reference for MySQL's data types, operators, functions, and SQL statements and utilities.    Complete reference guides for MySQL's C API, the Perl  DBI  API, and PHP's MySQL-related functions.              MySQL & mSQL     Available     Barnes and Noble     Publisher   O'Reilly    Authors   Randy Jay Yarger, George Reese & Tim King    Pub Date   1st Edition July 1999    ISBN   1-56592-434-7, Order Number: 4347    Pages   506    Price   $34.95          This book teaches you how to use MySQL and  mSQL , two popular and robust database products that support key subsets of SQL on both Linux and Unix systems.  Anyone who knows basic C, Java, Perl, or Python can write a program to interact with a database, either as a stand-alone application or through a Web page.  This book takes you through the whole process, from installation and configuration to programming interfaces and basic administration.  Includes plenty of tutorial material.         Sams' Teach Yourself MySQL in 21 Days     Available     Barnes and Noble     Publisher   Sams    Authors   Mark Maslakowski and Tony Butcher    Pub Date   June 2000    ISBN   0672319144    Pages   650    Price   $39.99          Sams'  Teach Yourself MySQL in 21 Days  is for intermediate Linux users who want to move into databases.  A large share of the audience is Web  developers who need a database to store large amounts of information that  can be retrieved via the Web.      Sams'  Teach Yourself MySQL in 21 Days  is a practical, step-by-step tutorial.  The reader will learn to design and employ this open source database technology into his or her Web site using practical, hands-on  examples to follow.         E-Commerce Solutions with MySQL     Available     Barnes and Noble     Publisher   Prima Communications, Inc.    Authors   N/A    Pub Date   January 2000    ISBN   0761524452    Pages   500    Price   $39.99          No description available.         MySQL and PHP from Scratch     Available     Barnes and Noble     Publisher   Que    Authors   N/A    Pub Date   September 2000    ISBN   0789724405    Pages   550    Price   $34.99          This book puts together information on installing, setting up, and troubleshooting Apache, MySQL, PHP3, and IMP into one complete volume.  You also learn how each piece is part of a whole by learning, step-by-step, how to create a web-based e-mail system.  Learn to run the equivalent of Active Server Pages (ASP) using PHP3, set up an e-commerce site using a database and the Apache web server, and create a data entry system (such as sales, product quality tracking, customer preferences, etc) that no installation in the PC.         Professional MySQL Programming     Available     Barnes and Noble     Publisher   Wrox Press, Inc.    Authors   N/A    Pub Date   Late 2001    ISBN   1861005164    Pages   1000    Price   $49.99          No description available.         Professional Linux Programming     Available     Barnes and Noble     Publisher   Wrox Press, Inc.    Authors   N/A    Pub Date   September 2000    ISBN   1861003013    Pages   1155    Price   $47.99          In this follow-up to the best-selling  Beginning Linux Programming , you will learn from the authors' real-world knowledge and experience of developing software for Linux; you'll be taken through the development of a sample 'DVD Store' application, with 'theme' chapters addressing different aspects of its implementation.  Meanwhile, individual ``take-a-break'' chapters cover important topics that go beyond the bounds of the central theme.  All focus on the practical aspects of programming, showing how crucial it is to choose the right tools for the job, use them as they should be used, and get things right first time.         PHP and MySQL Web Development     Available     Barnes and Noble     Publisher   Sams    Authors   Luke Welling, Laura Thomson    Pub Date   March 2001    ISBN   0672317842    Pages   700    Price   $49.99           PHP and MySQL Web Development  introduces you to the advantages of implementing both MySQL and PHP.  These advantages are detailed through the provision of both statistics and several case studies.  A practical web application is developed throughout the book, providing you with the tools necessary to implement a functional online database.  Each function is developed separately, allowing you the choice to incorporate only those parts that you would like to implement.  Programming concepts of the PHP language are highlighted, including functions which tie MySQL support into a PHP script and advanced topics regarding table manipulation.         Books recommended by the MySQL Developers        SQL-99 Complete, Really     Available     Barnes and Noble     Publisher   CMP Books    Authors   Peter Gulutzan, Trudy Pelzer    Pub Date   April 1999    ISBN   0879305681    Pages   1104    Price   $55.96          This book contains complete descriptions of the new standards for syntax, data structures, and retrieval processes of SQL databases.  As an example-based reference manual, it includes all of the CLI functions, information, schema tables, and status codes, as well as a working SQL database provided on the companion disk.         C, A reference manual     Available     Barnes and Noble     Publisher   Prentice Hall    Authors   Samuel P. Harbison, Guy L. Steele    Pub Date   September 1994    ISBN   0133262243    Pages   480    Price   $35.99          A new and improved revision of the bestselling C language reference.  This manual introduces the notion of ""Clean C"", writing C code that can be compiled as a C++ program, C programming style that emphasizes correctness, portability, maintainability, and incorporates the ISO C Amendment 1 (1994) which specifies new facilities for writing portable, international programs in C.         C++ for Real Programmers     Available     Barnes and Noble     Publisher   Academic Press, Incorporated    Authors   Jeff Alger, Jim Keogh    Pub Date   February 1998    ISBN   0120499428    Pages   388    Price   $39.95           C++ For Real Programmers  bridges the gap between C++ as described in beginner and intermediate-level books and C++ as it is practiced by experts.  Numerous valuable techniques are described, organized into three simple themes: indirection, class hierarchies, and memory management.  It also provides in-depth coverage of template creation, exception handling, pointers and optimization techniques.  The focus of the book is on ANSI C++ and, as such, is compiler independent.        C++ For Real Programmers  is a revision of   Secrets of the C++ Masters  and includes a new appendix comparing C++  with Java.  The book comes with a 3.5"" disk for Windows with source code.         Algorithms in C     Available     Barnes and Noble     Publisher   Addison Wesley Longman, Inc.    Authors   Robert Sedgewick    Pub Date   April 1990    ISBN   0201514257    Pages   648    Price   $45.75           Algorithms in C  describes a variety of algorithms in a number of areas of interest, including: sorting, searching, string-processing, and geometric, graph and mathematical algorithms.  The book emphasizes fundamental techniques, providing readers with the tools to confidently  implement, run, and debug useful algorithms.         Multithreaded Programming with Pthreads     Available     Barnes and Noble     Publisher   Prentice Hall    Authors   Bil Lewis, Daniel J. Berg    Pub Date   October 1997    ISBN   0136807291    Pages   432    Price   $34.95          Based on the best-selling  Threads Primer ,   Multithreaded Programming with Pthreads  gives you a solid  understanding of Posix threads: what they are, how they work, when to use  them, and how to optimize them. It retains the clarity and humor of   Threads Primer , but includes expanded comparisons to Win32 and OS/2 implementations.  Code examples tested on all of the major UNIX platforms  are featured along with detailed explanations of how and why they use threads.         Programming the PERL DBI: Database Programming with PERL     Available     Barnes and Noble     Publisher   O'Reilly & Associates, Incorporated    Authors   Alligator Descartes, Tim Bunce    Pub Date   February 2000    ISBN   1565926994    Pages   400    Price   $27.96           Programming the Perl DBI  is coauthored by Alligator Descartes, one of the most active members of the DBI community, and by Tim Bunce, the inventor of DBI.  For the uninitiated, the book explains the architecture of DBI and shows you how to write DBI-based programs.  For the experienced DBI dabbler, this book explains DBI's nuances and the peculiarities of each individual DBD.      The book includes:       An introduction to DBI and its design.    How to construct queries and bind parameters.    Working with database, driver, and statement handles.    Debugging techniques.    Coverage of each existing DBD.    A complete reference to DBI.               1.2.2  General SQL Information and Tutorials     The following book has been recommended by several people on the MySQL mailing list:      Judith S. Bowman, Sandra L. Emerson and Marcy Darnovsky  The Practical SQL Handbook: Using Structured Query Language  Second Edition Addison-Wesley ISBN 0-201-62623-3 http://www.awl.com      The following book has also received some recommendations by MySQL users:      Martin Gruber  Understanding SQL  ISBN 0-89588-644-8 Publisher Sybex 510 523 8233 Alameda, CA USA      A SQL tutorial is available on the net at http://w3.one.net/~jhoffman/sqltut.htm        1.2.3  Useful MySQL-related Links     Apart from the following links, you can find and download a lot of MySQL programs, tools and APIs from the   Contrib directory .            MySQL    1.2.4  Tutorials and Manuals          MySQL Myths Debunked    MySQL used in the real world.   http://www.4t2.com/mysql    Information about the German MySQL mailing list.   http://www2.rent-a-database.de/mysql/    MySQL handbook in German.   http://www.bitmover.com:8888//home/bk/mysql    Web access to the MySQL BitKeeper repository.   http://www.analysisandsolutions.com/code/mybasic.htm    Beginners MySQL Tutorial on how to install and set up MySQL on a Windows machine.   http://www.devshed.com/Server_Side/MySQL/    A lot of MySQL tutorials.   http://mysql.hitstar.com/    MySQL manual in Chinese.   http://www.linuxplanet.com/linuxplanet/tutorials/1046/1/    Setting Up a MySQL-based Web site.   http://www.hotwired.com/webmonkey/backend/tutorials/tutorial1.html    MySQL-Perl tutorial.   http://www.iserver.com/support/contrib/perl5/modules.html    Installing new Perl modules that require locally installed modules.   http://www.hotwired.com/webmonkey/databases/tutorials/tutorial4.html    PHP/MySQL Tutorial.   http://www.useractive.com/    Hands on tutorial for MySQL.      1.2.5  Porting MySQL/Using MySQL on Different Systems       http://www.entropy.ch/software/macosx/mysql/    Binary of MySQL for Mac OS X Client.  Includes information of how to build and use MySQL on Mac OS X.   http://xclave.macnn.com/MySQL/    The Mac OS Xclave.  Running MySQL on Mac OS X.   http://www.prnet.de/RegEx/mysql.html    MySQL for Mac OS X Server.   http://www.latencyzero.com/macosx/mysql.html    Building MySQL for Mac OS X.   http://www.essencesw.com/Software/mysqllib.html    New Client libraries for the Mac OS Classic (Macintosh).   http://www.lilback.com/macsql/    Client libraries for Mac OS Classic (Macintosh).   http://sixk.maniasys.com/index_en.html    MySQL for Amiga      1.2.6  Perl-related Links       http://dbimysql.photoflux.com/    Perl DBI with MySQL FAQ.      1.2.7  MySQL Discussion Forums       http://www.weberdev.com/    Examples using MySQL; (check Top 20)   http://futurerealm.com/forum/futureforum.htm    FutureForum Web Discussion Software.      1.2.8  Commercial Applications that Support MySQL       http://www.supportwizard.com/    SupportWizard; Interactive helpdesk on the Web (This product includes a licensed copy of MySQL.)   http://www.sonork.com/    Sonork,  Instant Messenger that is not only Internet oriented.  It's  focused on private networks and on small to medium companies.  Client is free, server is free for up to 5 seats.   http://www.stweb.org/    StWeb - Stratos Web and Application server - An easy-to-use, cross platform, Internet/Intranet development and deployment system for development of web-enabled applications.  The standard version of StWeb has a native interface to MySQL database.   http://www.rightnowtech.com/    Right Now Web; Web automation for customer service.   http://www.icaap.org/Bazaar/    Bazaar; Interactive Discussion Forums with Web interface.     http://www.phonesweep.com/    PhoneSweepT is the world's first commercial Telephone Scanner.  Many break-ins in recent years have come not through the Internet, but through unauthorized dial-up modems.  PhoneSweep lets you find these modems by repeatedly placing phone calls to every phone number that your organization controls.  PhoneSweep has a built-in expert system that can recognize more than 250 different kinds of remote-access programs, including Carbon Copy(TM), pcANYWHERE(TM), and Windows NT RAS.  All information is stored in the SQL database.  It then generates a comprehensive report detailing which services were discovered on which dial-up numbers in your organization.      1.2.9  SQL Clients and Report Writers        urSQL    SQL Editor and Query Utility. Custom syntax highlighting, editable results grid, exportable result-sets, basic MySQL admin functions, Etc.. For Windows.    MySQL Data Manager    MySQL Data Manager * is platform independent web client (written in perl) for MySQL server over TCP/IP.   http://ksql.sourceforge.net/    KDE MySQL client.   http://www.ecker-software.de    A Windows GUI client by David Ecker.   http://www.icaap.org/software/kiosk/    Kiosk; a MySQL client for database management.  Written in Perl. Will be a part of Bazaar.   http://www.casestudio.com/    Db design tool that supports MySQL 3.23.   http://home.skif.net/~voland/zeos/eng/index.html    Zeos - A client that supports MySQL, Interbase and PostgreSQL.   http://www.geocities.com/SiliconValley/Ridge/4280/GenericReportWriter/grwhome.html    A free report writer in Java   http://www.javaframework.de    MySQLExport - Export of MySQL create statements and data in a lot of different formats (SQL, HTML, CVS, text, ZIP, GZIP...)   http://dlabs.4t2.com    M2D, a MySQL Administration client for Windows.  M2D supports  administration of MySQL databases, creation of new databases and  tables, editing, and more.   http://dlabs.4t2.com    Dexter, a small server written in Perl which can be used as a proxy server for MySQL or as a database extender.   http://www.scibit.com/Products/Software/Utils/Mascon.asp    Mascon is a powerful Win32 GUI for administering MySQL databases.   http://www.rtlabs.com/    MacSQL Monitor.  GUI for MySQL, ODBC, and JDBC databases for the Mac OS.      1.2.10  Distributions that Include MySQL       http://www.suse.com/    SuSE Linux (6.1 and above)   http://www.redhat.com/    RedHat Linux (7.0 and above)   http://distro.conectiva.com.br    Conectiva Linux (4.0 and above)      1.2.11  Web Development Tools that Support MySQL       http://www.php.net/    PHP: A server-side HTML-embedded scripting language.   http://www.midgard-project.org    The Midgard Application Server; a powerful Web development environment based on MySQL and PHP.   http://www.smartworker.org    SmartWorker is a platform for Web application development.   http://xsp.lentus.se/    XSP: e(X)tendible (S)erver (P)ages and is a HTML embedded tag language written in Java (previously known as XTAGS.)     http://www.dbServ.de/    dbServ is an extension to a web server to integrate database output into your HTML code.  You may use any HTML function in your output.  Only the client will stop you.  It works as standalone server or as Java servlet.   http://www.chilisoft.com/    Platform independent ASP from Chili!Soft   http://www.voicenet.com/~zellert/tjFM    A JDBC driver for MySQL.   http://www.wernhart.priv.at/php/    MySQL + PHP demos.   http://www.dbwww.com/    ForwardSQL: HTML interface to manipulate MySQL databases.   http://www.daa.com.au/~james/www-sql/    WWW-SQL: Display database information.   http://www.minivend.com/minivend/    Minivend: A Web shopping cart.   http://www.heitml.com/    HeiTML: A server-side extension of HTML and a 4GL language at the same time.   http://www.metahtml.com/    Metahtml: A Dynamic Programming Language for WWW Applications.   http://www.binevolve.com/    VelocityGen for Perl and Tcl.   http://hawkeye.net/    Hawkeye Internet Server Suite.   http://www.fastflow.com/    Network Database Connection For Linux   http://www.wdbi.net/    WDBI: Web browser as a universal front end to databases which supports MySQL well.   http://www.webgroove.com/    WebGroove Script: HTML compiler and server-side scripting language.   http://www.ihtml.com/    A server-side Web site scripting language.   ftp://ftp.igc.apc.org/pub/myodbc/README    How to use MySQL with ColdFusion on Solaris.   http://calistra.com/MySQL/    Calistra's ODBC MySQL Administrator.     http://www.webmerger.com    Webmerger -  This CGI tool interprets files and generates dynamic output based on a set of simple tags.  Ready-to-run drivers for MySQL and PostgreSQL through ODBC.   http://phpclub.net/    PHPclub - Tips and tricks for PHP.   http://www.penguinservices.com/scripts    MySQL and Perl Scripts.   http://www.widgetchuck.com    The Widgetchuck; Web Site Tools and Gadgets   http://www.adcycle.com/    AdCycle - advertising management software.     http://sourceforge.net/projects/pwpage/    pwPage - provides an extremely fast and simple approach to the creation  of database forms.  That is, if a database table exists and an HTML page  has been constructed using a few simple guidelines, pwPage can be  immediately used for table data selections, insertions, updates, deletions  and selectable table content reviewing.   http://www.omnis-software.com/products/studio/studio.html    OMNIS Studio is a rapid application development (RAD) tool.     http://www.webplus.com    talentsoft Web+ 4.6 - a powerful and comprehensive development language for use in creating web-based client/server applications without writing complicated, low-level, and time-consuming CGI programs.      1.2.12  Database Design Tools with MySQL Support       http://www.mysql.com/documentation/dezign/    ""DeZign for databases"" is a database development tool that uses an entity relationship diagram (ERD).      1.2.13  Web Servers with MySQL Tools       ftp://ftp.kcilink.com/pub/    mod_auth_mysql, An Apache authentication module.   http://www.roxen.com/    The Roxen Challenger Web server.      1.2.14  Extensions for Other Programs       http://www.seawood.org/msql_bind/    MySQL support for BIND (The Internet Domain Name Server).   http://www.inet-interactive.com/sendmail/    MySQL support for Sendmail and Procmail.      1.2.15  Using MySQL with Other Programs       http://www.iserver.com/support/addonhelp/database/mysql/msaccess.html    Using MySQL with Access.   http://www.iserver.com/support/contrib/perl5/modules.html    Installing new Perl modules that require locally installed modules.      1.2.16  ODBC-related Links       http://www.iodbc.org/    Popular iODBC Driver Manager (libiodbc) now available as Open Source.   http://users.ids.net/~bjepson/freeODBC/    The FreeODBC Pages.   http://genix.net/unixODBC/    The unixODBC Project goals are to develop and promote unixODBC to be the definitive standard for ODBC on the Linux platform.  This is to include GUI support for KDE.   http://www.sw-soft.com/products/BtrieveODBC/    A MySQL-based ODBC driver for Btrieve.      1.2.17   API -related Links       http://www.jppp.com/    Partially implemented TDataset-compatible components for MySQL.   http://www.riverstyx.net/qpopmysql/    qpopmysql - A patch to allow POP3 authentication from a MySQL database.  There's also a link to Paul Khavkine's patch for Procmail to allow any MTA to deliver to users in a MySQL database.   http://www.pbc.ottawa.on.ca    Visual Basic class generator for Active X.   http://www.essencesw.com/Software/mysqllib.html    New Client libraries for the Mac OS Classic (Macintosh).   http://www.lilback.com/macsql/    Client libraries for the Macintosh.   http://www.essencesw.com/Plugins/mysqlplug.html    Plugin for REALbasic (for Macintosh)   http://www.iis.ee.ethz.ch/~neeri/macintosh/gusi-qa.html    A library that emulates BSD sockets and pthreads on Macintosh.  This can be used if you want to compile the MySQL client library on Mac. It could probably even be sued to port MySQL to Macintosh, but we don't know of anyone that has tried that.     http://www.dedecker.net/jessie/scmdb/    SCMDB - an add-on for SCM that ports the MySQL C library to scheme (SCM).  With this library scheme developers can make connections to a MySQL database and use embedded SQL in their programs.      1.2.18  Other MySQL-related Links        SAT    The Small Application Toolkit (SAT) is a collection of utilities intended to simplify the development of small, multi-user, GUI based applications in a (Microsoft -or- X) Windows Client / Unix Server environment.   http://www.wix.com/mysql-hosting/    Registry of Web providers who support MySQL.   http://www.softagency.co.jp/mysql/index.en.html    Links about using MySQL in Japan/Asia.   http://abattoir.cc.ndsu.nodak.edu/~nem/mysql/udf/    MySQL UDF Registry.   http://www.open.com.au/products.html    Commercial Web defect tracking system.   http://www.stonekeep.com/pts/    PTS: Project Tracking System.   http://tomato.nvgc.vt.edu/~hroberts/mot    Job and software tracking system.   http://www.cynergi.net/exportsql/    ExportSQL: A script to export data from Access95+.   http://SAL.KachinaTech.COM/H/1/MYSQL.html    SAL (Scientific Applications on Linux) MySQL entry.   http://www.infotech-nj.com/itech/index.shtml    A consulting company which mentions MySQL in the right company.   http://www.pmpcs.com/    PMP Computer Solutions.  Database developers using MySQL and  mSQL .   http://www.aewa.org/    Airborne Early Warning Association.   http://www.dedserius.com/y2kmatrix/    Y2K tester.      1.2.19  SQL and Database Interfaces       http://java.sun.com/products/jdbc/    The JDBC database access API.   http://www.gagme.com/mysql    Patch for  mSQL  Tcl.   http://www.amsoft.ru/easysql/    EasySQL: An ODBC-like driver manager.   http://www.lightlink.com/hessling/rexxsql.html    A REXX interface to SQL databases.   http://www.mytcl.cx/    Tcl interface based on tcl-sql with many bugfixes.   http://www.binevolve.com/~tdarugar/tcl-sql/    Tcl interface.   http://www.contrib.andrew.cmu.edu/~shadow/sql.html    SQL Reference Page with a lot of interesting links.       1.2.20  Examples of MySQL Use       http://www.little6.com/about/linux/    Little6 Inc., An online contract and job finding site that is powered by MySQL, PHP3, and Linux.   http://www.delec.com/is/products/prep/examples/BookShelf/index.html    DELECis - A tool that makes it very easy to create an automatically generated table documentation. They have used MySQL as an example.   http://www.worldrecords.com    World Records - A search engine for information about music that uses MySQL and PHP.   http://www.webtechniques.com/archives/1998/01/note/    A Contact Database using MySQL and PHP.   http://modems.rosenet.net/mysql/    Web based interface and Community Calendar with PHP.   http://www.odbsoft.com/cook/sources.htm    Perl package to generate html from a SQL table structure and for generating SQL statements from an html form.   http://www.gusnet.cx/proj/telsql/    Basic telephone database using  DBI / DBD .   http://tecfa.unige.ch/guides/java/staf2x/ex/jdbc/coffee-break    JDBC examples by Daniel K. Schneider.   http://www.spade.com/linux/howto/PostgreSQL-HOWTO-41.html    SQL BNF   http://www.ooc.com/    Object Oriented Concepts Inc; CORBA applications with examples in source.   http://www.pbc.ottawa.on.ca/    DBWiz; Includes an example of how to manage cursors in VB.     http://keilor.cs.umass.edu/pluribus/    Pluribus is a free search engine that learns to improve the quality of its results over time.  Pluribus works by recording which pages a user prefers among those returned for a query.  A user votes for a page by selecting it; Pluribus then uses that knowledge to improve the quality of the results when someone else submits the same (or similar) query.  Uses PHP and MySQL.   http://www.stopbit.com/    Stopbit - A technology news site using MySQL and PHP.   http://www.linuxsupportline.com/~kalendar/    KDE based calendar manager - The calendar manager has both single user (file based) and multi-user (MySQL database) support.   http://tim.desert.net/~tim/imger/    Example of storing/retrieving images with MySQL and CGI.   http://www.penguinservices.com/scripts    Online shopping cart system.     http://www.city-gallery.com/album/    Old Photo Album - The album is a collaborative popular history of photography project that generates all pages from data stored in a MySQL database.  Pages are dynamically generated through a php3 interface to the database content.  Users contribute images and descriptions.  Contributed  images are stored on the web server to avoid storing them in the database  as BLOBs.  All other information is stored on the shared MySQL server.      1.2.21  General Database Links       http://www.pcslink.com/~ej/dbweb.html    Database Jump Site   http://black.hole-in-the.net/guy/webdb/    Homepage of the webdb-l (Web Databases) mailing list.   http://www.symbolstone.org/technology/perl/DBI/index.html    Perl  DBI / DBD  modules homepage.   http://www.student.uni-koeln.de/cygwin/    Cygwin tools.  Unix on top of Windows.   http://dbasecentral.com/    dbasecentral.com; Development and distribution of powerful and easy-to-use database applications and systems.       http://www.tek-tips.com/    Tek-Tips Forums are 800+ independent peer-to-peer non-commercial support forums for Computer Professionals.  Features include automatic e-mail notification of responses, a links library, and member confidentiality guaranteed.   http://www.public.asu.edu/~peterjn/btree/    B-Trees: Balanced Tree Data Structures.   http://www.fit.qut.edu.au/~maire/baobab/lecture/sld001.htm    A lecture about B-Trees.      There are also many Web pages that use MySQL.  See section  B  Some MySQL Users .  Send any additions to this list to  webmaster@mysql.com . We now require that you show a MySQL logo somewhere if you wish your  site to be added.  It is okay to have it on a ``used tools'' page or  something similar.        1.2.22  MySQL Mailing Lists               This section introduces you to the MySQL mailing lists, and gives some guidelines as to how to use them.        1.2.22.1  The MySQL Mailing Lists              To subscribe to the main MySQL mailing list, send a message to the electronic mail address  mysql-subscribe@lists.mysql.com .      To unsubscribe from the main MySQL mailing list, send a message to the electronic mail address  mysql-unsubscribe@lists.mysql.com .      Only the address to which you send your messages is significant.  The subject line and the body of the message are ignored.      If your reply address is not valid, you can specify your address explicitly.  Adding a hyphen to the subscribe or unsubscribe command word, followed by your address with the  `@'  character in your address replaced by a  `=' .  For example, to subscribe  your_name@host.domain , send a message to  mysql-subscribe-your_name=host.domain@lists.mysql.com .      Mail to  mysql-subscribe@lists.mysql.com  or  mysql-unsubscribe@lists.mysql.com  is handled automatically by the ezmlm mailing list processor.  Information about ezmlm is available at   The ezmlm Website .      To post a message to the list itself, send your message to  mysql@lists.mysql.com .  However, please  do not  send mail about subscribing or unsubscribing to  mysql@lists.mysql.com , because any mail sent to that address is distributed automatically to thousands of other users.      Your local site may have many subscribers to  mysql@lists.mysql.com . If so, it may have a local mailing list, so that messages sent from  lists.mysql.com  to your site are propagated to the local list.  In such cases, please contact your system administrator to be added to or dropped from the local MySQL list.      If you wish to have traffic for a mailing list go to a separate mailbox in your mail program, set up a filter based on the message headers.  You can use either the  List-ID:  or  Delivered-To:  headers to identify list messages.      The following MySQL mailing lists exist:        announce-subscribe@lists.mysql.com  announce    This is for announcement of new versions of MySQL and related programs.  This is a low volume list all MySQL users should subscribe to.   mysql-subscribe@lists.mysql.com  mysql    The main list for general MySQL discussion.  Please note that some topics are better discussed on the more-specialized lists.  If you post to the wrong list, you may not get an answer!   mysql-digest-subscribe@lists.mysql.com  mysql-digest    The  mysql  list in digest form.  That means you get all individual messages, sent as one large mail message once a day.   bugs-subscribe@lists.mysql.com  bugs    On this list you should only post a full, repeatable bug report using the  mysqlbug  script (if you are running on Windows, you should include a description of the operating system and the MySQL version). Preferably, you should test the problem using the latest stable or development version of MySQL before posting!  Anyone should be able to repeat the bug by just using  mysql test < script  on the included test case.  All  bugs posted on this list will be corrected or documented in the next  MySQL release!  If there are only small code changes involved, we will also post a patch that fixes the problem.   bugs-digest-subscribe@lists.mysql.com  bugs-digest    The  bugs  list in digest form.   internals-subscribe@lists.mysql.com  internals    A list for people who work on the MySQL code.  On this list one can also discuss MySQL development and post patches.   internals-digest-subscribe@lists.mysql.com  internals-digest    A digest version of the  internals  list.   java-subscribe@lists.mysql.com  java    Discussion about MySQL and Java.  Mostly about the JDBC drivers.   java-digest-subscribe@lists.mysql.com  java-digest    A digest version of the  java  list.   win32-subscribe@lists.mysql.com  win32    All things concerning MySQL on Microsoft operating systems such as Win95, Win98, NT, and Win2000.   win32-digest-subscribe@lists.mysql.com  win32-digest    A digest version of the  win32  list.   myodbc-subscribe@lists.mysql.com  myodbc    All things about connecting to MySQL with ODBC.   myodbc-digest-subscribe@lists.mysql.com  myodbc-digest    A digest version of the  myodbc  list.   plusplus-subscribe@lists.mysql.com  plusplus    All things concerning programming with the C++ API to MySQL.   plusplus-digest-subscribe@lists.mysql.com  plusplus-digest    A digest version of the  plusplus  list.   msql-mysql-modules-subscribe@lists.mysql.com  msql-mysql-modules    A list about the Perl support in MySQL. msql-mysql-modules   msql-mysql-modules-digest-subscribe@lists.mysql.com  msql-mysql-modules-digest    A digest version of the  msql-mysql-modules  list.      You subscribe or unsubscribe to all lists in the same way as described above.  In your subscribe or unsubscribe message, just put the appropriate mailing list name rather than  mysql .  For example, to subscribe to or unsubscribe from the  myodbc  list, send a message to  myodbc-subscribe@lists.mysql.com  or  myodbc-unsubscribe@lists.mysql.com .      If you can't get an answer for your questions from the mailing list, one option is to pay for support from MySQL AB, which will put you in direct contact with MySQL developers. See section  1.3.5  Types of Commercial Support .      The following table shows some MySQL mailing in other languages than English.  Note that these are not operated by MySQL AB, so we can't guarantee the quality on these.        mysql-france-subscribe@yahoogroups.com  A French mailing list     list@tinc.net  A Korean mailing list    Email  subscribe mysql your@email.address  to this list.  mysql-de-request@lists.4t2.com  A German mailing list    Email  subscribe mysql-de your@email.address  to this list. You can find information about this mailing list at  http://www.4t2.com/mysql .  mysql-br-request@listas.linkway.com.br  A Portugese mailing list    Email  subscribe mysql-br your@email.address  to this list.  mysql-alta@elistas.net  A Spanish mailing list    Email  subscribe mysql your@email.address  to this list.       1.2.22.2  Asking Questions or Reporting Bugs                Before posting a bug report or question, please do the following:          Start by searching the MySQL online manual at:    http://www.mysql.com/documentation/manual.php    We try to keep the manual up to date by updating it frequently with  solutions to newly found problems!     Search the MySQL mailing list archives:    http://www.mysql.com/documentation/       You can also use  http://www.mysql.com/search.html  to search all the Web pages (including the manual) that are located at   http://www.mysql.com/ .      If you can't find an answer in the manual or the archives, check with your local MySQL expert.  If you still can't find an answer to your question, go ahead and read the next section about how to send mail to  mysql@lists.mysql.com .        1.2.22.3  How to Report Bugs or Problems                        Writing a good bug report takes patience, but doing it right the first time saves time for us and for you.  A good bug report containing a full test case for the bug will make it very likely that we will fix it in the next release.  This section will help you write your report correctly so that you don't waste your time doing things that may not help us much or at all.      We encourage everyone to use the  mysqlbug  script to generate a bug report (or a report about any problem), if possible.   mysqlbug  can be found in the  `scripts'  directory in the source distribution, or, for a binary distribution, in the  `bin'  directory under your MySQL installation directory.  If you are unable to use  mysqlbug , you should still include all the necessary information listed in this section.      The  mysqlbug  script helps you generate a report by determining much of the following information automatically, but if something important is missing, please include it with your message!  Please read this section carefully and make sure that all the information described here is included in your report.        The normal place to report bugs and problems is  mysql@lists.mysql.com .  If you can make a test case that clearly demonstrates the bug, you should post it to the  bugs@lists.mysql.com  list.  Note that on this list you should only post a full, repeatable bug report using the  mysqlbug  script.  If you are running on Windows, you should include a description of the operating system and the MySQL version.  Preferably, you should test the problem using the latest stable or development version of MySQL before posting!  Anyone should be able to repeat the bug by just using `` mysql test < script '' on the included test case or run the shell or perl script that is included in the bug report.  All bugs posted on the  bugs  list will be corrected or documented in the next MySQL release!  If there are only small code changes involved to correct this problem, we will also post a patch that fixes the problem.      Remember that it is possible to respond to a message containing too much information, but not to one containing too little.  Often people omit facts because they think they know the cause of a problem and assume that some details don't matter.  A good principle is: if you are in doubt about stating something, state it!  It is a thousand times faster and less troublesome to write a couple of lines more in your report than to be forced to ask again and wait for the answer because you didn't include enough information the first time.      The most common errors are that people don't indicate the version number of the MySQL distribution they are using, or don't indicate what platform they have MySQL installed on (including the platform version number).  This is highly relevant information, and in 99 cases out of 100 the bug report is useless without it!  Very often we get questions like, ``Why doesn't this work for me?'' then we find that the feature requested wasn't implemented in that MySQL version, or that a bug described in a report has been fixed already in newer MySQL versions.  Sometimes the error is platform dependent; in such cases, it is next to impossible to fix anything without knowing the operating system and the version number of the platform.      Remember also to provide information about your compiler, if it is related to the problem.  Often people find bugs in compilers and think the problem is MySQL-related.  Most compilers are under development all the time and become better version by version.  To determine whether or not your problem depends on your compiler, we need to know what compiler is used. Note that every compiling problem should be regarded as a bug report and reported accordingly.      It is most helpful when a good description of the problem is included in the bug report.  That is, a good example of all the things you did that led to the problem and the problem itself exactly described.  The best reports are those that include a full example showing how to reproduce the bug or problem.  See section  G.1.6  Making a test case when you experience table corruption .      If a program produces an error message, it is very important to include the message in your report!  If we try to search for something from the archives using programs, it is better that the error message reported exactly matches the one that the program produces.  (Even the case should be observed!)  You should never try to remember what the error message was; instead, copy  and paste the entire message into your report!      If you have a problem with MyODBC, you should try to generate a MyODBC trace file.  See section  8.3.7  Reporting Problems with MyODBC .      Please remember that many of the people who will read your report will do so using an 80-column display.  When generating reports or examples using the  mysql  command line tool, you should therefore use the  --vertical  option (or the  \G  statement terminator) for output that would exceed the available width for such a display (for example, with the  EXPLAIN SELECT  statement; see the example below).        Please include the following information in your report:          The version number of the MySQL distribution you are using (for example, MySQL Version 3.22.22). You can find out which version you are running by executing  mysqladmin version .   mysqladmin  can be found in the  `bin'  directory under your MySQL installation directory.     The manufacturer and model of the machine you are working on.     The operating system name and version.  For most operating systems, you can get this information by executing the Unix command  uname -a .     Sometimes the amount of memory (real and virtual) is relevant. If in doubt,  include these values.     If you are using a source distribution of MySQL, the name and version number of the compiler used is needed.  If you have a binary  distribution, the distribution name is needed.     If the problem occurs during compilation, include the exact error message(s) and also a few lines of context around the offending code in the file where the error occurred.     If  mysqld  died, you should also report the query that crashed  mysqld .  You can usually find this out by running  mysqld  with logging enabled.  See section  G.1.5  Using log files to find cause of errors in mysqld .     If any database table is related to the problem, include the output from  mysqldump --no-data db_name tbl_name1 tbl_name2 ... .  This is very easy to do and is a powerful way to get information about any table in a database that will help us create a situation matching the one you have.     For speed-related bugs or problems with  SELECT  statements, you should always include the output of  EXPLAIN SELECT ... , and at least the number of rows that the  SELECT  statement produces.  The more information you give about your situation, the more likely it is that someone can help you!  For example, the following is an example of a very good bug report (it should of course be posted with the  mysqlbug  script):  Example run using the  mysql  command line tool (note the use of the  \G  statement terminator for statements whose output width would otherwise exceed that of an 80-column display device):    mysql> SHOW VARIABLES; mysql> SHOW COLUMNS FROM ...\G        <output from SHOW COLUMNS> mysql> EXPLAIN SELECT ...\G        <output from EXPLAIN> mysql> FLUSH STATUS; mysql> SELECT ...;        <A short version of the output from SELECT,        including the time taken to run the query> mysql> SHOW STATUS;        <output from SHOW STATUS>       If a bug or problem occurs while running  mysqld , try to provide an input script that will reproduce the anomaly.  This script should include any necessary source files.  The more closely the script can reproduce your situation, the better.  If you can make a repeatable test case, you should post this to  bugs@lists.mysql.com  for a high priority treatment!  If you can't provide a script, you should at least include the output from  mysqladmin variables extended-status processlist  in your mail to provide some information of how your system is performing!     If you can't produce a test case in a few rows, or if the test table is too big to be mailed to the mailing list (more than 10 rows), you should dump your tables using  mysqldump  and create a  `README'  file that describes your problem.  Create a compressed archive of your files using  tar  and  gzip  or  zip , and use  ftp  to transfer the  archive to  ftp://support.mysql.com/pub/mysql/secret/ .  Then send a  short description of the problem to  bugs@lists.mysql.com .     If you think that MySQL produces a strange result from a query, include not only the result, but also your opinion of what the result should be, and an account describing the basis for your opinion.     When giving an example of the problem, it's better to use the variable names, table names, etc., that exist in your actual situation than to come up with new names.  The problem could be related to the name of a variable or table! These cases are rare, perhaps, but it is better to be safe than sorry. After all, it should be easier for you to provide an example that uses your  actual situation, and it is by all means better for us.  In case you have data you don't want to show to others, you can use  ftp  to transfer it to   ftp://support.mysql.com/pub/mysql/secret/ .  If the data are really top secret and you don't want to show them even to us, then go ahead and provide  an example using other names, but please regard this as the last choice.     Include all the options given to the relevant programs, if possible.  For example, indicate the options that you use when you start the  mysqld  daemon and that you use to run any MySQL client programs.  The options to programs like  mysqld  and  mysql , and to the  configure  script, are often keys to answers and are very relevant! It is never a bad idea to include them anyway!  If you use any modules, such as Perl or PHP, please include the version number(s) of those as well.     If your question is related to the privilege system, please include the output of  mysqlaccess , the output of  mysqladmin reload , and all the error messages you get when trying to connect!  When you test your privileges, you should first run  mysqlaccess .  After this, execute  mysqladmin reload version  and try to connect with the program that gives you trouble.   mysqlaccess  can be found in the  `bin'  directory under your MySQL installation directory.     If you have a patch for a bug, that is good, but don't assume the patch is all we need, or that we will use it, if you don't provide some necessary information, such as test cases showing the bug that your patch fixes.  We might find problems with your patch or we might not understand it at all; if so, we can't use it.  If we can't verify exactly what the patch is meant for, we won't use it. Test cases will help us here.  Show that the patch will handle all the situations that may occur.  If we find a borderline case (even a rare one) where the patch won't work, it may be useless.     Guesses about what the bug is, why it occurs, or what it depends on, are usually wrong.  Even the MySQL team can't guess such things without first using a debugger to determine the real cause of a bug.     Indicate in your mail message that you have checked the reference manual and mail archive so others know that you have tried to solve the problem yourself.     If you get a  parse error , please check your syntax closely!  If you can't find something wrong with it, it's extremely likely that your current version of MySQL doesn't support the query you are using.  If you are using the current version and the manual at  http://www.mysql.com/documentation/manual.php  doesn't cover the syntax you are using, MySQL doesn't support your query.  In this case, your only options are to implement the syntax yourself or e-mail  mysql-licensing@mysql.com  and ask for an offer to implement it!  If the manual covers the syntax you are using, but you have an older version of MySQL, you should check the MySQL change history to see when the syntax was implemented.  In this case, you have the option of  upgrading to a newer version of MySQL.  See section  F  MySQL change history .     If you have a problem such that your data appears corrupt or you get errors when you access some particular table, you should first check and then try repairing your tables with  myisamchk  or  CHECK TABLE  and  REPAIR TABLE .  See section  4  MySQL Database Administration .     If you often get corrupted tables you should try to find out when and why this happens!  In this case, the  `mysql-data-directory/'hostname'.err'  file  may contain some information about what happened.  See section  4.9.1  The Error Log .  Please include any relevant information from this file in your bug report!  Normally   mysqld  should  NEVER  crash a table if nothing killed it in the middle of an update!  If you can find the cause of  mysqld  dying, it's much easier for us to provide you with a fix for the problem! See section  A.1  How to Determine What Is Causing Problems .     If possible, download and install the most recent version of MySQL and check whether or not it solves your problem.  All versions of  MySQL are thoroughly tested and should work without problems!  We  believe in making everything as backward compatible as possible, and you  should be able to switch MySQL versions in minutes!   See section  2.2.3  Which MySQL Version to Use .              If you are a support customer, please cross-post the bug report to  mysql-support@mysql.com  for higher priority treatment, as well as to the appropriate mailing list to see if someone else has experienced (and perhaps solved) the problem.      For information on reporting bugs in  MyODBC , see section  8.3.4  How to Report Problems with MyODBC .      For solutions to some common problems, see See section  A  Problems and Common Errors .      When answers are sent to you individually and not to the mailing list, it is considered good etiquette to summarize the answers and send the summary to the mailing list so that others may have the benefit of responses you received that helped you solve your problem!        1.2.22.4  Guidelines for Answering Question on the Mailing List                  If you consider your answer to have broad interest, you may want to post it to the mailing list instead of replying directly to the individual who asked.  Try to make your answer general enough that people other than the original poster may benefit from it.  When you post to the list, please make sure that your answer is not a duplication of a previous answer.      Try to summarize the essential part of the question in your reply; don't feel obliged to quote the entire original message.      Please don't post mail messages from your browser with HTML mode turned on! Many users don't read mail with a browser!        1.3  MySQL Licensing and Support               This section describes MySQL support and licensing arrangements:         The copyrights under which MySQL is distributed  (see section  1.3.2  Copyrights Used by MySQL )   Sample situations illustrating when a license is required  (see section  1.3.3  Example Licensing Situations )   Support costs (see section  1.3.4  MySQL Licensing and Support Costs ) and support benefits  (see section  1.3.5  Types of Commercial Support )   Commercial licensing costs        1.3.1  MySQL Licensing Policy                  The formal terms of the GPL license can be found at section  K  GNU GENERAL PUBLIC LICENSE . Basically, our licensing policy and interpretation of the GPL is as follows:      Note that older versions of MySQL are still using a more   strict license .  See the documentation for that version for more information. If you need a  commercial MySQL license, because the GPL license doesn't suit your application, you can buy one at  https://order.mysql.com/ .      For normal internal use, MySQL costs nothing.  You do not have to pay us if you do not want to.      A license is required if:          You link a program, that is not free software, with code from the MySQL server or clients that has the GPL copyright. This happens for example when you use MySQL as an embedded server in your applications or when you add not free extensions to the MySQL server.  In this case your application/code would also become GPL through the GPL license that acts as a virus.  By licensing MySQL server from MySQL AB under a commercial license you will avoid this problem. See  http://www.gnu.org/copyleft/gpl-faq.html .    You have a commercial application that ONLY works with MySQL and ships the application with the MySQL server.  This is because we view this as linking even if it is done over the network.     You have a distribution of MySQL and you don't provide the source code for your copy of the MySQL server, as defined in the GPL license.      A license is  NOT  required if:           You do not need a license to include the client code in commercial programs.  The client part of MySQL licensed with the LGPL  GNU Library General Public License .  The  mysql  command-line client includes code from the  readline  library that is under the  GPL .     If your use of MySQL does not require a license, but you like MySQL and want to encourage further development, you are certainly welcome to purchase a license or MySQL support anyway.     If you use MySQL in a commercial context such that you profit by  its use, we ask that you further the development of MySQL by  purchasing some level of support.  We feel that if MySQL helps  your business, it is reasonable to ask that you help MySQL.   (Otherwise, if you ask us support questions, you are not only using for  free something into which we've put a lot a work, you're asking us to  provide free support, too.)      For circumstances under which a MySQL license is required, you need a license per machine that runs the  mysqld  server.  However, a multiple-CPU machine counts as a single machine, and there is no restriction on the number of MySQL servers that run on one machine, or on the number of clients concurrently connected to a server running on that machine!      If you have any questions as to whether or not a license is required for your particular use of MySQL, please read this again and then contact us.  See section  1.3.4.2  Contact Information .      If you require a MySQL license, the easiest way to pay for it is to use the license form on MySQL's secure server at  https://order.mysql.com/ .  Other forms of payment are discussed in section  1.3.4.1  Payment information .        1.3.2  Copyrights Used by MySQL             There are several different copyrights on the MySQL distribution:          The MySQL-specific source needed to build the  mysqlclient  library is licensed under the  LGPL  and programs in the  `client'  directory is GPL. Each file has a header that shows which copyright is used for that file.   The client library and the (GNU  getopt ) library are covered  by the ``GNU LIBRARY GENERAL PUBLIC LICENSE.''  See section  L  GNU LESSER GENERAL PUBLIC LICENSE .   Some parts of the source (the  regexp  library) are covered  by a Berkeley-style copyright.     All the source in the server and the (GNU  readline ) library is covered by the ``GNU GENERAL PUBLIC LICENSE.''  See section  K  GNU GENERAL PUBLIC LICENSE .  This is also available as the file  `COPYING'  in the distributions.       One goal is that the SQL client library should be free enough that it is possible to add MySQL support into commercial products without a license.  For this reason, we chose the LGPL license for the client code.          This means that you can use MySQL for free with any program that uses any of the free software licenses.  MySQL is also free for any end user for his own or company usage.      However, if you use MySQL for something important to you, you may want to help secure its development by purchasing licenses or a support contract.  See section  1.3.5  Types of Commercial Support .        1.3.2.1  Copyright Changes     Version 3.22 of MySQL is still using a more strict license.   See the documentation for that version for more information.        1.3.3  Example Licensing Situations                This section describes some situations illustrating whether or not you must license the MySQL server.  Generally these examples involve providing MySQL as an integral part of a product.      Note that a single MySQL license covers any number of CPUs and  mysqld  servers on a machine!  There is no artificial limit on the number of clients that connect to the server in any way.        1.3.3.1  Selling Products that use MySQL     To determine whether or not you need a MySQL license when selling your application, you should ask whether the proper functioning of your application is dependent on the use of MySQL and whether you include the MySQL server with your product.  There are several cases to consider:          Does your application require MySQL to function properly?     If your product requires MySQL, you need a license for any machine that runs the  mysqld  server.  For example, if you've designed your application around MySQL, then you've really made a commercial product that requires the engine, so you need a license.     If your application does not require MySQL, you do not need to obtain a license.  For example, if using MySQL just adds some new optional features to your product (such as adding logging to a database if MySQL is used rather than logging to a text file), it should fall within normal use, and a license would not be required.     In other words, you need a license if you sell a product designed specifically for use with MySQL or that requires the MySQL server to function at all.  This is true whether or not you provide MySQL for your client as part of your product distribution.     It also depends on what you're doing for the client.  Do you plan to provide your client with detailed instructions on installing MySQL with your software?  Then your product may be contingent on the use of MySQL; if so, you need to buy a license.  If you are simply tying into a database that you expect already to have been installed by the time your software is purchased, then you probably don't need a license.        1.3.3.2  ISP MySQL Services                  Internet Service Providers (ISPs) often host MySQL servers for their customers.  With the GPL license this does not require a license.      On the other hand, we do encourage people to use ISPs that have MySQL support, as this will give them the confidence that if they have some problem with their MySQL installation, their ISP will be able to solve the problem for them (in some cases with the help from the MySQL development team).      All ISPs that want to keep themselves up-to-date should subscribe to our  announce  mailing list so that they can be aware of fatal issues that may be relevant for their MySQL installations.      Note that if the ISP doesn't have a license for MySQL, it should give its customers at least read access to the source of the MySQL installation so that its customer can verify that it is patched correctly.        1.3.3.3  Running a Web Server Using MySQL              If you use MySQL in conjunction with a Web server on Unix, you don't have to pay for a license.      This is true even if you run a commercial Web server that uses MySQL, because you are not selling an embedded MySQL version yourself.  However, in this case we would like you to purchase MySQL support, because MySQL is helping your enterprise.        1.3.4  MySQL Licensing and Support Costs                   Our current license prices are shown below. To make a purchase, please visit  https://order.mysql.com/ .      If you pay by credit card, the currency is EURO (European Union Euro) so the prices will differ slightly.       Number of licenses     Per copy     1-9   230 EURO    10-24   138 EURO    25-49   117 EURO    50-99   102 EURO    100-249   91 EURO    250-499   76 EURO    500-999   66 EURO        For high volume (OEM) purchases, please contact  sales@mysql.com .      For OEM purchases, you must act as the middle-man for eventual problems or extension requests from your users.  We also require that OEM customers have at least an extended e-mail support contract.  Note that OEM licenses only apply for products where the user doesn't have direct access to the MySQL server (embedded system).  In other words, the MySQL server should only be used with the application that was supplied you.      If you have a low-margin, high-volume product, you can always talk to us about other terms (for example, a percent of the sale price).  If you do, please be informative about your product, pricing, market, and any other information that may be relevant.      A full-price license is not a support agreement and includes very minimal support.  This means that we try to answer any relevant questions.  If the answer is in the documentation, we will direct you to the appropriate section.  If you have not purchased a license or support, we probably will not answer at all.      If you discover what we consider a real bug, we are likely to fix it in any case.  But if you pay for support we will notify you about the fix status instead of just fixing it in a later release.      More comprehensive support is sold separately.  Descriptions of what each level of support includes are given in section  1.3.5  Types of Commercial Support .  Costs for the various types of commercial support are shown below.  Support level prices are in EURO (European Union Euro).  One EURO is about 1.06 USD.       Type of support     Cost per year     Basic e-mail support. See section  1.3.5.1  Basic E-mail Support .   EURO 200    Extended e-mail support See section  1.3.5.2  Extended E-mail Support .   EURO 1000    Login support See section  1.3.5.3  Login Support .   EURO 2000    Extended login support See section  1.3.5.4  Extended Login Support .   EURO 5000    Telephone support See section  1.3.5.5  Telephone Support .   EURO 12000        You may upgrade from any lower level of support to a higher level of support for the difference in price between the two support levels.      We do also provide telephone support (mostly emergency support but also 24/7 support).  This support option doesn't however have a fixed price but is negotiated for case to case.  If you are interested in this option you can email  sales@mysql.com  and tell us about your needs.      Note that as our sales staff is very busy, it may take some time until your request is handled.  Our support staff does however always answer promptly to support questions!        1.3.4.1  Payment information            Currently we can take SWIFT payments, checks, or credit cards.      Payment should be made to:      Postgirot Bank AB 105 06 STOCKHOLM, SWEDEN  MySQL AB BOX 6434 11382 STOCKHOLM, SWEDEN  SWIFT address: PGSI SESS Account number: 96 77 06 - 3      Specify: license and/or support and your name and e-mail address.      In Europe and Japan you can use EuroGiro (that should be less expensive) to the same account.      If you want to pay by check, make it payable to ``MySQL Finland AB'' and mail it to the address below:      MySQL AB BOX 6434, Torsgatan 21 11382 STOCKHOLM, SWEDEN      If you want to pay by credit card over the Internet, you can use   MySQL AB's secure license form .      You can also print a copy of the license form, fill it in, and send it by fax to:      +46-8-729 69 05      If you want us to bill you, you can use the license form and write ``bill us'' in the comment field.  You can also mail a message to  sales@mysql.com  ( not   mysql@lists.mysql.com !) with your company information and ask us to bill you.        1.3.4.2  Contact Information                        For commercial licensing, please contact the MySQL licensing team.  The much preferred method is by e-mail to  licensing@mysql.com .  Fax is also possible but handling of these may take much longer (Fax +46-8-729 69 05).      If you represent a business that is interested in partnering with MySQL, please send e-mail to  partner@mysql.com .      For timely, precise answers to technical questions about MySQL you should   order  one of our   support contracts . MySQL support is provided by the MySQL developers so the standard is extremely high.      If you are interested in placing a banner advertisement on our Web site, please send e-mail to  advertising@mysql.com .      If you are interested in any of the jobs listed in our   jobs  section, please send e-mail to  jobs@mysql.com .      For general discussion amongst our many users, please direct your attention to the appropriate   mailing list .      For general information inquires, please send e-mail to  info@mysql.com .      For questions or comments about the workings or content of the Web site, please send e-mail to  webmaster@mysql.com .        1.3.5  Types of Commercial Support                 The following is true of all support options:          The support is per year.    We will fix, or provide a reasonable workaround for any repeatable bug.    We will give a reasonable effort to find and fix any other MySQL related bug.    The higher level of support contract the more effort we will put into finding a solution to your problems.    The following is true for all support contracts except Basic email support:  For non-bug related things, like helping you optimize your queries or your system, extending MySQL with new functionality, etc., we charge 200 EURO/hour, which is deducted from your support contract.  In other words, if you have login support (2000 EURO), you can expect us to work up to 10 hours to help you with things like this.       1.3.5.1  Basic E-mail Support              Basic e-mail support is a very inexpensive support option and should be thought of more as a way to support our development of MySQL than as a real support option.  We at MySQL do give a lot of free support in all the different MySQL lists, and the money we get from basic e-mail support is largely used to make this possible.      At this support level, the MySQL mailing lists are the preferred means of communication.  Questions normally should be mailed to the primary mailing list ( mysql@lists.mysql.com ) or one of the other regular lists (for example,  win32@lists.mysql.com  for Windows-related MySQL questions), as someone else already may have experienced and solved the problem you have.  See section  1.2.22.2  Asking Questions or Reporting Bugs .      However, by purchasing basic e-mail support, you also have access to the support address  mysql-support@mysql.com , which is not available as part of the minimal support that you get by purchasing a MySQL license.  This means that for especially critical questions, you can  cross-post your message to  mysql-support@mysql.com .  (If the  message contains sensitive data, you should post only to   mysql-support@mysql.com .)       REMEMBER!  to ALWAYS include your registration number and expiration  date when you send a message to  mysql-support@mysql.com .      Note that if you have encountered a critical, repeatable bug, and follow the rules outlined in the manual section of how to report bugs and send it to  bugs@lists.mysql.com , we promise to try to fix this as soon as possible, regardless of your support level!  See section  1.2.22.3  How to Report Bugs or Problems .      Basic e-mail support includes the following types of service:          If your question is already answered in the manual, we will inform you of the correct section in which you can find the answer.  If the answer is not in the manual, we will point you in the right direction to solve your problem.     We guarantee a timely answer for your e-mail messages.  We can't guarantee that we can solve any problem, but at least you will receive an answer if we can contact you by e-mail.     We will help with unexpected problems when you install MySQL from a binary distribution on supported platforms.  This level of support does not cover installing MySQL from a source distribution.  Supported platforms are those for which MySQL is known to work. See section  2.2.2  Operating Systems Supported by MySQL .     We will help you with bugs and missing features.  Any bugs that are found are fixed for the next MySQL release.  If the bug is critical for you, we will mail you a patch for it as soon the bug is fixed.  Critical bugs always have the highest priority for us, and we ensure that they are fixed as soon as possible.     Your suggestions for the further development of MySQL will be taken into consideration.  By taking email support you have already helped the further development of MySQL.  If you want to have more input, upgrade to a higher level of support.     If you want us to help optimize your system, you must upgrade to a higher level of support.       1.3.5.2  Extended E-mail Support            Extended e-mail support includes everything in basic e-mail support with these additions:          Your e-mail will be dealt with before mail from basic e-mail support users and non-registered users.     Your suggestions for the further development of MySQL will receive strong consideration.  Simple extensions that suit the basic goals of MySQL are implemented in a matter of days.  By taking extended e-mail support you have already helped the further development of MySQL.     Typical situations that are covered by extended e-mail support are:        We will answer and (within reason) solve questions that relate to possible bugs in MySQL.  As soon as the bug is found and corrected, we will mail a patch for it.     We will help with unexpected problems when you install MySQL from a source or binary distribution on supported platforms.     We will answer questions about missing features and offer hints how to work around them.     We will provide hints on optimizing  mysqld  for your situation.       You are allowed to influence the priority of items on the MySQL TODO List.  See section  1.6  MySQL and the future (The TODO) .  This will ensure that the features you really need will be implemented sooner than they might be otherwise.       1.3.5.3  Login Support            Login support includes everything in extended e-mail support with these additions:          Your e-mail will be dealt with even before e-mail from extended e-mail support users.     Your suggestions for the further development of MySQL will be taken into very high consideration.  Realistic extensions that can be implemented in a couple of hours and that suit the basic goals of MySQL will be implemented as soon as possible.     If you have a very specific problem, we can try to log in on your system to solve the problem ``in place.''     Like any database vendor, we can't guarantee that we can rescue any data from crashed tables, but if the worst happens, we will help you rescue as much as possible.  MySQL has proven itself very reliable, but anything is possible due to circumstances beyond our control (for example, if your system crashes or someone kills the server by executing a  kill -9  command).     We will provide hints on optimizing your system and your queries.     You are allowed to call a MySQL developer (in moderation) and discuss your MySQL-related problems.  This option is however only to be used as a last result during an emergency after we have failed to grasp the total problem with email.  To make efficient use of our time we need to first get all facts about the problem, before talking on phone, to be able to work as efficiently as possible on solving the problem.       1.3.5.4  Extended Login Support     Extended login support includes everything in login support with these additions:          Your e-mail has the highest possible priority.     We will actively examine your system and help you optimize it and your queries.  We may also optimize and/or extend MySQL to better suit your needs.     You may also request special extensions just for you.  For example:   mysql> select MY_FUNC(col1,col2) from table;       We will provide a binary distribution of all important MySQL releases for your system, as long as we can get an account on a similar system.  In the worst case, we may require access to your system to be able to create a binary distribution.     If you can provide accommodations and pay for traveler fares, you can even get a MySQL developer to visit you and offer you help with your troubles.  Extended login support entitles you to one personal encounter per year, but we are always very flexible towards our customers!  If the visit takes 16 hours or more, the first 8 hours is without charge.  For the hours above 8 hours, you will be charged with a rate that is at least 20 % less than our standard rates.       1.3.5.5  Telephone Support     Telephone support includes everything in extended login support with these additions:          We will provide you with a dynamic web page showing the current list of  MySQL  developers that you can phone when you have a critical problem.    For non critical problem, you can request a MySQL developer to phone back within 48 hours to discuss  MySQL  related issues.       1.3.5.6  Support for other table handlers              To get support for  BDB  tables,  InnoDB  tables you have to pay an additional 30% on the standard support price for each of the table handlers you would like to have support for.      We at  MySQL AB  will help you create a proper bug report for the table handler and submit it to the developers for the specific table handler.  We will also do our best to ensure that you will get a timely answer or solution from the developers of the table handler.      Even if we are quite confident that we can solve most problems within a timely manner, we can't guarantee a quick solution for any problems you can get with the different table handlers.  We will however do our best to help you get the problem solved.        1.4  How Standards-compatible Is MySQL?                   This section describes how MySQL relates to the ANSI SQL standards. MySQL has many extensions to the ANSI SQL standards, and here you will find out what they are, and how to use them.  You will also find  information about functionality missing from MySQL, and how to work  around some differences.          1.4.1  MySQL Extensions to ANSI SQL92     MySQL includes some extensions that you probably will not find in other SQL databases.  Be warned that if you use them, your code will not be portable to other SQL servers.  In some cases, you can write code that includes MySQL extensions, but is still portable, by using comments of the form  /*! ... */ .  In this case, MySQL will parse and execute the code within the comment as it would any other MySQL statement, but other SQL servers will ignore the extensions.  For example:      SELECT /*! STRAIGHT_JOIN */ col_name FROM table1,table2 WHERE ...      If you add a version number after the  '!' , the syntax will only be executed if the MySQL version is equal to or newer than the used version number:      CREATE /*!32302 TEMPORARY */ TABLE (a int);      The above means that if you have Version 3.23.02 or newer, then MySQL will use the  TEMPORARY  keyword.      MySQL extensions are listed below:          The field types  MEDIUMINT ,  SET ,  ENUM , and the different  BLOB  and  TEXT  types.     The field attributes  AUTO_INCREMENT ,  BINARY ,  NULL ,  UNSIGNED , and  ZEROFILL .     All string comparisons are case insensitive by default, with sort ordering determined by the current character set (ISO-8859-1 Latin1 by default).  If you don't like this, you should declare your columns with the  BINARY  attribute or use the  BINARY  cast, which causes comparisons to be done according to the ASCII order used on the MySQL server host.     MySQL maps each database to a directory under the MySQL data directory, and tables within a database to filenames in the database directory.  This has a few implications:                  Database names and table names are case sensitive in MySQL on operating systems that have case-sensitive filenames (like most Unix systems). See section  6.1.3  Case Sensitivity in Names .     Database, table, index, column, or alias names may begin with a digit (but may not consist solely of digits).     You can use standard system commands to backup, rename, move, delete, and copy tables.  For example, to rename a table, rename the  `.MYD' ,  `.MYI' , and  `.frm'  files to which the table corresponds.       In SQL statements, you can access tables from different databases with the  db_name.tbl_name  syntax.  Some SQL servers provide the same functionality but call this  User space . MySQL doesn't support tablespaces as in:  create table ralph.my_table...IN my_tablespace .      LIKE  is allowed on numeric columns.     Use of  INTO OUTFILE  and  STRAIGHT_JOIN  in a  SELECT  statement. See section  6.4.1   SELECT  Syntax .     The  SQL_SMALL_RESULT  option in a  SELECT  statement.      EXPLAIN SELECT  to get a description on how tables are joined.     Use of index names, indexes on a prefix of a field, and use of  INDEX  or  KEY  in a  CREATE TABLE  statement. See section  6.5.3   CREATE TABLE  Syntax .     Use of  TEMPORARY  or  IF NOT EXISTS  with  CREATE TABLE .     Use of  COUNT(DISTINCT list)  where 'list' is more than one element.     Use of  CHANGE col_name ,  DROP col_name , or  DROP INDEX ,  IGNORE  or  RENAME  in an  ALTER TABLE  statement. See section  6.5.4   ALTER TABLE  Syntax .     Use of  RENAME TABLE . See section  6.5.5   RENAME TABLE  Syntax .     Use of multiple  ADD ,  ALTER ,  DROP , or  CHANGE  clauses in an  ALTER TABLE  statement.     Use of  DROP TABLE  with the keywords  IF EXISTS .     You can drop multiple tables with a single  DROP TABLE  statement.     The  LIMIT  clause of the  DELETE  statement.     The  DELAYED  clause of the  INSERT  and  REPLACE  statements.     The  LOW_PRIORITY  clause of the  INSERT ,  REPLACE ,  DELETE , and  UPDATE  statements.         Use of  LOAD DATA INFILE . In many cases, this syntax is compatible with Oracle's  LOAD DATA INFILE . See section  6.4.8   LOAD DATA INFILE  Syntax .     The  ANALYZE TABLE ,  CHECK TABLE ,  OPTIMIZE TABLE , and  REPAIR TABLE  statements.     The  SHOW  statement. See section  4.5.5   SHOW  Syntax .     Strings may be enclosed by either  `""'  or  `'' , not just by  `'' .     Use of the escape  `\'  character.     The  SET OPTION  statement. See section  5.5.6   SET  Syntax .     You don't need to name all selected columns in the  GROUP BY  part. This gives better performance for some very specific, but quite normal queries. See section  M.3  Functions for Use with  GROUP BY  Clauses .     One can specify  ASC  and  DESC  with  GROUP BY .     To make it easier for users who come from other SQL environments, MySQL supports aliases for many functions. For example, all string functions support both ANSI SQL syntax and ODBC syntax.     MySQL understands the  ||  and  &&  operators to mean logical OR and AND, as in the C programming language.  In MySQL,  ||  and  OR  are synonyms, as are  &&  and  AND . Because of this nice syntax, MySQL doesn't support the ANSI SQL  ||  operator for string concatenation; use  CONCAT()  instead. Because  CONCAT()  takes any number of arguments, it's easy to convert use of the  ||  operator to MySQL.      CREATE DATABASE  or  DROP DATABASE . See section  6.5.1   CREATE DATABASE  Syntax .         The  %  operator is a synonym for  MOD() .  That is,  N % M  is equivalent to  MOD(N,M) .   %  is supported for C programmers and for compatibility with PostgreSQL.     The  = ,  <> ,  <=  , < ,  >= , > ,  << ,  >> ,  <=> ,  AND ,  OR , or  LIKE  operators may be used in column comparisons to the left of the  FROM  in  SELECT  statements.  For example:    mysql> SELECT col1=1 AND col2=2 FROM tbl_name;       The  LAST_INSERT_ID()  function. See section  8.4.3.126   mysql_insert_id() .     The  REGEXP  and  NOT REGEXP  extended regular expression operators.      CONCAT()  or  CHAR()  with one argument or more than two arguments.  (In MySQL, these functions can take any number of arguments.)   The  BIT_COUNT() ,  CASE ,  ELT() ,   FROM_DAYS() ,  FORMAT() ,  IF() ,  PASSWORD() ,  ENCRYPT() ,  md5() ,  ENCODE() ,  DECODE() ,  PERIOD_ADD() ,  PERIOD_DIFF() ,  TO_DAYS() , or  WEEKDAY()  functions.     Use of  TRIM()  to trim substrings. ANSI SQL only supports removal of single characters.     The  GROUP BY  functions  STD() ,  BIT_OR() , and  BIT_AND() .     Use of  REPLACE  instead of  DELETE  +  INSERT . See section  6.4.7   REPLACE  Syntax .     The  FLUSH ,  RESET  and  DO  statements.     The possibility to set variables in a statement with  := :   SELECT @a:=SUM(total),@b=COUNT(*),@a/@b AS avg FROM test_table; SELECT @t1:=(@t2:=1)+@t3:=4,@t1,@t2,@t3;          1.4.2  MySQL Differences Compared to ANSI SQL92     We try to make MySQL follow the ANSI SQL standard and the ODBC SQL standard, but in some cases MySQL does some things differently:           --  is only a comment if followed by a white space. See section  1.4.4.8   `--'  as the Start of a Comment .     For  VARCHAR  columns, trailing spaces are removed when the value is stored. See section  1.4.7  Known errors and design deficiencies in MySQL .     In some cases,  CHAR  columns are silently changed to  VARCHAR  columns. See section  6.5.3.1  Silent Column Specification Changes .     Privileges for a table are not automatically revoked when you delete a table. You must explicitly issue a  REVOKE  to revoke privileges for a table. See section  4.3.1   GRANT  and  REVOKE  Syntax .      NULL AND FALSE  will evaluate to  NULL  and not to  FALSE . This is because we don't think it's good to have to evaluate a lot of extra conditions in this case.       1.4.3  Running MySQL in ANSI Mode              If you start  mysqld  with the  --ansi  option, the following behavior of MySQL changes:           ||  is string concatenation instead of  OR .     You can have any number of spaces between a function name and the  `(' . This forces all function names to be treated as reserved words.      `""'  will be an identifier quote character (like the MySQL  ``'  quote character) and not a string quote character.      REAL  will be a synonym for  FLOAT  instead of a synonym of  DOUBLE .     The default transaction isolation level is  SERIALIZABLE . See section  6.7.3   SET TRANSACTION  Syntax .      This is the same as using  --sql-mode=REAL_AS_FLOAT,PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,SERIALIZE,ONLY_FULL_GROUP_BY .       1.4.4  Functionality Missing from MySQL              The following functionality is missing in the current version of MySQL.  For a prioritized list indicating when new extensions may be added to MySQL, you should consult   the online MySQL TODO list . That is the latest version of the TODO list in this manual. See section  1.6  MySQL and the future (The TODO) .        1.4.4.1  Sub-selects            MySQL currently only supports sub selects of the form  INSERT ... SELECT ...  and  REPLACE ... SELECT ... . You can however use the function  IN()  in other contexts.      In many cases you can rewrite the query without a sub-select:      SELECT * FROM table1 WHERE id IN (SELECT id FROM table2);      This can be re-written as:      SELECT table1.* FROM table1,table2 WHERE table1.id=table2.id;      The queries:   SELECT * FROM table1 WHERE id NOT IN (SELECT id FROM table2); SELECT * FROM table1 WHERE NOT EXISTS (SELECT id FROM table2 where table1.id=table2.id);      Can be rewritten as:      SELECT table1.* FROM table1 LEFT JOIN table2 ON table1.id=table2.id where table2.id IS NULL      For more complicated subqueries you can often create temporary tables to hold the subquery.  In some cases, however this option will not work. The most frequently encountered of these cases arises with  DELETE  statements, for which standard SQL does not support joins (except in sub-selects).  For this situation there are two options available until subqueries are supported by MySQL.      The first option is to use a procedural programming language (such as Perl or PHP) to submit a  SELECT  query to obtain the primary keys for the records to be deleted, and then use these values to construct the  DELETE  statement ( DELETE FROM ... WHERE ... IN (key1, key2, ...) ).      The second option is to use interactive SQL to contruct a set of  DELETE  statements automatically, using the MySQL extension  CONCAT()  (in lieu of the standard  ||  operator). For example:      SELECT CONCAT('DELETE FROM tab1 WHERE pkid = ', tab1.pkid, ';')   FROM tab1, tab2  WHERE tab1.col1 = tab2.col2;      You can place this query in a script file and redirect input from it to the  mysql  command-line interpreter, piping its output back to a second instance of the interpreter:      prompt> mysql --skip-column-names mydb < myscript.sql | mysql mydb      MySQL 4.0 supports multi-table deletes that can be used to efficiently delete rows based on information from one table or even from many tables at the same time.       1.4.4.2   SELECT INTO TABLE            MySQL doesn't yet support the Oracle SQL extension:  SELECT ... INTO TABLE ... .  MySQL supports instead the ANSI SQL syntax  INSERT INTO ... SELECT ... , which is basically the same thing. See section  6.4.2.1   INSERT ... SELECT  Syntax .      INSERT INTO tblTemp2 (fldID) SELECT tblTemp1.fldOrder_ID FROM tblTemp1 WHERE tblTemp1.fldOrder_ID > 100;      Alternatively, you can use  SELECT INTO OUTFILE...  or  CREATE TABLE ... SELECT  to solve your problem.        1.4.4.3  Transactions            As MySQL does nowadays support transactions, the following discussion is only valid if you are only using the non-transaction-safe table types. See section  6.7.1   BEGIN/COMMIT/ROLLBACK  Syntax .      The question is often asked, by the curious and the critical, ``Why is MySQL not a transactional database?'' or ``Why does MySQL not support transactions?''      MySQL has made a conscious decision to support another paradigm for data integrity, ``atomic operations.'' It is our thinking and experience that atomic operations offer equal or even better integrity with much better performance. We, nonetheless, appreciate and understand the transactional database paradigm and plan, within the next few releases, to introduce transaction-safe tables on a per table basis. We will be giving our users the possibility to decide if they need the speed of atomic operations or if they need to use transactional features in their applications.      How does one use the features of MySQL to maintain rigorous integrity and how do these features compare with the transactional paradigm?      First, in the transactional paradigm, if your applications are written in a way that is dependent on the calling of ``rollback'' instead of ``commit'' in critical situations, then transactions are more convenient. Moreover, transactions ensure that unfinished updates or corrupting activities are not committed to the database; the server is given the opportunity to do an automatic rollback and your database is saved.      MySQL, in almost all cases, allows you to solve for potential problems by including simple checks before updates and by running simple scripts that check the databases for inconsistencies and automatically repair or warn if such occurs. Note that just by using the MySQL log or even adding one extra log, one can normally fix tables perfectly with no data integrity loss.      Moreover, fatal transactional updates can be rewritten to be atomic. In fact,we will go so far as to say that all integrity problems that transactions solve can be done with  LOCK TABLES  or atomic updates, ensuring that you never will get an automatic abort from the database, which is a common problem with transactional databases.      Not even transactions can prevent all loss if the server goes down.  In such cases even a transactional system can lose data.  The difference between different systems lies in just how small the time-lap is where they could lose data. No system is 100% secure, only ``secure enough.'' Even Oracle, reputed to be the safest of transactional databases, is reported to sometimes lose data in such situations.      To be safe with MySQL, you only need to have backups and have the update logging turned on.  With this you can recover from any situation that you could with any transactional database.  It is, of course, always good to have backups, independent of which database you use.      The transactional paradigm has its benefits and its drawbacks. Many users and application developers depend on the ease with which they can code around problems where an abort appears to be, or is necessary, and they may have to do a little more work with MySQL to either think differently or write more. If you are new to the atomic operations paradigm, or more familiar or more comfortable with transactions, do not jump to the conclusion that MySQL has not addressed these issues. Reliability and integrity are foremost in our minds.  Recent estimates indicate that there are more than 1,000,000  mysqld  servers currently running, many of which are in production environments.  We hear very, very seldom from our users that they have lost any data, and in almost all of those cases user error is involved. This is, in our opinion, the best proof of MySQL's stability and reliability.      Lastly, in situations where integrity is of highest importance, MySQL's current features allow for transaction-level or better reliability and integrity. If you lock tables with  LOCK TABLES , all updates will stall until any integrity checks are made.  If you only obtain a read lock (as opposed to a write lock), then reads and inserts are still allowed to happen.  The new inserted records will not be seen by any of the clients that have a  READ  lock until they release their read locks.  With  INSERT DELAYED  you can queue inserts into a local queue, until the locks are released, without having the client wait for the insert to complete. See section  6.4.3   INSERT DELAYED  syntax .      ``Atomic,'' in the sense that we mean it, is nothing magical. It only means that you can be sure that while each specific update is running, no other user can interfere with it, and there will never be an automatic rollback (which can happen on transaction based systems if you are not very careful).  MySQL also guarantees that there will not be any dirty reads.  You can find some example of how to write atomic updates in the commit-rollback section. See section  1.4.6  How to Cope Without  COMMIT / ROLLBACK .      We have thought quite a bit about integrity and performance, and we believe that our atomic operations paradigm allows for both high reliability and extremely high performance, on the order of three to five times the speed of the fastest and most optimally tuned of transactional databases. We didn't leave out transactions because they are hard to do. The main reason we went with atomic operations as opposed to transactions is that by doing this we could apply many speed optimizations that would not otherwise have been possible.      Many of our users who have speed foremost in their minds are not at all concerned about transactions. For them transactions are not an issue. For those of our users who are concerned with or have wondered about transactions vis-a-vis MySQL, there is a ``MySQL way'' as we have outlined above.  For those where safety is more important than speed, we recommend them to use the  BDB , or  InnoDB  tables for all their critical data. See section  7  MySQL Table Types .      One final note: We are currently working on a safe replication schema that we believe to be better than any commercial replication system we know of. This system will work most reliably under the atomic operations, non-transactional, paradigm. Stay tuned.        1.4.4.4  Stored Procedures and Triggers                A stored procedure is a set of SQL commands that can be compiled and stored in the server. Once this has been done, clients don't need to keep reissuing the entire query but can refer to the stored procedure. This provides better performance because the query has to be parsed only once, and less information needs to be sent between the server and the client. You can also raise the conceptual level by having libraries of functions in the server.      A trigger is a stored procedure that is invoked when a particular event occurs.  For example, you can install a stored procedure that is triggered each time a record is deleted from a transaction table and that automatically deletes the corresponding customer from a customer table when all his transactions are deleted.      The planned update language will be able to handle stored procedures, but without triggers. Triggers usually slow down everything, even queries for which they are not needed.      To see when MySQL might get stored procedures, see section  1.6  MySQL and the future (The TODO) .        1.4.4.5  Foreign Keys              Note that foreign keys in SQL are not used to join tables, but are used mostly for checking referential integrity (foreign key constraints).  If you want to get results from multiple tables from a  SELECT  statement, you do this by joining tables:      SELECT * from table1,table2 where table1.id = table2.id;      See section  6.4.1.1   JOIN  Syntax . See section  3.5.6  Using Foreign Keys .      The  FOREIGN KEY  syntax in MySQL exists only for compatibility with other SQL vendors'  CREATE TABLE  commands; it doesn't do anything.  The  FOREIGN KEY  syntax without  ON DELETE ...  is mostly used for documentation purposes. Some ODBC applications may use this to produce automatic  WHERE  clauses, but this is usually easy to override.  FOREIGN KEY  is sometimes used as a constraint check, but this check is unnecessary in practice if rows are inserted into the tables in the right order. MySQL only supports these clauses because some applications require them to exist (regardless of whether or not they work).      In MySQL, you can work around the problem of  ON DELETE ...  not being implemented by adding the appropriate  DELETE  statement to an application when you delete records from a table that has a foreign key. In practice this is as quick (in some cases quicker) and much more portable than using foreign keys.      In the near future we will extend the  FOREIGN KEY  implementation so that at least the information will be saved in the table specification file and may be retrieved by  mysqldump  and ODBC. At a later stage we will implement the foreign key constraints for application that can't easily be coded to avoid them.        1.4.4.6  Reasons NOT to Use Foreign Keys constraints            There are so many problems with foreign key constraints that we don't know where to start:          Foreign key constraints make life very complicated, because the foreign key definitions must be stored in a database and implementing them would destroy the whole ``nice approach'' of using files that can be moved, copied, and removed.     The speed impact is terrible for  INSERT  and  UPDATE  statements, and in this case almost all  FOREIGN KEY  constraint checks are useless because you usually insert records in the right tables in the right order, anyway.     There is also a need to hold locks on many more tables when updating one table, because the side effects can cascade through the entire database. It's MUCH faster to delete records from one table first and subsequently delete them from the other tables.     You can no longer restore a table by doing a full delete from the table and then restoring all records (from a new source or from a backup).     If you use foreign key constraints you can't dump and restore tables unless you do so in a very specific order.     It's very easy to do ``allowed'' circular definitions that make the tables impossible to re-create each table with a single create statement, even if the definition works and is usable.     It's very easy to overlook  FOREIGN KEY ... ON DELETE  rules when one codes an application. It's not unusual that one loses a lot of important information just because a wrong or misused  ON DELETE  rule.      The only nice aspect of  FOREIGN KEY  is that it gives ODBC and some other client programs the ability to see how a table is connected and to use this to show connection diagrams and to help in building applications.      MySQL will soon store  FOREIGN KEY  definitions so that a client can ask for and receive an answer about how the original connection was made. The current  `.frm'  file format does not have any place for it.  At a later stage we will implement the foreign key constraints for application that can't easily be coded to avoid them.        1.4.4.7  Views            MySQL doesn't yet support views, but we plan to implement these to about 4.1.      Views are mostly useful for letting users access a set of relations as one table (in read-only mode).  Many SQL databases don't allow one to update any rows in a view, but you have to do the updates in the separate tables.      As MySQL is mostly used in applications and on web system where the application writer has full control on the database usage, most of our users haven't regarded views to be very important. (At least no one has been interested enough in this to be prepared to finance the implementation of views).      One doesn't need views in MySQL to restrict access to columns as MySQL has a very sophisticated privilege system. See section  4.2  General Security Issues and the MySQL Access Privilege System .        1.4.4.8   `--'  as the Start of a Comment              Some other SQL databases use  `--'  to start comments. MySQL has  `#'  as the start comment character, even if the  mysql  command-line tool removes all lines that start with  `--' . You can also use the C comment style  /* this is a comment */  with MySQL. See section  6.1.5  Comment Syntax .      MySQL Version 3.23.3 and above supports the  `--'  comment style only if the comment is followed by a space.  This is because this degenerate comment style has caused many problems with automatically generated SQL queries that have used something like the following code, where we automatically insert the value of the payment for  !payment! :      UPDATE tbl_name SET credit=credit-!payment!      What do you think will happen when the value of  payment  is negative?      Because  1--1  is legal in SQL, we think it is terrible that  `--'  means start comment.      In MySQL Version 3.23 you can, however, use:  1-- This is a comment       The following discussion only concerns you if you are running a MySQL version earlier than Version 3.23:      If you have a SQL program in a text file that contains  `--'  comments you should use:      shell> replace "" --"" "" #"" < text-file-with-funny-comments.sql \          | mysql database      instead of the usual:      shell> mysql database < text-file-with-funny-comments.sql      You can also edit the command file ``in place'' to change the  `--'  comments to  `#'  comments:      shell> replace "" --"" "" #"" -- text-file-with-funny-comments.sql      Change them back with this command:      shell> replace "" #"" "" --"" -- text-file-with-funny-comments.sql       1.4.5  What Standards Does MySQL Follow?     Entry level SQL92. ODBC levels 0-2.        1.4.6  How to Cope Without  COMMIT / ROLLBACK                        The following mostly applies only for  ISAM ,  MyISAM , and  HEAP  tables. If you only use transaction-safe tables ( BDB , or  InnoDB  tables) in an an update, you can do  COMMIT  and  ROLLBACK  also with MySQL. See section  6.7.1   BEGIN/COMMIT/ROLLBACK  Syntax .      The problem with handling  COMMIT - ROLLBACK  efficiently with the above table types would require a completely different table layout than MySQL uses today.  The table type would also need extra threads that do automatic cleanups on the tables, and the disk usage would be much higher. This would make these table types about 2-4 times slower than they are today.      For the moment, we prefer implementing the SQL server language (something like stored procedures). With this you would very seldom really need  COMMIT - ROLLBACK.  This would also give much better performance.      Loops that need transactions normally can be coded with the help of  LOCK TABLES , and you don't need cursors when you can update records on the fly.      We at TcX had a greater need for a real fast database than a 100% general database. Whenever we find a way to implement these features without any speed loss, we will probably do it. For the moment, there are many more important things to do. Check the TODO for how we prioritize things at the moment. (Customers with higher levels of support can alter this, so things may be reprioritized.)      The current problem is actually  ROLLBACK . Without  ROLLBACK , you can do any kind of  COMMIT  action with  LOCK TABLES . To support  ROLLBACK  with the above table types, MySQL would have to be changed to store all old records that were updated and revert everything back to the starting point if  ROLLBACK  was issued. For simple cases, this isn't that hard to do (the current  isamlog  could be used for this purpose), but it would be much more difficult to implement  ROLLBACK  for  ALTER/DROP/CREATE TABLE .      To avoid using  ROLLBACK , you can use the following strategy:          Use  LOCK TABLES ...  to lock all the tables you want to access.    Test conditions.    Update if everything is okay.    Use  UNLOCK TABLES  to release your locks.      This is usually a much faster method than using transactions with possible  ROLLBACK s, although not always. The only situation this solution doesn't handle is when someone kills the threads in the middle of an update. In this case, all locks will be released but some of the updates may not have been executed.      You can also use functions to update records in a single operation. You can get a very efficient application by using the following techniques:        Modify fields relative to their current value.   Update only those fields that actually have changed.       For example, when we are doing updates to some customer information, we update only the customer data that has changed and test only that none of the changed data, or data that depend on the changed data, has changed compared to the original row. The test for changed data is done with the  WHERE  clause in the  UPDATE  statement. If the record wasn't updated, we give the client a message: ""Some of the data you have changed have been changed by another user"". Then we show the old row versus the new row in a window, so the user can decide which version of the customer record he should use.      This gives us something that is similar to column locking but is actually even better, because we only update some of the columns, using values that are relative to their current values.  This means that typical  UPDATE  statements look something like these:      UPDATE tablename SET pay_back=pay_back+'relative change';  UPDATE customer   SET     customer_date='current_date',     address='new address',     phone='new phone',     money_he_owes_us=money_he_owes_us+'new_money'   WHERE     customer_id=id AND address='old address' AND phone='old phone';      As you can see, this is very efficient and works even if another client has changed the values in the  pay_back  or  money_he_owes_us  columns.          In many cases, users have wanted  ROLLBACK  and/or  LOCK TABLES  for the purpose of managing unique identifiers for some tables. This can be handled much more efficiently by using an  AUTO_INCREMENT  column and either the SQL function  LAST_INSERT_ID()  or the C API function  mysql_insert_id() . See section  8.4.3.126   mysql_insert_id() .        At MySQL AB, we have never had any need for row-level locking because we have always been able to code around it. Some cases really need row locking, but they are very few. If you want row-level locking, you can use a flag column in the table and do something like this:      UPDATE tbl_name SET row_flag=1 WHERE id=ID;      MySQL returns 1 for the number of affected rows if the row was found and  row_flag  wasn't already 1 in the original row.      You can think of it as MySQL changed the above query to:      UPDATE tbl_name SET row_flag=1 WHERE id=ID and row_flag <> 1;       1.4.7  Known errors and design deficiencies in MySQL                  The following problems are known and have a very high priority to get fixed:           ANALYZE TABLE  on a BDB table may in some case make the table unusable until one has restarted  mysqld .  When this happens you will see errors like the following in the MySQL error file:    001207 22:07:56  bdb:  log_flush: LSN past current end-of-log       Don't execute  ALTER TABLE  on a  BDB  table on which you are running not completed multi-statement transactions. (The transaction will probably be ignored).      ANALYZE TABLE ,  OPTIMIZE TABLE  and  REPAIR TABLE  may cause problems on tables for which you are using  INSERT DELAYED .     Doing a  LOCK TABLE ..  and  FLUSH TABLES ..  doesn't guarantee that there isn't a half-finished transaction in progress on the table.     BDB tables are a bit slow to open. If you have many BDB tables in a database, it will take a long time to use the  mysql  client on the database if you are not using the  -A  option or if you are using  rehash . This is especially notable when you have a big table cache.     Th current replication protocol cannot deal with  LOAD DATA INFILE  and line terminator characters of more than 1 character.      The following problems are known and will be fixed in due time:          For the moment  MATCH  only works with  SELECT  statements.     When using  SET CHARACTER SET , one can't use translated characters in database, table and column names.      DELETE FROM merge_table  used without a  WHERE  will only clear the mapping for the table, not delete everything in the mapped tables     You cannot build in another directory when using MIT-pthreads. Because this requires changes to MIT-pthreads, we are not likely to fix this.      BLOB  values can't ``reliably'' be used in  GROUP BY  or  ORDER BY  or  DISTINCT . Only the first  max_sort_length  bytes (default 1024) are used when comparing  BLOB bs in these cases. This can be changed with the  -O max_sort_length  option to  mysqld . A workaround for most cases is to use a substring:  SELECT DISTINCT LEFT(blob,2048) FROM tbl_name .     Calculation is done with  BIGINT  or  DOUBLE  (both are normally 64 bits long). It depends on the function which precision one gets. The general rule is that bit functions are done with  BIGINT  precision,  IF , and  ELT()  with  BIGINT  or  DOUBLE  precision and the rest with  DOUBLE  precision.  One should try to avoid using bigger unsigned long long values than 63 bits (9223372036854775807) for anything else than bit fields!     All string columns, except  BLOB  and  TEXT  columns, automatically have all trailing spaces removed when retrieved. For  CHAR  types this is okay, and may be regarded as a feature according to ANSI SQL92. The bug is that in MySQL,  VARCHAR  columns are treated the same way.     You can only have up to 255  ENUM  and  SET  columns in one table.      safe_mysqld  re-directs all messages from  mysqld  to the  mysqld  log.  One problem with this is that if you execute  mysqladmin refresh  to close and reopen the log,  stdout  and  stderr  are still redirected to the old log. If you use  --log  extensively, you should edit  safe_mysqld  to log to  `'hostname'.err'  instead of  `'hostname'.log'  so you can easily reclaim the space for the old log by deleting the old one and executing  mysqladmin refresh .     In the  UPDATE  statement, columns are updated from left to right.  If  you refer to an updated column, you will get the updated value instead of the original value. For example:    mysql> UPDATE tbl_name SET KEY=KEY+1,KEY=KEY+1;    This will update  KEY  with  2  instead of with  1 .     You can't use temporary tables more than once in the same query. For example, the following doesn't work.    select * from temporary_table, temporary_table as t2;        RENAME  doesn't work with  TEMPORARY  tables.     The optimizer may handle  DISTINCT  differently if you are using 'hidden' columns in a join or not.  In a join, hidden columns are counted as part of the result (even if they are not shown) while in normal queries hidden columns doesn't participate in the  DISTINCT  comparison.  We will probably change this in the future to never compare the hidden columns when executing  DISTINCT   An example of this is:    SELECT DISTINCT mp3id FROM band_downloads WHERE userid = 9 ORDER BY id DESC;    and    SELECT DISTINCT band_downloads.mp3id, FROM band_downloads,band_mp3 WHERE band_downloads.userid = 9 AND band_mp3.id = band_downloads.mp3id ORDER BY band_downloads.id DESC;    In the second case you may in MySQL 3.23.x get two identical rows in the result set (because the hidden 'id' column may differ).  Note that the this only happens for queries where you don't have the ORDER BY columns in the result, something that is you are not allowed to do in ANSI SQL.     Because MySQL allows you to work with table types that doesn't support transactions (and thus can't  rollback  data) some things behaves a little different in MySQL than in other SQL servers: (This is just to ensure that MySQL never need to do a rollback for a SQL command).  This may be a little awkward at times as column Because MySQL allows you to work with table types that don't support transactions, and thus can't  rollback  data, some things behave a little differently in MySQL than in other SQL servers. This is just to ensure that MySQL never need to do a rollback for a SQL command.  This may be a little awkward at times as column values must be checked in the application, but this will actually give you a nice speed increase as it allows MySQL to do some optimizations that otherwise would be very hard to do.  If you set a column to an incorrect value, MySQL will, instead of doing a rollback, store the  best possible value  in the column:        If you try to store a value outside the range in a numerical column, MySQL will instead store the smallest or biggest possible value in the column.     If you try to store a string that doesn't start with a number into a numerical column, MySQL will store 0 into it.     If you try to store  NULL  into a column that doesn't take  NULL  values, MySQL will store 0 or  ''  (empty string) in it instead. (This behavior can, however, be changed with the -DDONT_USE_DEFAULT_FIELDS compile option).     MySQL allows you to store some wrong date values into  DATE  and  DATETIME  columns. (Like 2000-02-31 or 2000-02-00). If the date is totally wrong, MySQL will store the special 0000-00-00 date value in the column.     If you set an  enum  to an unsupported value, it will be set to the error value 'empty string', with numeric value 0.       If you execute a  PROCEDURE  on a query that returns an empty set, in some cases the  PROCEDURE  will not transform the columns.     Creation of a table of type  MERGE  doesn't check if the underlying tables are of compatible types.     MySQL can't yet handle  NaN ,  -Inf  and  Inf  values in double. Using these will cause problems when trying to export and import data. We should as an intermediate solution change  NaN  to  NULL  (if possible) and  -Inf  and  Inf  to the Minimum respective maximum possible  double  value.      LIMIT  on negative numbers are treated as big positive numbers.    If you use  ALTER TABLE  to first add an  UNIQUE  index to a table used in a  MERGE  table and then use  ALTER TABLE  to add a normal index on the  MERGE  table, the key order will be different for the tables if there was an old not-unique key in the table. This is because  ALTER TABLE  puts  UNIQUE  keys before normal keys to be able to detect duplicate keys as early as possible.      The following are known bugs in earlier versions of MySQL:          You can get a hung thread if you do a  DROP TABLE  on a table that is one among many tables that is locked with  LOCK TABLES .     In the following case you can get a core dump:        Delayed insert handler has pending inserts to a table.      LOCK table  with  WRITE       FLUSH TABLES        Before MySQL Version 3.23.2 an  UPDATE  that updated a key with a  WHERE  on the same key may have failed because the key was used to search for records and the same row may have been found multiple times:    UPDATE tbl_name SET KEY=KEY+1 WHERE KEY > 100;    A workaround is to use:    mysql> UPDATE tbl_name SET KEY=KEY+1 WHERE KEY+0 > 100;    This will work because MySQL will not use index on expressions in the  WHERE  clause.     Before MySQL Version 3.23, all numeric types where treated as fixed-point fields. That means you had to specify how many decimals a floating-point field shall have. All results were returned with the correct number of decimals.      For platform-specific bugs, see the sections about compiling and porting.        1.5  How MySQL Compares to Other Databases               This section compares MySQL to other popular databases.        This section has been written by the MySQL developers, so it should be read with that in mind.  There are no factual errors contained in this section that we know of.  If you find something which you believe to be an error, please contact us about it at  docs@mysql.com .      For a list of all supported limits, functions, and types, see the  crash-me  Web page at   http://www.mysql.com/information/crash-me.php .        1.5.1  How MySQL Compares to  mSQL       Performance    For a true comparison of speed, consult the growing MySQL benchmark suite. See section  5.1.4  The MySQL Benchmark Suite .  Because there is no thread creation overhead, a small parser, few features, and simple security,  mSQL  should be quicker at:        Tests that perform repeated connects and disconnects, running a very simple query during each connection.      INSERT  operations into very simple tables with few columns and keys.      CREATE TABLE  and  DROP TABLE .      SELECT  on something that isn't an index. (A table scan is very easy.)    Because these operations are so simple, it is hard to be better at them when you have a higher startup overhead. After the connection is established, MySQL should perform much better.  On the other hand, MySQL is much faster than  mSQL  (and most other SQL implementations) on the following:        Complex  SELECT  operations.     Retrieving large results (MySQL has a better, faster, and safer protocol).     Tables with variable-length strings, because MySQL has more efficient handling and can have indexes on  VARCHAR  columns.     Handling tables with many columns.     Handling tables with large record lengths.      SELECT  with many expressions.      SELECT  on large tables.     Handling many connections at the same time. MySQL is fully multi-threaded. Each connection has its own thread, which means that no thread has to wait for another (unless a thread is modifying a table another thread wants to access). In  mSQL , once one connection is established, all others must wait until the first has finished, regardless of whether the connection is running a query that is short or long. When the first connection terminates, the next can be served, while all the others wait again, etc.     Joins.  mSQL  can become pathologically slow if you change the order of tables in a  SELECT . In the benchmark suite, a time more than 15000 times slower than MySQL was seen.  This is due to  mSQL 's lack of a join optimizer to order tables in the optimal order. However, if you put the tables in exactly the right order in  mSQL 2 and the  WHERE  is simple and uses index columns, the join will be relatively fast! See section  5.1.4  The MySQL Benchmark Suite .      ORDER BY  and  GROUP BY .      DISTINCT .     Using  TEXT  or  BLOB  columns.     SQL Features        GROUP BY  and  HAVING .   mSQL  does not support  GROUP BY  at all. MySQL supports a full  GROUP BY  with both  HAVING  and the following functions:  COUNT() ,  AVG() ,  MIN() ,  MAX() ,  SUM() , and  STD() .   COUNT(*)  is optimized to return very quickly if the  SELECT  retrieves from one table, no other columns are retrieved, and there is no  WHERE  clause.   MIN()  and  MAX()  may take string arguments.   INSERT  and  UPDATE  with calculations.  MySQL can do calculations in an  INSERT  or  UPDATE . For example:    mysql> UPDATE SET x=x*10+y WHERE x<20;     Aliasing.  MySQL has column aliasing.   Qualifying column names.  In MySQL, if a column name is unique among the tables used in a query, you do not have to use the full qualifier.   SELECT  with functions.  MySQL has many functions (too many to list here; see section  6.3  Functions for Use in  SELECT  and  WHERE  Clauses ).      Disk Space Efficiency    That is, how small can you make your tables?  MySQL has very precise types, so you can create tables that take very little space. An example of a useful MySQL datatype is the  MEDIUMINT  that is 3 bytes long. If you have 100,000,000 records, saving even one byte per record is very important.   mSQL2  has a more limited set of column types, so it is more difficult to get small tables.   Stability    This is harder to judge objectively. For a discussion of MySQL stability, see section  1.1.7  How Stable Is MySQL? .  We have no experience with  mSQL  stability, so we cannot say anything about that.   Price    Another important issue is the license. MySQL has a more flexible license than  mSQL , and is also less expensive than  mSQL .  Whichever product you choose to use, remember to at least consider paying for a license or e-mail support.  (You are required to get a license if you include MySQL with a product that you sell, of course.)   Perl Interfaces    MySQL has basically the same interfaces to Perl as  mSQL  with some added features.   JDBC (Java)    MySQL currently has a lot of different JDBC drivers:        The mm driver: A type 4 JDBC driver by Mark Matthews  mmatthew@ecn.purdue.edu .  This is released under the LGPL.     The Resin driver. This is a commercial JDBC driver released under open source.   http://www.caucho.com/projects/jdbc-mysql/index.xtp      The gwe driver: A Java interface by GWE technologies (not supported anymore).     The jms driver: An improved gwe driver by Xiaokun Kelvin ZHU  X.Zhu@brad.ac.uk  (not supported anymore).     The twz driver: A type 4 JDBC driver by Terrence W. Zellers  zellert@voicenet.com .  This is commercial but is free for private and educational use (not supported anymore).    The recommended driver is the mm driver. The Resin driver may also be good (at least the benchmarks looks good), but we haven't received that much information about this yet.  We know that  mSQL  has a JDBC driver, but we have too little experience with it to compare.   Rate of Development    MySQL has a very small team of developers, but we are quite used to coding C and C++ very rapidly. Because threads, functions,  GROUP BY , and so on are still not implemented in  mSQL , it has a lot of catching up to do. To get some perspective on this, you can view the  mSQL   `HISTORY'  file for the last year and compare it with the News section of the MySQL Reference Manual (see section  F  MySQL change history ). It should be pretty obvious which one has developed most rapidly.   Utility Programs    Both  mSQL  and MySQL have many interesting third-party tools. Because it is very easy to port upward (from  mSQL  to MySQL), almost all the interesting applications that are available for  mSQL  are also available for MySQL.  MySQL comes with a simple  msql2mysql  program that fixes differences in spelling between  mSQL  and MySQL for the most-used C API functions. For example, it changes instances of  msqlConnect()  to  mysql_connect() . Converting a client program from  mSQL  to MySQL usually takes a couple of minutes.       1.5.1.1  How to Convert  mSQL  Tools for MySQL                According to our experience, it would just take a few hours to convert tools such as  msql-tcl  and  msqljava  that use the  mSQL  C API so that they work with the MySQL C API.      The conversion procedure is:          Run the shell script  msql2mysql  on the source. This requires the  replace  program, which is distributed with MySQL.     Compile.     Fix all compiler errors.      Differences between the  mSQL  C API and the MySQL C API are:          MySQL uses a  MYSQL  structure as a connection type ( mSQL  uses an  int ).      mysql_connect()  takes a pointer to a  MYSQL  structure as a parameter.  It is easy to define one globally or to use  malloc()  to get one.   mysql_connect()  also takes two parameters for specifying the  user and password.  You may set these to  NULL, NULL  for default use.      mysql_error()  takes the  MYSQL  structure as a parameter. Just add the parameter to your old  msql_error()  code if you are porting old code.     MySQL returns an error number and a text error message for all errors.  mSQL  returns only a text error message.     Some incompatibilities exist as a result of MySQL supporting multiple connections to the server from the same process.       1.5.1.2  How  mSQL  and MySQL Client/Server Communications Protocols Differ              There are enough differences that it is impossible (or at least not easy) to support both.      The most significant ways in which the MySQL protocol differs from the  mSQL  protocol are listed below:          A message buffer may contain many result rows.     The message buffers are dynamically enlarged if the query or the result is bigger than the current buffer, up to a configurable server and client limit.     All packets are numbered to catch duplicated or missing packets.     All column values are sent in ASCII. The lengths of columns and rows are sent in packed binary coding (1, 2, or 3 bytes).     MySQL can read in the result unbuffered (without having to store the full set in the client).     If a single read/write takes more than 30 seconds, the server closes the connection.     If a connection is idle for 8 hours, the server closes the connection.       1.5.1.3  How  mSQL  2.0 SQL Syntax Differs from MySQL      Column types         MySQL    Has the following additional types (among others; see section  6.5.3   CREATE TABLE  Syntax ):        ENUM  type for one of a set of strings.     SET  type for many of a set of strings.     BIGINT  type for 64-bit integers.        MySQL also supports the following additional type attributes:        UNSIGNED  option for integer columns.     ZEROFILL  option for integer columns.     AUTO_INCREMENT  option for integer columns that are a  PRIMARY KEY . See section  8.4.3.126   mysql_insert_id() .     DEFAULT  value for all columns.     mSQL2     mSQL  column types correspond to the MySQL types shown below:    mSQL   type     Corresponding MySQL type     CHAR(len)     CHAR(len)     TEXT(len)     TEXT(len) .  len  is the maximal length. And  LIKE  works.    INT     INT . With many more options!    REAL     REAL . Or  FLOAT . Both 4- and 8-byte versions are available.    UINT     INT UNSIGNED     DATE     DATE . Uses ANSI SQL format rather than  mSQL 's own format.    TIME     TIME     MONEY     DECIMAL(12,2) . A fixed-point value with two decimals.           Index Creation         MySQL    Indexes may be specified at table creation time with the  CREATE TABLE  statement.  mSQL    Indexes must be created after the table has been created, with separate  CREATE INDEX  statements.       To Insert a Unique Identifier into a Table         MySQL    Use  AUTO_INCREMENT  as a column type specifier. See section  8.4.3.126   mysql_insert_id() .  mSQL    Create a  SEQUENCE  on a table and select the  _seq  column.       To Obtain a Unique Identifier for a Row         MySQL    Add a  PRIMARY KEY  or  UNIQUE  key to the table and use this. New in Version 3.23.11: If the  PRIMARY  or  UNIQUE  key consists of only one column and this is of type integer, one can also refer to it as  _rowid .  mSQL    Use the  _rowid  column. Observe that  _rowid  may change over time depending on many factors.       To Get the Time a Column Was Last Modified         MySQL    Add a  TIMESTAMP  column to the table. This column is automatically set to the current date and time for  INSERT  or  UPDATE  statements if you don't give the column a value or if you give it a  NULL  value.   mSQL    Use the  _timestamp  column.       NULL  Value Comparisons         MySQL    MySQL follows ANSI SQL, and a comparison with  NULL  is always  NULL .  mSQL    In  mSQL ,  NULL = NULL  is TRUE.  You must change  =NULL  to  IS NULL  and  <>NULL  to  IS NOT NULL  when porting old code from  mSQL  to MySQL.       String Comparisons         MySQL    Normally, string comparisons are performed in case-independent fashion with the sort order determined by the current character set (ISO-8859-1 Latin1 by default).  If you don't like this, declare your columns with the  BINARY  attribute, which causes comparisons to be done according to the ASCII order used on the MySQL server host.  mSQL    All string comparisons are performed in case-sensitive fashion with sorting in ASCII order.       Case-insensitive Searching         MySQL     LIKE  is a case-insensitive or case-sensitive operator, depending on the columns involved. If possible, MySQL uses indexes if the  LIKE  argument doesn't start with a wild-card character.  mSQL    Use  CLIKE .       Handling of Trailing Spaces         MySQL    Strips all spaces at the end of  CHAR  and  VARCHAR  columns. Use a  TEXT  column if this behavior is not desired.  mSQL    Retains trailing space.       WHERE  Clauses         MySQL    MySQL correctly prioritizes everything ( AND  is evaluated before  OR ). To get  mSQL  behavior in MySQL, use parentheses (as shown in an example below).  mSQL    Evaluates everything from left to right. This means that some logical calculations with more than three arguments cannot be expressed in any way. It also means you must change some queries when you upgrade to MySQL. You do this easily by adding parentheses.  Suppose you have the following  mSQL  query:   mysql> SELECT * FROM table WHERE a=1 AND b=2 OR a=3 AND b=4;    To make MySQL evaluate this the way that  mSQL  would, you must add parentheses:   mysql> SELECT * FROM table WHERE (a=1 AND (b=2 OR (a=3 AND (b=4))));          Access Control         MySQL    Has tables to store grant (permission) options per user, host, and database. See section  4.2.5  How the Privilege System Works .  mSQL    Has a file  `mSQL.acl'  in which you can grant read/write privileges for users.           1.5.2  How MySQL Compares to PostgreSQL            When reading the following, please note that both products are continually evolving.  We at MySQL AB and the PostgreSQL developers are both working on making our respective database as good as possible, so we are both a  serious choice to any commercial database.      The following comparison is made by us at MySQL AB.  We have tried to be as accurate and fair as possible, but because we don't have a full knowledge of all PostgreSQL features while we know MySQL througly, we may have got some things wrong.  We will however correct these when they come to our attention.      We would first like to note that PostgreSQL and MySQL are both widely used products, but with different design goals, even if we are both striving to be ANSI SQL compatible.  This means that for some applications MySQL is  more suited, while for others PostgreSQL is more suited.  When choosing  which database to use, you should first check if the database's feature set satisfies your application.  If you need raw speed, MySQL is probably your best choice.  If you need some of the extra features that only PostgreSQL can offer, you should use  PostgreSQL .               1.5.2.1  MySQL and PostgreSQL development strategies     When adding things to MySQL we take pride to do an optimal, definite solution.  The code should be so good that we shouldn't have any need to change it in the foreseeable future.  We also do not like to sacrifice speed for features but instead will do our utmost to find a solution that will give maximal throughput.  This means that development will take a little longer, but the end result will be well worth this.  This kind of development is only possible because all server code are checked by one of a few (currently two) persons before it's included in the MySQL server.      We at MySQL AB believe in frequent releases to be able to push out new features quickly to our users.  Because of this we do a new small release about every three weeks, and a major branch every year.  All releases are throughly tested with our testing tools on a lot of different platforms.      PostgreSQL is based on a kernel with lots of contributors. In this setup it makes sense to prioritize adding a lot of new features, instead of implementing them optimally, because one can always optimize things later if there arises a need for this.      Another big difference between MySQL and PostgreSQL is that nearly all of the code in the MySQL server are coded by developers that are employed by MySQL AB and are still working on the server code. The exceptions are the transaction engines, and the regexp library.      This is in sharp contrast to the PostgreSQL code where the majority of the code is coded by a big group of people with different backgrounds. It was only recently that the PostgreSQL developers announced that their current developer group had finally had time to take a look at all the code in the current PostgreSQL release.      Both of the above development methods has it's own merits and drawbacks. We here at MySQL AB think of course that our model is better because our model gives better code consistency, more optimal and reusable code, and in our opinion, fewer bugs.  Because we are the authors of the MySQL server code, we are better able to coordinate new features and releases.        1.5.2.2  Featurewise Comparison of MySQL and PostgreSQL            On the   crash-me  page you can find a list of those database constructs and limits that one can detect automatically with a program.  Note however that a lot of the numerical limits may be changed with startup options for respective database.  The above web page is however extremely useful when you want to ensure that your applications works with many different databases or when you want to convert your application from one datbase to another.      MySQL offers the following advantages over PostgreSQL:           MySQL  is generally much faster than PostgreSQL. See section  1.5.2.3  Benchmarking MySQL and PostgreSQL .     MySQL has a much larger user base than PostgreSQL, therefor the code is more tested and has historically been more stable than PostgreSQL.  MySQL is the much more used in production environments than PostgreSQL, mostly thanks to that MySQL AB, formerly TCX DataKonsult AB, has provided top quality commercial support for MySQL from the day it was released, whereas until recently PostgreSQL was unsupported.     MySQL works better on Windows than PostgreSQL does.  MySQL runs as a native Windows application (a service on NT/Win2000/WinXP), while PostgreSQL is run under the cygwin emulation.  We have heard that PostgreSQL is not yet that stable on Windows but we haven't been able to verify this ourselves.     MySQL has more APIs to other languages and is supported by more existing programs than PostgreSQL.  See section  D  Contributed Programs .     MySQL works on 24/7 heavy duty systems.  In most circumstances you never have to run any cleanups on MySQL.  PostgreSQL doesn't yet support 24/7 systems because you have to run  VACUUM()  once in a while to reclaim space from  UPDATE  and  DELETE  commands and to perform statistics analyzes that are critical to get good performance with PostgreSQL.   VACUUM()  is also needed after adding a lot of new rows to a table.  On a busy system with lots of changes,  VACUUM()  must be run very frequently, in the worst cases even  many times a day.  During the  VACUUM()  run, which may take hours  if the database is big, the database is from a production standpoint, practically dead.  The PostgreSQL team has fixing this on their TODO, but we assume that this is not an easy thing to fix permanently.     A working, tested replication feature used by sites like:     Yahoo Finance ( http://finance.yahoo.com )   Mobile.de ( http://www.mobile.de/ )   Slashdot ( http://www.slashdot.org )        Included in the MySQL distribution are two different testing suites,   `mysql-test-run'  and   crash-me , as well as a benchmark suite.  The test system is actively updated with code to test each new feature and almost all repeatable bugs that have come to our attention.  We test MySQL with these on a lot of platforms before every release.  These tests are more sophisticated than anything we have  seen from PostgreSQL, and they ensures that the MySQL is kept to a high standard.     There are far more books in print about MySQL than about PostgreSQL. O'Reilly, Sams, Que, and New Riders are all major publishers with books about MySQL.  All MySQL features are also documented in the MySQL on-line manual, because when a new feature is implemented, the MySQL developers  are required to document it before it's included in the source.     MySQL supports more of the standard ODBC functions than  PostgreSQL .     MySQL has a much more sophisticated  ALTER TABLE .     MySQL has support for tables without transactions for applications that  need all speed they can get. The tables may be memory based,  HEAP  tables or disk based  MyISAM .  See section  7  MySQL Table Types .     MySQL has support for two different table handlers that support transactions,  BerkeleyDB  and  InnoDB .  Because every  transaction engine performs differently under different conditions, this  gives the application writer more options to find an optimal solution for his or her setup.  See section  7  MySQL Table Types .      MERGE  tables gives you a unique way to instantly make a view over a set of identical tables and use these as one.  This is perfect for systems where you have log files that you order for example by month. See section  7.2  MERGE Tables .     The option to compress read-only tables, but still have direct access to the rows in the table, gives you better performance by minimizing disk reads.  This is very useful when you are archiving things. See section  4.7.4  myisampack, The MySQL Compressed Read-only Table Generator .     MySQL has internal support for fulltext search. See section  6.8  MySQL Full-text Search .     You can access many databases from the same connection (depending of course on your privileges).     MySQL is coded from the start to be multi-threaded while PostgreSQL uses processes.  Context switching and access to common storage areas is much  faster between threads than between separate processes, this gives MySQL a big speed advantage in multi-user applications and also makes it easier for MySQL to take full advantage of symmetric multiprocessor (SMP) systems.     MySQL has a much more sophisticated privilege system than PostgreSQL.   While PostgreSQL only supports  INSERT ,  SELECT , and  UPDATE/DELETE  grants per user on a database or a table, MySQL allows you to define a full set of different privileges on database, table and  column level.  MySQL also allows you to specify the privilege on host and  user combinations.  See section  4.3.1   GRANT  and  REVOKE  Syntax .     MySQL supports a compressed client/server protocol which improves  performance over slow links.     MySQL employs a ``table handler'' concept, and is the only relational  database we know of built around this concept.  This allows different  low-level table types to be swapped into the SQL engine, and each table  type can be optimized for different performance characteristics.     All MySQL table types (except  InnoDB ) are implemented as files (one table per file), which makes it really easy to backup, move, delete and even symlink databases and tables, even when the server is down.     Tools to repair and optimize  MyISAM  tables (the most common MySQL table type).  A repair tool is only needed when a physical corruption of a data file happens, usually from a hardware failure.  It allows a  majority of the data to be recovered.     Upgrading MySQL is painless.  When you are upgrading MySQL, you don't need to dump/restore your data, as you have to do with most PostgreSQL upgrades.      Drawbacks with MySQL compared to PostgreSQL:          The transaction support in MySQL is not yet as well tested as PostgreSQL's system.     Because MySQL uses threads, which are not yet flawless on many OSes, one must either use binaries from  http://www.mysql.com/downloads , or carefully follow our instructions on  http://www.mysql.com/doc/I/n/Installing_source.html  to get an optimal binary that works in all cases.     Table locking, as used by the non-transactional  MyISAM  tables, is in many cases faster than page locks, row locks or versioning.  The drawback however is that if one doesn't take into account how table locks work, a single long-running query can block a table for updates for a long time. This can usable be avoided when designing the application.  If not, one can always switch the trouble table to use one of the transactional table types. See section  5.3.2  Table Locking Issues .     With UDF (user defined functions) one can extend MySQL with both normal  SQL functions and aggregates, but this is not yet as easy or as flexible as in PostgreSQL.  See section  9.1  Adding New Functions to MySQL .     Updates and deletes that run over multiple tables is harder to do in MySQL. This will, hoever, be fixed in MySQL 4.0 with multi-table  DELETE  and multi-table  UPDATE  and in MySQL 4.1 with subselects.      PostgreSQL currently offers the following advantages over MySQL:      Note that because we know the MySQL road map, we have included in the following table the version when MySQL should support this feature. Unfortunately we couldn't do this for previous comparison, because we  don't know the PostgreSQL roadmap.       Feature     MySQL version     Subselects   4.1    Foreign keys   4.0 and 4.1    Views   4.2    Stored procedures   4.1    Extensible type system   Not planned    Unions   4.0    Full join   4.0 or 4.1    Triggers   4.1    Constrainst   4.1    Cursors   4.1 or 4.2    Extensible index types like R-trees   R-trees are planned for 4.2    Inherited tables   Not planned        Other reasons to use PostgreSQL:          Standard usage in PostgreSQL is closer to ANSI SQL in some cases.     One can speed up PostgreSQL by coding things as stored procedures.     PostgreSQL has a bigger team of developers that contribute to the server.      Drawbacks with PostgreSQL compared to MySQL:           VACUUM()  makes PostgreSQL hard to use in a 24/7 environment.     Only transactional tables.     Much slower  INSERT ,  DELETE , and  UPDATE .      For a complete list of drawbacks, you should also examine the first table in this section.        1.5.2.3  Benchmarking MySQL and PostgreSQL            The only open source benchmark that we know of that can be used to benchmark MySQL and PostgreSQL (and other databases) is our own. It can be found at  http://www.mysql.com/information/benchmarks.html .      We have many times asked the PostgreSQL developers and some PostgreSQL users to help us extend this benchmark to make it the definitive benchmark for databases, but unfortunately we haven't gotten any feedback for this.      We the MySQL developers have, because of this, spent a lot of hours to get maximum performance from PostgreSQL for the benchmarks, but because we  don't know PostgreSQL intimately, we are sure that there are things that  we have missed.  We have on the benchmark page documented exactly how we  did run the benchmark so that it should be easy for anyone to repeat and verify our results.      The benchmarks are usually run with and without the  --fast  option. When run with  --fast  we are trying to use every trick the server can do to get the code to execute as fast as possible.  The idea is that the normal run should show how the server would work in a default setup and  the  --fast  run shows how the server would do if the application  developer would use extensions in the server to make his application run faster.      When running with PostgreSQL and  --fast  we do a  VACUUM()  after every major table  UPDATE  and  DROP TABLE  to make the database in perfect shape for the following  SELECT s.  The time for  VACUUM()  is measured separately.      When running with PostgreSQL 7.1.1 we could, however, not run with  --fast  because during the  INSERT  test, the postmaster (the PostgreSQL deamon) died and the database was so corrupted that it was impossible to restart postmaster.   After this happened twice, we decided to postpone the  --fast  test until next PostgreSQL release.  The  details about the machine we run the benchmark can be found on the  benchmark page.      Before going to the other benchmarks we know of, we would like to give some background on benchmarks:      It's very easy to write a test that shows ANY database to be best database in the world, by just restricting the test to something the database is very good at and not test anything that the database is not good at.  If one after this publishes the result with a single figure, things are even easier.      This would be like us measuring the speed of MySQL compared to PostgreSQL by looking at the summary time of the MySQL benchmarks on our web page. Based on this MySQL would be more than 40 times faster than PostgreSQL,  something that is of course not true.  We could make things even worse  by just taking the test where PostgreSQL performs worst and claim that  MySQL is more than 2000 times faster than PostgreSQL.      The case is that MySQL does a lot of optimizations that PostgreSQL doesn't do. This is of course also true the other way around.  An SQL optimizer is a very complex thing, and a company could spend years on just making the optimizer faster and faster.      When looking at the benchmark results you should look for things that you do in your application and just use these results to decide which database would be best suited for your application.  The benchmark results also shows things a particular database is not good at and should give you a notion about things to avoid and what you may have to do in other ways.      We know of two benchmark tests that claims that PostgreSQL performs better  than MySQL.  These both where multi-user tests, a test that we here at  MySQL AB haven't had time to write and include in the benchmark suite,  mainly because it's a big task to do this in a manner that is fair against all databases.      One is the benchmark paid for by Great Bridge, which you can read about at:  http://www.greatbridge.com/about/press.php?content_id=4 .      This is the probably worst benchmark we have ever seen anyone conduct.  This was not only tuned to only test what PostgreSQL is absolutely best at, it  was also totally unfair against every other database involved in the test.       NOTE :  We know that not even some of the main PostgreSQL developers did like the way Great Bridge conducted the benchmark, so we don't blame them for the way the benchmark was made.      This benchmark has been condemned in a lot of postings and newsgroups so we will here just shortly repeat some things that where wrong with it.          The tests were run with an expensive commercial tool, that makes it impossible for an open source company like us to verify the benchmarks, or even check how the benchmarks were really done.  The tool is not even a true benchmark tool, but an application/setup testing tool.  To refer this as a ``standard'' benchmark tool is to stretch the truth a long way.     Great Bridge admitted that they had optimized the PostgreSQL database (with  VACUUM()  before the test) and tuned the startup for the tests, something they hadn't done for any of the other databases involved.  To say ``This process optimizes indexes and frees up disk space a bit.  The optimized indexes boost performance by some margin.''  Our benchmarks clearly indicate that the difference in running a lot of selects on a database with and without  VACUUM()  can easily differ by a factor of ten.     The test results were also strange.  The AS3AP test documentation mentions that the test does ``selections, simple joins, projections,  aggregates, one-tuple updates, and bulk updates''.  PostgreSQL is good at doing  SELECT s and  JOIN s (especially  after a  VACUUM() ), but doesn't perform as well on  INSERT s or  UPDATE s.  The benchmarks seem to indicate that only  SELECT s  were done (or very few updates).  This could easily explain they good results for PostgreSQL in this test.  The bad results for MySQL will be obvious a  bit down in this document.     They did run the so-called benchmark from a Windows machine against a Linux machine over ODBC, a setup that no normal database user would ever do when running a heavy multi-user application.  This tested more the ODBC driver and the Windows protocol used between the clients than the database itself.     When running the database against Oracle and MS-SQL (Great Bridge has indirectly indicated that the databases they used in the test), they  didn't use the native protocol but instead ODBC.  Anyone that has ever  used Oracle knows that all real application uses the native interface  instead of ODBC.  Doing a test through ODBC and claiming that the results had anything to do with using the database in a real-world situation can't be regarded as fair.  They should have done two tests with and without ODBC to provide the right facts (after having got experts to tune all involved databases of course).     They refer to the TPC-C tests, but they don't mention anywhere that the test they did was not a true TPC-C test and they were not even allowed to call it a TPC-C test.  A TPC-C test can only be conducted by the rules approved by the TPC Council ( http://www.tpc.org ). Great Bridge  didn't do that.  By doing this they have both violated the TPC trademark and miscredited their own benchmarks.  The rules set by the TPC Council  are very strict to ensure that no one can produce false results or make unprovable statements.  Apparently Great Bridge wasn't interested in  doing this.     After the first test, we contacted Great Bridge and mentioned to them some of the obvious mistakes they had done with MySQL:         Running with a debug version of our ODBC driver     Running on a Linux system that wasn't optimized for threads     Using an old MySQL version when there was a recommended newer one available     Not starting MySQL with the right options for heavy multi-user use (the  default installation of MySQL is tuned for minimal resource use).     Great Bridge did run a new test, with our optimized ODBC driver and with  better startup options for MySQL, but refused to either use our updated  glibc library or our standard binary (used by 80% of our users), which was statically linked with a fixed glibc library.  According to what we know, Great Bridge did nothing to ensure that the other databases were set up correctly to run well in their test environment.  We are sure however that they didn't contact Oracle or Microsoft to ask for their advice in this matter ;)     The benchmark was paid for by Great Bridge, and they decided to publish only partial, chosen results (instead of publishing it all).      Tim Perdue, a long time PostgreSQL fan and a reluctant MySQL user published a comparison on  phpbuider .      When we became aware of the comparison, we phoned Tim Perdue about this because there were a lot of strange things in his results.  For example, he claimed that MySQL had a problem with five users in his tests, when we know that there are users with similar machines as his that are using MySQL with 2000 simultaneous connections doing 400 queries per second. (In this case the limit was the web bandwidth, not the database.)      It sounded like he was using a Linux kernel that either had some problems with many threads, such as kernels before 2.4, which had a problem  with many threads on multi-CPU machines. We have documented in this manual how to fix this and Tim should be aware of this problem.      The other possible problem could have been an old glibc library and that Tim didn't use a MySQL binary from our site, which is linked with a corrected glibc library, but had compiled a version of his own with. In any of the above cases, the symptom would have been exactly what Tim had measured.      We asked Tim if we could get access to his data so that we could repeat the benchmark and if he could check the MySQL version on the machine to find out what was wrong and he promised to come back to us about this. He has not done that yet.      Because of this we can't put any trust in this benchmark either :(      Over time things also changes and the above benchmarks are not that relevant anymore.  MySQL now have a couple of different table handlers with different speed/concurrency tradeoffs.  See section  7  MySQL Table Types . It would be interesting to see how the above tests would run with the different transactional table types in MySQL.  PostgreSQL has of course also got new features since the test was made.  As the above test are not publicly available there is no way for us to know how the database would preform in the same tests today.       Conclusion:      The only benchmarks that exist today that anyone can download and run against MySQL and PostgreSQL is the MySQL benchmarks.  We here at MySQL  believe that open source databases should be tested with open source tools! This is the only way to ensure that no one does tests that nobody can  reproduce and use this to claim that a database is better than another. Without knowing all the facts it's impossible to answer the claims of the tester.      The thing we find strange is that every test we have seen about PostgreSQL, that is impossible to reproduce, claims that PostgreSQL is better in most cases while our tests, which anyone can reproduce, clearly shows otherwise.  With this we don't want to say that PostgreSQL isn't good at many things (it is!) or that it isn't faster than MySQL under certain conditions.  We would just like to see a fair test where they are very good so that we could get some friendly competition going!      For more information about our benchmarks suite See section  5.1.4  The MySQL Benchmark Suite .       We are working on an even better benchmark suite, including multi user tests, and a better documentation of what the individual tests really do and how to add more tests to the suite.        1.6  MySQL and the future (The TODO)             This appendix lists the features that we plan to implement in MySQL.      Everything in this list is approximately in the order it will be done.  If you want to affect the priority order, please register a license or support us and tell us what you want to have done more quickly. See section  1.3  MySQL Licensing and Support .      The plan is that we in the future will support the full ANSI SQL99 standard, but with a lot of useful extensions. The challenge is to do this without sacrifying the speed or compromise the code.        1.6.1  Things that should be in 4.0     We plan to make MySQL Version 4.0 a ``quick'' release where we only add some new stuff to enable others to help us with developing new features into Version 4.1.  The MySQL 4.0 version should only take us about a month to make after which we want to stabilize it and start working on Version 4.1.  Version 4.0 should have the following new features:      The news section for 4.0 includes a list of the features we have already implemented in the 4.0 tree. See section  F.1  Changes in release 4.0.x (Development; Alpha) .          New table definition file format ( .frm  files) This will enable us to not run out of bits when adding more table options.  One will still be able to use the old  .frm  file format with 4.0.  All newly created tables will, however, use the new format.  The new file format will enable us to add new column types, more options for keys and  FOREIGN KEY  support.     mysqld  as a library.  This will have the same interface as the standard MySQL client (with an extra function to just set up startup parameters) but will be faster (no TCP/IP or socket overhead), smaller and much easier to use for embedded products.  One will be able to define at link time if one wants to use the client/server model or a stand-alone application just by defining which library to link with.  The  mysqld  will support all standard MySQL features and one can use it in a threaded client to run different queries in each thread.    Replication should work with  RAND()  and user variables  @var .    Online backup with very low performance penalty.  The online backup will make it easy to add a new replication slave without taking down the master.     DELETE FROM table_name  will return the number of deleted rows. For fast execution one should use  TRUNCATE table_name .    Allow  DELETE  on  MyISAM  tables to use the record cache. To do this, we need to update the threads record cache when we update the  .MYD  file.    Better replication.    More functions for full-text search. See section  6.8.3  New Features of Full-text Search to Appear in MySQL 4.0 .    Character set casts and syntax for handling multiple character sets.    Allow users to change startup options without taking down the server.    Help for all commands from the client.    Secure connections (with SSL).    Extend the optimizer to be able to optimize some  ORDER BY key_name DESC  queries.     SHOW COLUMNS FROM table_name  (used by  mysql  client to allow expansions of column names) should not open the table, but only the definition file. This will require less memory and be much faster.    New key cache    When using  SET CHARACTER SET  we should translate the whole query at once and not only strings. This will enable users to use the translated characters in database, table and column names.    Add a portable interface over  gethostbyaddr_r()  so that we can change  ip_to_hostname()  to not block other threads while doing DNS lookups.    Add  record_in_range()  method to  MERGE  tables to be able to choose the right index when there is many to choose from. We should also extend the info interface to get the key distribution for each index, of  analyze  is run on all sub tables.     SET SQL_DEFAULT_TABLE_TYPE=[MyISAM | INNODB | BDB | HEAP] .       1.6.2  Things that must be done in the real near future         Fail safe replication.    Subqueries.  select id from t where grp in (select grp from g where u > 100)     Derived tables.   select a.col1, b.col2 from (select max(col1) as col1 from root_table ) a, other_table b where a.col1=b.col1    This could be done by automatically creating temporary tables for the derived tables for the duration of the query.    Add  PREPARE  of statements and sending of parameters to  mysqld .    Extend the server/client protocol to support warnings.    Add options to the server/protocol protocol to get progress notes for long running commands.    Add database and real table name (in case of alias) to the MYSQL_FIELD structure.    Don't allow more than a defined number of threads to run MyISAM recover at the same time.    Change  INSERT ... SELECT  to optionally use concurrent inserts.    Implement  RENAME DATABASE . To make this safe for all table handlers, it should work as follows:       Create the new database.    For every table do a rename of the table to another database, as we do with the  RENAME  command.    Drop the old database.       Return the original field types() when doing  SELECT MIN(column) ... GROUP BY .    Multiple result sets.    Change the protocol to allow binary transfer of values. To do this efficiently, we need to add an API to allow binding of variables.    Make it possible to specify  long_query_time  with a granularity in microseconds.    Add a configurable prompt to the  mysql  command line client, with options like database in use, time and date...    Add range checking to  MERGE  tables.    Link the  myisampack  code into the server.    Port of MySQL to BeOS.    Port of the MySQL clients to LynxOS.    Add a temporary key buffer cache during  INSERT/DELETE/UPDATE  so that we can gracefully recover if the index file gets full.    If you perform an  ALTER TABLE  on a table that is symlinked to another disk, create temporary tables on this disk.    Implement a  DATE/DATETIME  type that handles time zone information properly, so that dealing with dates in different time zones is easier.    FreeBSD and MIT-pthreads;  Do sleeping threads take CPU?    Check if locked threads take any CPU.    Fix configure so that one can compile all libraries (like  MyISAM ) without threads.    Add an option to periodically flush key pages for tables with delayed keys if they haven't been used in a while.    Allow join on key parts (optimization issue).     INSERT SQL_CONCURRENT  and  mysqld --concurrent-insert  to do a concurrent insert at the end of the file if the file is read-locked.    Remember  FOREIGN  key definitions in the  `.frm'  file.    Cascading  DELETE     Server side cursors.    Check if  lockd  works with modern Linux kernels; If not, we have to fix  lockd !  To test this, start  mysqld  with  --enable-locking  and run the different fork* test suits. They shouldn't give any errors if  lockd  works.    Allow SQL variables in  LIMIT , like in  LIMIT @a,@b .    Allow update of variables in  UPDATE  statements. For example:  UPDATE TABLE foo SET @a=a+b,a=@a, b=@a+c     Change when user variables are updated so that one can use them with  GROUP BY , as in the following example:  SELECT id, @a:=count(*), sum(sum_col)/@a FROM table_name GROUP BY id .    Don't add automatic  DEFAULT  values to columns.  Give an error when using an  INSERT  that doesn't contain a column that doesn't have a  DEFAULT .    Caching of queries and results. This should be done as a separated module that examines each query and if this is query is in the cache the cached result should be returned.  When one updates a table one should remove as few queries as possible from the cache. This should give a big speed bost on machines with much RAM where queries are often repeated (like WWW applications). One idea would be to only cache queries of type:  SELECT CACHED ...     Fix  `libmysql.c'  to allow two  mysql_query()  commands in a row without reading results or give a nice error message when one does this.    Optimize  BIT  type to take 1 bit (now  BIT  takes 1 char).    Check why MIT-pthreads  ctime()  doesn't work on some FreeBSD systems.    Add an  IMAGE  option to  LOAD DATA INFILE  to not update  TIMESTAMP  and  AUTO_INCREMENT  fields.    Added  LOAD DATE INFILE.. UPDATE  syntax.       For tables with primary keys, if the data contains the primary key, entries matching that primary key are updated from the remainder of the columns. However, columns MISSING from the incoming data feed are not touched.    For tables tables with primary keys that are missing some part of the key in the incoming data stream, or that have no primary key, the feed is treated as a  LOAD DATA INFILE ... REPLACE INTO  is now.       Make  LOAD DATA INFILE  understand syntax like:   LOAD DATA INFILE 'file_name.txt' INTO TABLE tbl_name TEXT_FIELDS (text_field1, text_field2, text_field3) SET table_field1=concatenate(text_field1, text_field2), table_field3=23 IGNORE text_field3  This can be used to skip over extra columns in the text file, or update columns based on expressions of the read data...        LOAD DATA INFILE 'file_name' INTO TABLE 'table_name' ERRORS TO err_table_name  This would cause any errors and warnings to be logged into the err_table_name table. That table would have a structure like:    line_number    - line number in data file error_message  - the error/warning message and maybe data_line      - the line from the data file       Add true  VARCHAR  support (There is already support for this in MyISAM).    Automatic output from  mysql  to netscape.     LOCK DATABASES . (with various options)    Change sort to allocate memory in ``hunks'' to get better memory utilization.     DECIMAL  and  NUMERIC  types can't read exponential numbers;  Field_decimal::store(const char *from,uint len)  must be recoded to fix this.    Functions: ADD_TO_SET(value,set) and REMOVE_FROM_SET(value,set)    Add use of  t1 JOIN t2 ON ...  and  t1 JOIN t2 USING ...  Currently, you can only use this syntax with  LEFT JOIN .    Add full support for  unsigned long long  type.    Many more variables for  show status .  Counts for:  INSERT / DELETE / UPDATE  statements. Records reads and updated.  Selects on 1 table and selects with joins.  Mean number of tables in select. Number of  ORDER BY  and  GROUP BY  queries.    If you abort  mysql  in the middle of a query, you should open another connection and kill the old running query. Alternatively, an attempt should be made to detect this in the server.    Add a handler interface for table information so you can use it as a system table. This would be a bit slow if you requested information about all tables, but very flexible.   SHOW INFO FROM tbl_name  for basic table information should be implemented.    Add support for UNICODE.     NATURAL JOIN  and  UNION JOIN     Allow  select a from crash_me left join crash_me2 using (a) ; In this case a is assumed to come from the crash_me table.    Fix that  ON  and  USING  works with the  JOIN  join type.    Oracle like  CONNECT BY PRIOR ...  to search hierarchy structures.     mysqladmin copy database new-database . -- Requires COPY command to be added to  mysqld     Processlist should show number of queries/thread.     SHOW HOSTS  for printing information about the hostname cache.     DELETE  and  REPLACE  options to the  UPDATE  statement (this will delete rows when one gets a duplicate key error while updating).    Change the format of  DATETIME  to store fractions of seconds.    Add all missing ANSI92 and ODBC 3.0 types.    Change table names from empty strings to  NULL  for calculated columns.    Don't use 'Item_copy_string' on numerical values to avoid number->string->number conversion in case of:  SELECT COUNT(*)*(id+0) FROM table_name GROUP BY id     Make it possible to use the new GNU regexp library instead of the current one (The GNU library should be much faster than the old one).    Change that  ALTER TABLE  doesn't abort clients that executes  INSERT DELAYED .    Fix that when columns referenced in an  UPDATE  clause contains the old values before the update started.     myisamchk ,  REPAIR  and  OPTIMIZE TABLE  should be able to handle cases where the data and/or index files are symbolic links.    Add simulation of  pread() / pwrite()  on Windows to enable concurrent inserts.    A logfile analyzer that could parsed out information about which tables are hit most often, how often multi-table joins are executed, etc.  It should help users identify areas or table design that could be optimized to execute much more efficient queries.    Add  SUM(DISTINCT)     Add  ANY() , EVERY()  and  SOME()  group functions. In ANSI SQL these only works on boolean columns, but we can extend these to work on any columns/expressions by applying: value == 0 -> FALSE and value <> 0 -> TRUE.    Fix that the type for  MAX(column)  is the same as the column type.   create table t1 (a DATE); insert into t1 values (now()); create table t2 select max(a) from t1; show columns from t2;       Come up with a nice syntax for a statement that will  UPDATE  the row if it exists and  INSERT  a new row if the row didn't exist. (Like  REPLACE  works with  INSERT  /  DELETE )       1.6.3  Things that have to be done sometime         Implement function:  get_changed_tables(timeout,table1,table2,...)     Atomic multi-table updates, eg  update items,month set items.price=month.price where items.id=month.id; ;    Change reading through tables to use memmap when possible. Now only compressed tables use memmap.    Add a new privilege  'Show_priv'  for  SHOW  commands.    Make the automatic timestamp code nicer.  Add timestamps to the update log with  SET TIMESTAMP=#;     Use read/write mutex in some places to get more speed.    Full foreign key support. One probably wants to implement a procedural language first.    Simple views (first on one table, later on any expression).    Automatically close some tables if a table, temporary table or temporary files gets error 23 (not enough open files).    When one finds a field=#, change all occurrences of field to #.  Now this is only done for some simple cases.    Change all const expressions with calculated expressions if possible.    Optimize key = expression. At the moment only key = field or key = constant are optimized.    Join some of the copy functions for nicer code.    Change  `sql_yacc.yy'  to an inline parser to reduce its size and get better error messages (5 days).    Change the parser to use only one rule per different number of arguments in function.    Use of full calculation names in the order part. (For ACCESS97)     UNION ,  MINUS ,  INTERSECT  and  FULL OUTER JOIN . (Currently only  LEFT OUTER JOIN  is supported)    Allow  UNIQUE  on fields that can be  NULL .     SQL_OPTION MAX_SELECT_TIME=#  to put a time limit on a query.    Make the update log to a database.    Negative  LIMIT  to retrieve data from the end.    Alarm around client connect/read/write functions.    Please note the changes to  safe_mysqld : according to FSSTND (which Debian tries to follow) PID files should go into  `/var/run/<progname>.pid'  and log files into  `/var/log' . It would be nice if you could put the ""DATADIR"" in the first declaration of ""pidfile"" and ""log"", so the placement of these files can be changed with a single statement.    Allow a client to request logging.    Add use of  zlib()  for  gzip -ed files to  LOAD DATA INFILE .    Fix sorting and grouping of  BLOB  columns (partly solved now).    Stored procedures.  This is currently not regarded to be very important as stored procedures are not very standardized yet. Another problem is that true stored procedures make it much harder for the optimizer and in many cases the result is slower than before We will, on the other hand, add a simple (atomic) update language that can be used to write loops and such in the MySQL server.    Change to use semaphores when counting threads.  One should first implement a semaphore library to MIT-pthreads.    Don't assign a new  AUTO_INCREMENT  value when one sets a column to 0. Use  NULL  instead.    Add full support for  JOIN  with parentheses.    As an alternative for one thread / connection manage a pool of threads to handle the queries.    Allow one to get more than one lock with  GET_LOCK .  When doing this, one must also handle the possible deadlocks this change will introduce.      Time is given according to amount of work, not real time.        1.6.4  Some things we don't have any plans to do         Nothing;  In the long run we plan to be fully ANSI 92 / ANSI 99 compliant.       2  MySQL Installation             This chapter describes how to obtain and install MySQL:          For a list of sites from which you can obtain MySQL, see section  2.2.1  How to Get MySQL .     To see which platforms are supported, see section  2.2.2  Operating Systems Supported by MySQL . Please note that not all supported system are equally good for running MySQL on them. On some it is much more robust and efficient than others - see  section  2.2.2  Operating Systems Supported by MySQL  for details.     Several versions of MySQL are available in both binary and source distributions.  We also provide public access to our current source tree for those who want to see our most recent developments and help us test new code.  To determine which version and type of distribution you should use, see section  2.2.3  Which MySQL Version to Use . When in doubt, use the binary distribution.     Installation instructions for binary and source distributions are described in section  M.1  Installing a MySQL Binary Distribution  and section  2.3  Installing a MySQL Source Distribution .  Each set of instructions includes a section on system-specific problems you may run into.     For post-installation procedures, see section  2.4  Post-installation Setup and Testing .  These procedures apply whether you install MySQL using a binary or source distribution.       2.1  Quick Standard Installation of MySQL      2.1.1  Installing MySQL on Linux              The recommended way to install MySQL on Linux is by using an RPM file. The MySQL RPMs are currently being built on a RedHat Version 6.2 system but should work on other versions of Linux that support  rpm  and use  glibc .      If you have problems with an RPM file, for example, if you receive the error `` Sorry, the host 'xxxx' could not be looked up '', see section  2.6.1.1  Linux Notes for Binary Distributions .      The RPM files you may want to use are:        MySQL-VERSION.i386.rpm   The MySQL server.  You will need this unless you only want to connect to a MySQL server running on another machine.   MySQL-client-VERSION.i386.rpm   The standard MySQL client programs. You probably always want to install this package.   MySQL-bench-VERSION.i386.rpm   Tests and benchmarks. Requires Perl and msql-mysql-modules RPMs.   MySQL-devel-VERSION.i386.rpm   Libraries and include files needed if you want to compile other MySQL clients, such as the Perl modules.   MySQL-VERSION.src.rpm   This contains the source code for all of the above packages. It can also be used to try to build RPMs for other architectures (for example, Alpha or SPARC).      To see all files in an RPM package, run:   shell> rpm -qpl MySQL-VERSION.i386.rpm      To perform a standard minimal installation, run:      shell> rpm -i MySQL-VERSION.i386.rpm MySQL-client-VERSION.i386.rpm      To install just the client package, run:      shell> rpm -i MySQL-client-VERSION.i386.rpm      The RPM places data in  `/var/lib/mysql' . The RPM also creates the appropriate entries in  `/etc/rc.d/'  to start the server automatically at boot time.  (This means that if you have performed a previous installation, you may want to make a copy of your previously installed MySQL startup file if you made any changes to it, so you don't lose your changes.)      After installing the RPM file(s), the  mysqld  daemon should be running and you should now be able to start using MySQL. See section  2.4  Post-installation Setup and Testing .      If something goes wrong, you can find more information in the binary installation chapter. See section  M.1  Installing a MySQL Binary Distribution .        2.1.2  Installing MySQL on Windows     The following instructions apply to precompiled binary distributions. If you download a source distribution, you will have to compile and install it yourself.      If you don't have a copy of the MySQL distribution, you should  first download one from  http://www.mysql.com/downloads/mysql-3.23.html .      If you plan to connect to MySQL from some other program, you will probably also need the  MyODBC  driver. You can find this at the  MyODBC  download page ( http://www.mysql.com/downloads/api-myodbc.html ).      To install either distribution, unzip it in some empty directory and run the  Setup.exe  program.      By default, MySQL-Windows is configured to be installed in  `C:\mysql' .  If you want to install MySQL elsewhere, install it in  `C:\mysql'  first, then move the installation to where you want it.  If you do move MySQL, you must indicate where everything is located by supplying a  --basedir  option when you start the server.  For example, if you have moved the MySQL distribution to  `D:\programs\mysql' , you must start  mysqld  like this:      C:\> D:\programs\mysql\bin\mysqld --basedir D:\programs\mysql      Use  mysqld --help  to display all the options that  mysqld  understands!      With all newer MySQL versions, you can also create a  `C:\my.cnf'  file that holds any default options for the MySQL server.  Copy the file  `\mysql\my-xxxxx.cnf'  to  `C:\my.cnf'  and edit it to suit your setup.  Note that you should specify all paths with  `/'  instead of  `\' . If you use  `\' , you need to specify it twice, because  `\'  is the escape character in MySQL.  See section  4.1.2  my.cnf Option Files .      Starting with MySQL 3.23.38, the Windows distribution includes both the normal and the  MySQL-Max  binaries.  The main benefit of using the normal  mysqld.exe  binary is that it's a little faster and uses less resources.      Here is a list of the different MySQL servers you can use:       mysqld    Compiled with full debugging and automatic memory allocation checking, symbolic links, BDB and InnoDB tables.    mysqld-opt    Optimized binary with no support for transactional tables.    mysqld-nt    Optimized binary for NT with support for named pipes. You can run this version on Win98, but in this case no named pipes are created and you must have TCP/IP installed.    mysqld-max    Optimized binary with support for symbolic links, BDB and InnoDB tables.    mysqld-max-nt    Like  mysqld-max , but compiled with support for named pipes.        Starting from 3.23.50, named pipes are only enabled if mysqld is started with  --enable-named-pipe .      All of the above binaries are optimized for the Pentium Pro processor but should work on any Intel processor >= i386.      NOTE: If you want to use InnoDB tables, there are certain startup options that must be specified in your  `my.ini'  file! See section  7.6.2  InnoDB startup options .        2.2  General Installation Issues      2.2.1  How to Get MySQL                      Check the   MySQL home page  for information about the current version and for downloading instructions.      Our main download mirror is located at:       http://download.sourceforge.net/mirrors/mysql/       If you are interested in becoming a MySQL mirror site, you may anonymously rsync with:  rsync://download.sourceforge.net/mysql/ .  Please send e-mail to  webmaster@mysql.com  notifying us of your mirror to be added to the list below.      If you have problems downloading from our main site, try using one of the mirrors listed below.      Please report bad or out-of-date mirrors to  webmaster@mysql.com .        Europe:              Austria [Univ. of Technology/Vienna]    WWW    FTP        Bulgaria [online.bg/Sofia]    WWW    FTP        Czech Republic [Masaryk University in Brno]    WWW    FTP        Czech Republic [www.sopik.cz]    WWW        Czech Republic [www.gin.cz]    WWW"
GX244-12-15589949	DATABASE PRIVILEGES                                 Connect           Allows access to database tables  without  permission to create            permanent tables.  This is the privilege that D.O.L. has given            to users on UIDB.                       Resource           Allows access to database tables  with          permission to create permanent tables.  This         privilege can be granted to others when you create a         database of your own.  No states have this privilege         on UIDB.                        DBA           Allows full administrator privileges.  This can         be granted to others on databases you create.               To determine database privileges, go to Query Language, New and enter:          SELECT * FROM SYSUSERS               To alter database privileges go to Query Language, New and enter:          GRANT  privilege          TO PUBLIC             (grants privilege to everyone - For  privilege ,         use Connect, Resource or DBA)        GRANT  privilege          TO  user                       (grants privilege to a user or list of users         separated by commas)                                       Page modified: 26-Sep-03  [ Home Page ][ Search ]   mdes.webmaster@state.mn.us
GX244-16-2979924	TABLE PRIVILEGES                                 Alter:            Allows users to add or delete columns or modify data         types of columns                       Delete:            Allows users to delete rows in a table                       Index:            Allows users to create indexes.                        Insert:            Allows users to insert new rows.                        Select:            Allows users to retrieve data or search the database                       Update:            Allows users to change values in the database                       All:            All of the above privileges except Alter.               To determine Table privileges, go to Table, Info, table_name, Privileges    To alter table privileges go to Query Language, New and enter:          GRANT  privilege          ON  tablename           TO PUBLIC            (grants privilege to everyone - For  privilege ,         use Alter, Delete, Index....)        GRANT  privilege          ON  tablename          TO  user                (grants privilege to a user or list of users         separated by commas)                               Page modified: 26-Sep-03  [ Home Page ][ Search ]   mdes.webmaster@state.mn.us
GX244-30-2712068	"Access Privileges       Database Privileges:                       Connect:               Allows access to database tables  without  permission to create permanent     tables.  This is the privilege that D.O.L. has given to users on UIDB.                     Resource:               Allows access to database tables  with  permission to create permanent     tables.  This privilege can be granted to others when you create a database     of your own.  No states have this privilege on UIDB.                 DBA:               Allows full administrator privileges.  This can be granted to others     on databases you create.                     Syntax:               GRANT  privilege  TO PUBLIC    (grants privilege to everyone     - For  privilege , use Connect, Resource or DBA)         GRANT  privilege  TO  user                (grants privilege to a user or list of users separated by commas)         Table Privileges:                       Alter:               Allows users to add or delete columns or modify data types of columns.                 Delete:               Allows users to delete rows in a table.                 Index:               Allows users to create indexes.                 Insert:               Allows users to insert new rows.                 Select:               Allows users to retrieve data or search the database.                 Update:               Allows users to change values in the database.                 All:               All of the above privileges except Alter.                          Syntax:          GRANT  privilege  ON  tablename   TO PUBLIC   (grants     privilege to everyone - For  privilege , use Alter, Delete, Index....)         GRANT  privilege  ON  tablename  TO  user                (grants privilege to a user or list of users separated by commas)              With Grant Option:          Add this statement to grant the stated privilege  with  the authority     for that user to grant others that same privilege.              Select and Update privileges can be limited to specified columns only.            To View privileges:                       Database Privileges:               You must run an SQL statement:             SELECT * FROM SYSUSERS         Sysusers is a system catalog that stores information on database privileges.      You can select information from columns just like a table in UIDB.                     Table Privileges:               Table privileges can be viewed thru the table menu.             Table, Info,  table_name,  Privileges           UIDB Specific Privileges:             Public has been granted connect privileges to UIDB.  This means they     cannot change the structure of UIDB, however, they might be able to look     at or change the data based on the privileges of the tables.  All editing     of BAM (BQC) data must be done through the menu with the exception of the     b_gen tables.  Privileges on BAM tables are maintained through the D.O.L.     menu by the Staff Table (b_uaf) under Environment Settings.  The     b_stateoption and b_eroption tables can only be altered through the ui menu     by staff with the authority.  The b_gen tables can be altered by the     user ""data"".  The user ""data"" can grant others permission to add rows     of data but only the user ""data"" can  alter  the b_gen tables.             Privileges with TPS (RQC) is controlled by the c_security table and the user     group ""rqc"". Both are maintained by the SPARC System Administrator.      Permissions with UIRR (Required Reports) are maintained by the user     groups ""uidbadm"", ""uidbapr"", and ""uidbusr"".  The SPARC System Administrator     can place the users in the appropriate group(s).  In general, ""public""     has select permission on the TPS and UIRR tables but not the BAM tables.       Page modified: 21-Dec-00  [ Home Page ][ Search ]   mdes.webmaster@state.mn.us"
GX034-68-13012405	"Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.                         From:  Michael Helm ( helm@fionn.es.net )   Date:  Tue Aug 19 2003 - 10:42:24 PDT        Next message:   William E. Johnston: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Previous message:   William E. Johnston: ""[doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   In reply to:   William E. Johnston: ""[doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""     Next in thread:   William E. Johnston: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Reply:   William E. Johnston: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""     Messages sorted by:    [ date ]   [ thread ]   [ subject ]   [ author ]   [ attachment ]          ""William E. Johnston"" writes:    > I don't know if we ever registered the name www.doesg.org or doesg.org,    ""Von Welch"" writes:    >    > As I recall, Scott Studham set up this alias a while back to spare us    > the long www.doesciencegrid.org typing.    Took me a while to find it, perhaps in doe sg mail  archives too:   [maybe the registration lapsed?]    ###From  owner-doe-sg@george.lbl.gov   Fri Nov 30 11:22:12 2001   ###Received: from portnoy.lbl.gov (portnoy.lbl.gov [131.243.2.11])   ### by fionn.es.net (LBNLMWH19/LBNLMWH11/ESOCF2) with ESMTP id LAA23648   ### for < helm@fionn.es.net >; Fri, 30 Nov 2001 11:22:11 -0800 (PST)   ###Received: (from daemon@localhost)   ### by portnoy.lbl.gov (8.11.6/8.11.6) id fAUJMAF11322   ### for doe-sg-eng-list; Fri, 30 Nov 2001 11:22:10 -0800 (PST)   ###Date: Fri, 30 Nov 2001 11:21:55 -0800   ###From: ""Studham, R. Scott"" < Scott.Studham@pnl.gov >   ###Subject: Merry Christmas, Hannukah, Ramadan, Quanza, and Happy New Year   ###To:  doe-sg-eng@george.lbl.gov    ###Message-id: < 202822BFB70EBC4BB3EAFD853EE2B6BFE41427@pnlmse10.pnl.gov >   ###MIME-version: 1.0   ###X-Mailer: Internet Mail Service (5.5.2650.21)   ###Content-type: text/plain   ###Sender:  owner-doe-sg@george.lbl.gov    ###Precedence: bulk   ###Reply-To: ""Studham, R. Scott"" < Scott.Studham@pnl.gov >    A personal gift from me to you:   www.doesg.org    I was getting carpal tunnel typing in doesciencegrid.org.      It's still propagating so it might not be up until tomorrow.            Next message:   William E. Johnston: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Previous message:   William E. Johnston: ""[doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   In reply to:   William E. Johnston: ""[doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""     Next in thread:   William E. Johnston: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Reply:   William E. Johnston: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""     Messages sorted by:    [ date ]   [ thread ]   [ subject ]   [ author ]   [ attachment ]          This archive was generated by  hypermail 2.1.6   : Wed Aug 20 2003 - 02:15:27 PDT"
GX045-51-10899877	"[doe-sg-eng] www.doesg.org has been hijacked or counterfeited.                           From:  William E. Johnston ( wejohnston@lbl.gov )   Date:  Tue Aug 19 2003 - 08:55:28 PDT        Next message:   Michael Helm: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Previous message:   Von Welch: ""Re: [doe-sg-eng] www.doesg.org""   In reply to:   Michael Helm: ""[doe-sg-eng] www.doesg.org""     Next in thread:   Michael Helm: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Reply:   Michael Helm: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Maybe reply:   Studham, R Scott: ""RE: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""     Messages sorted by:    [ date ]   [ thread ]   [ subject ]   [ author ]   [ attachment ]          Re: www.doesg.org    Apparently someone has stolen one of our Web pages and installed   it on a bogus site, substituting pornographic links behind   some of our content.    I don't know if we ever registered the name www.doesg.org or doesg.org,   but at the moment it points to an address that has nothing to do   with us.    If we did register that name (Craig L. can you check on this)   then someone has hijacked the DNS entry.    Bill    [root@portnoy]# nslookup www.doesg.org   Server:         127.0.0.1   Address:        127.0.0.1#53    Non-authoritative answer:   Name:   www.doesg.org   Address: 66.111.63.62    [root@portnoy]# dig www.doesg.org    ; <<>> DiG 9.2.2 <<>> www.doesg.org   ;; global options:  printcmd   ;; Got answer:   ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 45503   ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 0    ;; QUESTION SECTION:   ;www.doesg.org.                 IN      A    ;; ANSWER SECTION:   www.doesg.org.          13902   IN      A       66.111.63.62    ;; AUTHORITY SECTION:   doesg.org.              86358   IN      NS      NS2.UNMD.NET.   doesg.org.              86358   IN      NS      NS1.UNMD.NET.    ;; Query time: 1 msec   ;; SERVER: 127.0.0.1#53(127.0.0.1)   ;; WHEN: Tue Aug 19 08:43:04 2003   ;; MSG SIZE  rcvd: 91            Next message:   Michael Helm: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Previous message:   Von Welch: ""Re: [doe-sg-eng] www.doesg.org""   In reply to:   Michael Helm: ""[doe-sg-eng] www.doesg.org""     Next in thread:   Michael Helm: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Reply:   Michael Helm: ""Re: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""   Maybe reply:   Studham, R Scott: ""RE: [doe-sg-eng] www.doesg.org has been hijacked or counterfeited.""     Messages sorted by:    [ date ]   [ thread ]   [ subject ]   [ author ]   [ attachment ]          This archive was generated by  hypermail 2.1.6   : Thu Aug 21 2003 - 02:15:29 PDT"
GX025-02-16112687	Travel            & Geography              Travel            to the United States  |  The States & Territories             |             The Regions of the United States  |  Facts            & Statistics                                                                                The            States, Districts and Territories of the United States              > Puerto Rico                                                                  Flag                                                           Puerto Rico.     American     FactFinder (U.S. Census)                                                   Puerto Rico                                             Puerto Rico is a            commonwealth associated with the United States. Discovered by Columbus            in 1493, the island was ceded by Spain to the US in 1898 following the            Spanish-American War. A popularly elected governor has served since            1948. In plebiscites held in 1967 and 1993, voters chose to retain commonwealth            status. The Commonwealth of Puerto Rico is located in the Caribbean            Sea, about 1,000 miles east-southeast of Miami, Florida. A possession            of the United States, it consists of the island of Puerto Rico plus            the adjacent islets of Vieques, Culebra, and Mona.           Puerto Rico has            one of the most dynamic economies in the Caribbean region. A diverse            industrial sector has surpassed agriculture as the primary locus of            economic activity and income. Encouraged by duty-free access to the            US and by tax incentives, US firms have invested heavily in Puerto Rico            since the 1950s. US minimum wage laws apply. Sugar production has lost            out to dairy production and other livestock products as the main source            of income in the agricultural sector. Tourism has traditionally been            an important source of income for the island, with estimated arrivals            of nearly 5 million tourists in 1999. Prospects for 2000 are good, assuming            continued strength in the tourism and construction sectors and continuation            of the US boom.            Under the Commonwealth            formula, residents of Puerto Rico lack voting representation in Congress            and the right to participate in presidential elections. Also, funding            caps limit their access to several key federal programs. As U.S. citizens,            Puerto Ricans are subject to military service and most federal laws.                       Puerto Rico ist            ein mit den USA verbundenes Commonwealth. Entdeckt wurde die Insel von            Columbus 1493. Im Jahr 1898, nach dem Ende des Spanisch-Amerikanischen            Krieges, wurde die Insel an die USA abgetreten. Ein von der Bevölkerung            gewählter Gouverneur dient seit 1948. Bei Volksabstimmungen in            den Jahren 1967 und 1993 beschlossen die Wähler, den Status als            Commonwealth beizubehalten. Das Commonwealth of Puerto Rico liegt in            der Karibik, rund 1.000 Meilen ost-südost von Miami, Florida. Der            Besitz der Vereinigten Staaten besteht aus der Insel Puerto Rico und            den benachbarten kleinen Inseln Vieques, Culebra und Mona.           Puerto Rico hat            eine der am schnellsten wachsenden Wirtschaften in der Karibik. Eine            vielfältige Industrie hat die Landwirtschaft als Hauptaspekt der            wirtschaftlichen Tätigkeiten und des Einkommens überholt.            Amerikanische Firmen haben, angelockt durch zollfreien Zugang zu den            USA und Steuervorteilen, seit den 1950er Jahren kräftig in Puerto            Rico investiert. Die amerikanischen Mindestlohngesetze haben Gültigkeit.            Die Zuckerproduktion ist hinter die Herstellung von Milchprodukten und            anderen Tierprodukten als Haupteinnahmequelle im landwirtschaftlichen            Sektor zurückgefallen. Tourismus war schon immer eine wichtigte            Einkommensquelle auf der Insel. 1999 kamen etwa 5 Millionen Touristen.            Die Aussichten für 2000 sind gut, vorausgesetzt es gibt keine Einbrüche            beim Tourismus und in der Bauindustrie und eine Fortsetzung der guten            Entwicklung der Wirtschaft in den USA.           Im Rahmen der            Organisation des Commonwealth sind die Einwohner Puerto Ricos nicht            durch wahlberechtigte Repräsentanten im Kongress vertreten. Sie            dürfen auch nicht bei den Präsidentschaftwahlen wählen.            Ferner gibt es bei einigen zentralen Bundesprogrammen Ausgabenbeschränkungen.            Als amerikanische Bürger sind Puerto Ricaner militärpflichtig            und unterstehen den meisten Bundesgesetzen.            GOVERNMENT             Country name (conventional long form):  Commonwealth            of Puerto Rico               Capital:             San Juan                         Governor:  Sila María Calderón (2001)              House            of Representatives:  Congressional            Delegate                 STATISTICS                     Population:  3,957,988 (July          2002 est.); average annual rate of natural increase: 0.5%             Land Area:   3,515          sq. mi. (9,104 sq. km)           Other large cities (1990):  Bayamón,          220,262; Ponce, 190,900; Carolina, 177,806              ECONOMY              GDP:  purchasing power parity - $43.9            billion (2001 est.); per capita $11,200 (2001).            Exports (2000):  $38.5 billion f.o.b.               Agriculture:              Sugarcane, coffee, pineapples, plantains, bananas, livestock products,            chickens               Industry:  Pharmaceuticals, electronics, apparel, food products;            tourism                                                                   Government             ·               Puerto Rico Official Homepage                                        ·              Project VoteSmart              ·               State            and Local Government on the Internet  (Piper Resources)                          Statistics              ·               U.S.            Census Bureau: 2000 Data for the State of Puerto Rico             Background              ·             CIA            World Factbook             ·             InfoPlease                         ·             Encarta             Orginial Documents             ·             Puerto            Rico at the Dawn of the Modern Age   (Library            of Congress)             Travel               ·               Puerto Rico: Tourism Office             ·             Escape            to Puerto Rico.com             ·             Welcome            to Puerto Rico.org             Teacher Resources                         ·             ProTeacher:            Lessons by State: Puerto Rico                Link Lists                          ·    Puerto            Rico  (Yahoo)              ·               GovEngine.com:            Federal, State & Local Government Site                                           Download             FREE Adobe Acrobat© Reader to view PDF files on this site. Adobe PDF             Conversion by Simple Form                                                        DISCLAIMER              Any reference obtained from this server to a specific    commercial product, process, or service does not constitute or imply an    endorsement by the United States Government of the product, process, or    service, or its producer or provider. The views and opinions expressed    in any referenced document do not necessarily state or reflect those of the United States Government.                                  U.S. Diplomatic Mission to Germany            /Public Affairs/ Information Resource Centers              Updated: June 2003
GX029-93-7247433	Travel            & Geography              Travel            to the United States  |  The States & Territories             |             The Regions of the United States  |  Facts            & Statistics                                                                The            States, Districts and Territories of the United States              > Puerto Rico                                                                  Flag                                                           Puerto Rico.     American     FactFinder (U.S. Census)                                                   Puerto Rico                                             Puerto Rico is a            commonwealth associated with the United States. Discovered by Columbus            in 1493, the island was ceded by Spain to the US in 1898 following the            Spanish-American War. A popularly elected governor has served since            1948. In plebiscites held in 1967 and 1993, voters chose to retain commonwealth            status. The Commonwealth of Puerto Rico is located in the Caribbean            Sea, about 1,000 miles east-southeast of Miami, Florida. A possession            of the United States, it consists of the island of Puerto Rico plus            the adjacent islets of Vieques, Culebra, and Mona.           Puerto Rico has            one of the most dynamic economies in the Caribbean region. A diverse            industrial sector has surpassed agriculture as the primary locus of            economic activity and income. Encouraged by duty-free access to the            US and by tax incentives, US firms have invested heavily in Puerto Rico            since the 1950s. US minimum wage laws apply. Sugar production has lost            out to dairy production and other livestock products as the main source            of income in the agricultural sector. Tourism has traditionally been            an important source of income for the island, with estimated arrivals            of nearly 5 million tourists in 1999. Prospects for 2000 are good, assuming            continued strength in the tourism and construction sectors and continuation            of the US boom.            Under the Commonwealth            formula, residents of Puerto Rico lack voting representation in Congress            and the right to participate in presidential elections. Also, funding            caps limit their access to several key federal programs. As U.S. citizens,            Puerto Ricans are subject to military service and most federal laws.                       Puerto Rico ist            ein mit den USA verbundenes Commonwealth. Entdeckt wurde die Insel von            Columbus 1493. Im Jahr 1898, nach dem Ende des Spanisch-Amerikanischen            Krieges, wurde die Insel an die USA abgetreten. Ein von der Bevölkerung            gewählter Gouverneur dient seit 1948. Bei Volksabstimmungen in            den Jahren 1967 und 1993 beschlossen die Wähler, den Status als            Commonwealth beizubehalten. Das Commonwealth of Puerto Rico liegt in            der Karibik, rund 1.000 Meilen ost-südost von Miami, Florida. Der            Besitz der Vereinigten Staaten besteht aus der Insel Puerto Rico und            den benachbarten kleinen Inseln Vieques, Culebra und Mona.           Puerto Rico hat            eine der am schnellsten wachsenden Wirtschaften in der Karibik. Eine            vielfältige Industrie hat die Landwirtschaft als Hauptaspekt der            wirtschaftlichen Tätigkeiten und des Einkommens überholt.            Amerikanische Firmen haben, angelockt durch zollfreien Zugang zu den            USA und Steuervorteilen, seit den 1950er Jahren kräftig in Puerto            Rico investiert. Die amerikanischen Mindestlohngesetze haben Gültigkeit.            Die Zuckerproduktion ist hinter die Herstellung von Milchprodukten und            anderen Tierprodukten als Haupteinnahmequelle im landwirtschaftlichen            Sektor zurückgefallen. Tourismus war schon immer eine wichtigte            Einkommensquelle auf der Insel. 1999 kamen etwa 5 Millionen Touristen.            Die Aussichten für 2000 sind gut, vorausgesetzt es gibt keine Einbrüche            beim Tourismus und in der Bauindustrie und eine Fortsetzung der guten            Entwicklung der Wirtschaft in den USA.           Im Rahmen der            Organisation des Commonwealth sind die Einwohner Puerto Ricos nicht            durch wahlberechtigte Repräsentanten im Kongress vertreten. Sie            dürfen auch nicht bei den Präsidentschaftwahlen wählen.            Ferner gibt es bei einigen zentralen Bundesprogrammen Ausgabenbeschränkungen.            Als amerikanische Bürger sind Puerto Ricaner militärpflichtig            und unterstehen den meisten Bundesgesetzen.            GOVERNMENT             Country name (conventional long form):  Commonwealth            of Puerto Rico               Capital:             San Juan                         Governor:  Sila María Calderón (2001)              House            of Representatives:  Congressional            Delegate                 STATISTICS                     Population:  3,957,988 (July          2002 est.); average annual rate of natural increase: 0.5%             Land Area:   3,515          sq. mi. (9,104 sq. km)           Other large cities (1990):  Bayamón,          220,262; Ponce, 190,900; Carolina, 177,806              ECONOMY              GDP:  purchasing power parity - $43.9            billion (2001 est.); per capita $11,200 (2001).            Exports (2000):  $38.5 billion f.o.b.               Agriculture:              Sugarcane, coffee, pineapples, plantains, bananas, livestock products,            chickens               Industry:  Pharmaceuticals, electronics, apparel, food products;            tourism                                                                   Government             ·               Puerto Rico Official Homepage                                        ·              Project VoteSmart              ·               State            and Local Government on the Internet  (Piper Resources)                          Statistics              ·               U.S.            Census Bureau: 2000 Data for the State of Puerto Rico             Background              ·             CIA            World Factbook             ·             InfoPlease                         ·             Encarta             Orginial Documents             ·             Puerto            Rico at the Dawn of the Modern Age   (Library            of Congress)             Travel               ·               Puerto Rico: Tourism Office             ·             Escape            to Puerto Rico.com             ·             Welcome            to Puerto Rico.org             Teacher Resources                         ·             ProTeacher:            Lessons by State: Puerto Rico                Link Lists                          ·    Puerto            Rico  (Yahoo)              ·               GovEngine.com:            Federal, State & Local Government Site                                           Download             FREE Adobe Acrobat© Reader to view PDF files on this site. Adobe PDF             Conversion by Simple Form                                                        DISCLAIMER              Any reference obtained from this server to a specific    commercial product, process, or service does not constitute or imply an    endorsement by the United States Government of the product, process, or    service, or its producer or provider. The views and opinions expressed    in any referenced document do not necessarily state or reflect those of the United States Government.                                  U.S. Diplomatic Mission to Germany            /Public Affairs/ Information Resource Centers              Updated: June 2003
GX029-51-14367100	"Regierung              & Politik               Einführung               |                  Verfassung  |  Exekutive               |  Legislative  |  Judikative               I               Bundesstaaten  |   Städte & Gemeinden               |  Politische Parteien  |  Wahlen               I               Hauptstadt    Washington, D.C               |  Flagge  |  Nationalhymne               |  Staatswappen   I               Treueschwur                                                                            Regierung          & Politk > Flagge                                                                                                                                     E-Texte                                                       Celebrate                Flag Day                                          The                Flag of the United States: The Stars and Stripes                                          Flag                Protection: A Brief History and Summary of Recent Supreme Court Decisions                and Proposed Constitutional Amendment                                          Guidelines                for Display of the Flag                                          The                Origin of Flag Day                                            Our                  Flag                                                           The                United States Flag                                         The                United States Flag:  (CRS Report)                                  Die ""Stars and Stripes""            haben ihren Ursprung in einer Resolution des ""Second Continental Congress""            in Philadelphia am 14. Juni 1777. Die Resolution lautet:                        ""Es sei beschlossen, dass die Flagge der Vereinigten Staaten dreizehn            Streifen, abwechselnd rot und weiss, haben soll; dass die Union dreizehn            Sterne, weiss auf einem blauen Feld, eine neue Konstellation sein sollen.""                        Die Resolution gab keinen Hinweis darauf, wieviele Zacken die Sterne haben            sollten noch wie die Sterne auf dem blauen Hintergrund angeordnet werden            sollten. Darausfolgend ergaben sich viele verschiedene Variationen. Während            des Unabhängigkeitskrieges stellten mehrere Patrioten Flaggen für            die neue Nation her. Betsy Ross ist die bekannteste unter ihnen, aber es            gibt keinen Beweis, dass sie wirklich die erste Fahne herstellte.                        Erst am 4. April 1818 stimmte Präsident Monroe einem Gesetzesvorschlag            zu, in dem festgelegt wurde, wie das Grunddesign der Flagge sein muss, damit            die Vergrößerung des Landes angemessen symbolisiert würde.            Es erforderte, dass die Flagge der Vereinigten Staaten eine Einheit von            zwanzig Sternen, weiss auf einem blauen Untergrund, habe. Wann immer ein            neuer Staat dazukäme, sollte ein weiterer Stern zu der Einheit hinzugefügt            werden, und zwar am vierten Juli nach dem Beitritt des Staates. Die abwechselnd            roten und weissen Streifen würden unverändert bleiben.                        1916 verkündetete Präsident Woodrow Wilson, dass im ganzen Land            am 14. Juni, dem Geburtstag der ""Star and Stripes"", der ""Flag            Day"" gefeiert werden solle. Der Kongress hat die permanente Einhaltung            dieser Proklamation erst 1949 beschlossen.                       Siehe          auch:          About the USA > U.S. Regierung >  Nationalhymne                      About          the USA > U.S. Regierung >  Treueschwur                                    Auszug            aus Publikationen des  State            Department/IIP  und anderen U.S. Regierungsquellen.                                                Hintergrund                         ·             The Betsy Ross Homepage              (Independence Hall Association)            ·  Facts            About the United States Flag  (Encyclopedia Smithsonian)            ·  The            Flag of the United States of America  (Duane Streufert. US flag.org)             ·             Die Geschichte            der amerikanischen Flagge              (MagazinUSA.com)  Deutsch              ·             National            Flag Day Foundation             ·             Our            Flag  (American Legion)             ·              Our            Flag  (Federal Citizen Information Center)             ·             The Star-Spangled            Banner .            The Flag that Inspired the National Anthem             (Smithsonian)             ·             Today            in History: June 14 - Flag Day  (American Memory. Library of Congress)             ·             Unoffical            American Flag Homepage  (Dick Grogan)             ·             USA Flag Site                        Originaldokumente                         ·               Federal            Flag Code               (Baltimore County Public Library)             ·               U.S.            Flag Code  (Legal Information Institute. Cornell University Law School)                                    Ausstellungen - Digitale Bilder             ·             Betsy            Ross House  (Indepedence Hall Association)             ·             Fort            McHenry  (The Patriots of Fort McHenry)             ·             Fort            McHenry National Monument and Historic Shrine  (National Park Service)                         ·             The            Star-Spangled Banner  (National Museum of American History)             ·             Star-Spangled Banner Flag House            and War of 1812 Museum.             Baltimore, MD                                                                   Für Schüler                          ·             The            American Flag  (Chris Witten. FoundingFathers.i nfo)                                      ·             Educational            Materials  (National Flag Day Foundation)                         ·  The            History of the U.S. Flag  (Fact Monster)             ·   Symbols            of U.S. Government: The Flag  (Ben's Guide to U.S. Government for Kids)             ·             The            United States Flag - Symbol of Our Freedom  (C. Douglas Sterner. Home            of Heroes.com )                                      Lehrermaterialien                             ·    Lesson            Plans Flag Day   (Education World)             ·    Mary            Pickersgill and the Making of the Star-Spangled Banner  (National Flag            Day Foundation)             ·    Oh            Say, Can You See -What the Star-Spangled Banner Means?   (Edsitement)             ·    Save            our History: The Star-Spangled Banner Project  (History Channel)             ·    Stars            and Stripes Forever: Flag Facts for Flag Day  (EdSitement)                       Linksammlungen                         ·  The            American Flag . Link List (The Electric Teacher Pages)               ·  National            Symbols > American Flag  (Yahoo!)                                                             Benutzen            Sie den Adobe Acrobat© Reader um die PDF-Dokumente auf dieser Seite lesen            zu können.                                                      HINWEIS           Verweise dieses Servers auf bestimmte Produkte oder          Dienste stellen keine Unterstützung der US-Regierung für das Produkt oder          dessen Produzenten bzw. Anbieter dar. Ansichten und Meinungen, die in den          Verweisdokumenten geäußert werden, entsprechend nicht zwingend denen der US-Regierung          und spiegeln diese auch nicht wider.                       U.S.          Diplomatic Mission to Germany            /Public Affairs/ Information Resource Centers              Aktualisiert: September 2003"
GX047-10-2595494	"Regierung              & Politik                Einführung               |                  Verfassung               |  Exekutive               |    Legislative               |  Judikative                                Bundesstaaten               |  Städte              & Gemeinden  |  Politische              Parteien  |  Wahlen                                            Hauptstadt Washington, D.C .               |  Flagge               |  Nationalhymne               |  Staatswappen               I  Treueschwur                                                                            Regierung          & Politik > Politische Parteien                                                                                                                                    E-Texte                                                       Outline                of U.S. Government: Political Parties                                         Political                Parties in the U.S. (from Electronic Journal U. S. Elections 2000)                                 Heute gibt es in den            Vereingten Staaten    zwei große            politische Parteien, die ""Demokraten"" und die ""Republikaner"".                        Die ""Demokratische Partei"" entwickelte sich aus der Partei Thomas            Jeffersons, die schon vor 1800 gegründet wurde. Die ""Republikanische            Partei"" wurde 1850 von Abraham Lincoln und anderen Gegnern der Ausweitung            der Sklaverei gegründet.                         Die Demokraten werden als die liberalere Partei angesehen und die Republikaner            als die eher konservative Partei. Demokraten glauben im allgemeinen, dass            die Regierung verpflichtet sei, soziale und wirtschaftliche Programme für            die Bedürftigen             bereitzustellen. Republikaner sind nicht            unbedingt gegen solche Programme, glauben aber, dass sie den Steuerzahler            zu viel kosten. Sie legen mehr Wert darauf, private Investitionen zu fördern,            in der Hoffnung, dass eine starke Privatwirtschaft die Bürger weniger            abhängig vom Staat macht.                         Beide grossen Parteien bekommen eine            Menge Unterstützung von einer Vielfalt von Amerikanern und vereinen            eine weitreichende Skala politischer Ansichten. Amerikaner müssen nicht            Parteimitglied sein, um zu wäehlen oder um selbst für ein Amt            zu kandidieren, aber es ist schwierig, sich für ein Amt zu bewerben            ohne das Geld und die freiwilligen Wahlhelfer, die eine Partei bereitstellt.                         Nach den Wahlen            1998 gab es nur einen einzigen Abgeordneten im Kongress, der als Unabhängiger            gewählt worden war, und nur 20 (0.003 %) der mehr als 7300 gewählten            Abgeordneten in den einzelstaatlichen Parlamenten waren weder Republikaner            noch Demokraten. Es sind diese zwei grossen Parteien, die die Regierungen            sowohl auf nationaler als auch auf einzelstaatlicher Ebene stellen.           Siehe auch:            About the USA >  Regierung            & Politik > Wahlen                        Auszug            aus Publikationen des  State            Department/IIP  und anderen U.S. Regierungsquellen.                                                            Hintergrund              ·             A            Brief History of American ""Major Parties"" and the ""Two Party            Systems"" in the United States   (The Green Papers)             ·  Democratic            Party               ·             Political            Parties  (Grolier Online)              ·              Political            Parties in the United States  (Encarta. MSN Learning and Research Page)                          ·                Republican Party                          Für Schüler             ·             Party            System  (American Memory. Library of Congress)              ·             What            Do Parties Stay For?  (Scholastic)                          Lehrermaterialien             ·              In            Praise of Political Parties  (Schools of California Online Resources            for Education)             ·              Third-Party            Politics  (U.S.News Classroom)                           Linksammlungen             ·              Contacting            National Political Parties  (National Political Index)             ·             Directory            of Political Parties  (Politics1.com)              ·             Political            Parties  (University of Michigan Library)             ·             Yahoo!            U.S. Political Parties                                                             Benutzen            Sie den Adobe Acrobat© Reader um die PDF-Dokumente auf dieser Seite lesen            zu können.                                                      HINWEIS           Verweise dieses Servers auf bestimmte Produkte oder          Dienste stellen keine Unterstützung der US-Regierung für das Produkt oder          dessen Produzenten bzw. Anbieter dar. Ansichten und Meinungen, die in den          Verweisdokumenten geäußert werden, entsprechend nicht zwingend denen der US-Regierung          und spiegeln diese auch nicht wider.                         U.S.            Diplomatic Mission to Germany              /Public Affairs/ Information Resource Centers                Aktualisiert: September 2003"
GX177-59-0501888	Displaying the Server  Authorizations        Use      You display the  list of  server authorizations  for the operator specified in  <user_name> .      Prerequisites      You have the server  authorization  UserMgm .      Syntax        user_getrights <user_name>       Example      Reply        OK<NL>    UserMgm                    <flag>    User  management   InstallMgm                 <flag>    Install  management   SystemCmd                  <flag>    System  commands   FileFull                   <flag>    File full  access   FileRead                   <flag>    File read  access   DBFileRead                 <flag>    Database file  read access   AccessUtility              <flag>    Utility  session access   BackupRestore              <flag>    Backup  restore actions   BackupSave                 <flag>    Backup save  actions   ParamFull                  <flag>    Parameter  full access   ParamCheckWrite            <flag>    Parameter  check-write access   ParamRead                  <flag>    Parameter  read access   AccessSQL                  <flag>    SQL session  access   ExecLoad                   <flag>    Can execute  load   LoadSysTab                  <flag>    Can load system tables   DBStop                     <flag>    Can stop  database   DBStart                    <flag>    Can start  database   DBInfoRead                 <flag>    Info  functions access      A plus symbol under   <flag>  indicates that the relevant server  authorization is assigned to the operator. A minus symbol under  <flag>  indicates that the relevant server  authorization is not assigned to the operator.      In the event of  errors, see  Reply Format .
GX188-90-15342556	The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Overview   Database Server   MaxDB   Control Center   Connector/J   Connector/ODBC   Connector/C++   MySQLGUI   Partners   Other Software                                                 MySQL Software:         Search           All categories   Administrators APIs Authentication Tools Benchmark tools Converters Design or Data Modeling Tools Functions Graphical Clients Miscellaneous Reporting tools Statistics tool User Definable Functions Using MySQL with other products Web Clients Web Tools         for                       Add item                Categories:   Administrators  /  APIs  /  Authentication Tools  /  Benchmark tools  /  Converters  /  Design or Data Modeling Tools  /  Functions  /  Graphical Clients  /  Miscellaneous  /  Reporting tools  /  Statistics tool  /  User Definable Functions  /  Using MySQL with other products  /  Web Clients  /  Web Tools                          License LGPL Platforms Any with a JVM Prog. Language Java          Publisher's site          Edit this item     Delete this item              SQuirreL SQL Client     ( Graphical Clients )   SQuirreL SQL Client is a graphical Java program that will allow you to view the structure of a JDBC compliant database, browse the data in tables, issue SQL commands etc. Version 1.0 requires JDK1.2 to work but prefers JDK1.3. while Version 1.1 and above requires JDK1.3.   User Comments   Add your own comment                 MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2004 MySQL AB. All rights reserved.
GX095-29-10585185	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                                 Next:   Usage    Up:   Introductory Material    Previous:   2. Overview         Contents            Subsections      3.1 Current Changes   3.2 Future Changes           3. Important Changes           3.1 Current Changes           Changed the syntax of equal_list for SSQLS from  equal_list (cchar *, Manip, cchar *)  to  equal_list (cchar *, cchar *, Manip) .    Since version 1.3 of mysql++, it can no longer be compiled and built by GNU compilers older then 2.95. Since version 1.3, mysql++ has been changed to accomodate changes in 2.95 on various aspects of C++. This prevents it's building with earlier versions of GNU , like 2.7.xx, 2.8.xx. Also building by egcs compilers 1.x.x is not supported any more. Although with some changes in code mysql++ could be built with earlier compilers, running of such programs would result in their crashing.    At the writting of the present version (1.7.9) g++ 2.95.3 and g++ 2.96 can not be used either    There are separate versions for Borland C++, VC++ and Compaq compilers on Tru64    It was also noted that on certain SPARC Solaris installation, C++ exceptions did not work with gcc 2.95.2. This case was tested and it is established that mysql++ builds and runs flawlessly with a following version of gcc on Solaris: gcc version 2.95 19990728 (release)    The ``connection'' constructors for  Connection  and  Connection::connect  (formally known as  Mysql ) has changed so that the data base name is the first paremeter. The same is valid for connect method.    All new client feature implemented in 3.22.xx as various options on connect are mplemented in a new constructor and real_connect method    Also new configuration constructs in 3.23.xx are strictly followed    Mysql++ now can be compiled on Win32 with use of Cygwin compiler from Cygnus Inc.    Autoconf and Automake are fully implemented    The Specialized SQL Structures (formally known as Custom Mysql Structures) changed from mysql_ to sql_.    Changed all of the functions that return zero (false) on success and non-zero (true) other wise to bool. This means that they now return true on success and false on faillier. This means that you now need to negate your expressions that test the output of these functions.     Almost all methods that returned MysqlString now return a normal string. Because  MysqlString  objects will convert them selves into string when needed there should not be a problem with:           MysqlString s = mysql.host_info         The data type  MysqlRow  now returns ( MysqlString  or  MysqlColData ) is now subclassed from a special string class that  we wrote to handle working with a const string in a much more efficient way (ie it doesn't copy it). Unfortunitlly this data type is also more limited see the section on ""const_string"" for more info.    All necessary methods pertaining to the administration funcitons have been added    Mysql++ now quotes and escapes objects automatically, if column data is used with '<<' operator    Mysql++ now has much more secure execution of INSERT, UPDATE and DELETE with a new exec() method    Mysql++ now has much better configuration    There is a new method of fetching strings    Mysql++ can now work with binary data    Standard C++ exceptions handling with what() method has been introduced    All 64 int handling of string conversions have been moved to libmysqlclient     Programs written with MySQL++ will now automatically read all relevant MySQL configuration files           3.2 Future Changes           To implement fully mutable result sets     The behavior of MysqlString when used with binary operators is going to change in a future version (if  we can figure out how to pull it off) Instead of converting to the type on the other side of the operator the MysqlString will it convert to the type the Mysql server said it originally was. This will be a lot safer and more predictable.                                     Next:   Usage    Up:   Introductory Material    Previous:   2. Overview         Contents        2001-05-01                  MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX016-25-4524229	"Amerikanische            Feiertage                                        Einführung               I  Martin            Luther King Day  I  President's            Day  I  Memorial Day  I             Independence Day  I   Labor Day             I  Columbus Day             I  Veterans Day  I  Thanksgiving              I  Weihnachten              Andere Feiertage:  Ethnische & Religiöse            Feiertage  I  Brauchtumstage  I             Halloween                                                                  Amerikanische           Feiertage    >            Ethnische und Religiöse Feiertage                                                                                                                                                                                  E-Texte                                           Celebrate:                 Chinese New Year                                           Celebrate:                 Cinco de Mayo                                            Celebrate:                 Easter                                           Celebrate:                 Mardi Gras                                           Celebrate:                 Native American Pow-wows                                                            Celebrate:                 St.Patrick's Day                                             National                 Celebrations (Portrait of America)                                    Die             Vereinigten Staaten sind eine Nation, die sich aus vielen unterschiedlichen             Konfessionen und ethnischen Gruppen zusammensetzt. Alle haben ihre Festtage,             Feiertage oder speziellen Bräuche, die mit ihrer Religion oder             mit ihrem Ursprungsland zusammenhängen. Amerikaner jüdischen             Glaubens, zum Beispiel, begehen alle ihre traditionellen hohen Feiertage.             Ihre Arbeitgeber zeigen Verständnis und gestatten ihnen, sich an             diesen Tagen frei zu nehmen, damit sie ihre Traditionen pflegen können.             Das gleiche gilt für Moslems.             Dieser             Bräuche, die auf Traditionen aus anderen Ländern zurückgehen,             verleihen dem amerikanischen Leben besonders grosse Farbigkeit.                Das             Mardi Gras Fest, am Tag bevor die christliche Fastenzeit beginnt, ist             Tradition in New Orleans, Louisiana, einer der größten Städte             der Südstaaten. Die Festlichkeiten, die in einem großen farbenfrohen             Umzug und wahren Festgelagen gipfeln, entstammen einem alten französischen             Brauch, denn Louisiana gehörte einmal zum französischen Besitztum             in der neuen Welt.             In             den verschiedenen Regionen veranstalten die unterschiedlichen ethnischen             Gruppen Umzüge oder andere Festlichkeiten, die auf großes             Interesse stoßen und zu bunter Vielfalt und Fröhlichkeit             im amerikanischen Alltag beitragen. Hier ein paar Beispiele:             Am             St. Patrick's Day feiern Bürger ihre irische Herkunft. Die größten             Feierlichkeiten finden in New York City statt, wo am 17. März,             dem Tag des irischen Schutzheiligen, ein riesiger Festumzug veranstaltet             wird. In Gegenden wo Amerikaner chinesischer Abstammung leben, und speziell             in den Stadtteilen Chinatown von New York City und San Francisco, begehen             die Menschen das traditionelle chinesische Neujahrsfest mit Festessen,             Umzügen und Feuerwerk. Oktoberfeste mit deutscher Volksmusik, Tanz             und deutschen Spezialitäten werden in Gegenden veranstaltet, wo             viele Deutsch-Amerikaner leben.             Afro-Amerikaner            haben begonnen Kwanzaa zu feiern (26. Dezember bis 1. Januar), ein Fest            das auf die afrikanische Feier der ersten Ernte im Jahr zurückgeht.            Ins Leben gerufen in 1966 von Maulana Karenga, einem Professor für            ""Black Studies"" an der California State University, feiert            Kwanzaa die Einheit und die Entwicklung der afrikanischstämmigen            Bevölkerung. Das Fest basiert auf den ""Nguzo Saba"", den            sieben Prinzipien von Einheit, Selbstbestimmung, Zusammenarbeit und            Verantwortung, Gemeinwirtschaft, Bestimmung, Kreativität und Zuversicht.            Kwanzaa ruft Afro-Amerikaner auf, neben ihrem Alltag in Amerika auch            an ihre afrikanischen Wurzeln zu denken. Schwarze Amerikaner beschenken            sich an diesem Tag, um ihren Erfolg im vergangenen Jahr zu feiern, und            sie entzünden die ""Mishumaa Saba"", die sieben Kerzen,            die sie an die sieben Prinizipien erinnern sollen, die sie vereinen.                                                          Auszug             aus Publikationen des  State             Department/IIP  und anderen U.S. Regierungsquellen.                                                                        Hintergrund             ·              Cinco            de Mayo: A Celebration of Mexican Heritage             (World Book Encyclopedia Online)              ·              German            Customs, Traditions and Origins of Holidays  (Robert Shea)             ·              The            History of Kwanzaa  (History Channel)             ·              The            History of St.Patrick's Day   (History            Channel)             ·              Hanukkah             (History Channel)             ·              Hanukkah .            (World Book Encyclopedia Online)             ·              High HolyDays on the            Net  (Holidays.net)             ·              Kwanzaa             (World Book Encyclopedia Online)             ·              Kwanzaa            Information Center  (MelaNet)             ·              Kwanzaa on the Net             (Holidays.net)             ·              Mardi            Gras on the Net   (Holidays.net)             ·              Ramadan            on the Net   (Holidays.net)            Statistik             ·  Facts            for Features: St.Patrick's Day  (U.S. Census Bureau)                         Für            Schüler              ·             Easter            at the White House               ·              Holidays & Seasons             (Berit's Best Sites for Children)             ·              How            Cinco de Mayo Works  (HowStuffWorks.com)             ·              How Easter Works             (HowStuffWorks.com)             ·              How Mardi            Gras Works  (HowStuffWorks.com)             ·              How St.Patrick's            Day Works  (HowStuffWorks.com)             ·              Yahooligans!            United States: Holidays                       Linksammlungen             ·              Holidays            Around the World  (World Book Encyclopedia)                ·              Holidays            on the Net             ·              Yahoo!            Holidays and Observances                                                                                        Benutzen             Sie den Adobe Acrobat© Reader um die PDF-Dokumente auf dieser Seite             lesen zu können.                                                                       HINWEIS            Verweise dieses Servers auf bestimmte Produkte oder           Dienste stellen keine Unterstützung der US-Regierung für das Produkt oder           dessen Produzenten bzw. Anbieter dar. Ansichten und Meinungen, die in           den Verweisdokumenten geäußert werden, entsprechend nicht zwingend denen           der US-Regierung und spiegeln diese auch nicht wider.                          U.S.           Diplomatic Mission to Germany             /Public Affairs/ Information Resource Centers              Aktualisiert: Juni 2003"
GX016-27-15325666	Amerikanische            Feiertage                                        Einführung               I  Martin            Luther King Day  I  President's            Day  I  Memorial Day  I             Independence Day  I    Labor            Day  I  Columbus            Day  I  Veterans Day  I             Thanksgiving  I  Weihnachten                         Andere Feiertage:  Ethnische & Religiöse            Feiertage  I  Brauchtumstage  I  Halloween                                                                                             Amerikanische             Feiertage  >              Labor Day (Tag der Arbeit)                                                                                                                                                                       E-Texte                                                       Celebrate!                Holidays in the USA: Labor Day                                         Facts                for Features: Labor Day 2003 (U.S. Census Bureau)                                          The                History of Labor Day (U.S. Dept. of Labor)                                                         Labor                  in America - the Worker's Role (Outline of the U.S. Economy)                                                                 Labor             Day, der Tag der Arbeit, wird immer am ersten Montag im September begangen             und ist schon seit 1894 ein Nationalfeiertag. Er geht zurück auf             die  Kampagne             einer frühen Arbeiterbewegung, der Knights of Labor, und wurde              in einigen Gegenden sogar schon             vor 1894 als Feiertag begangen. Labor Day               wird zu Ehren der arbeitenden Bevölkerung gefeiert, und in vielen             Städten finden Umzüge von Mitgliedern der Gewerkschaften statt.            Für             die meisten Amerikaner bedeutet Labor Day auch das Ende der Sommermonate,             und Strände und Ausflugsziele sind oft überfüllt mit             Menschen, die das letzte lange Sommerwochenende geniessen. Für             die meisten Schüler bedeutet Labor Day das Ende der Ferien und             den Beginn des neuen Schuljahres.             Siehe auch:              About             the USA > Wirtschaft > Arbeitsmarkt               About the USA > US-Geschichte >             Wachstum und Veränderung                                              Auszug             aus Publikationen des  State             Department/IIP  und anderen U.S. Regierungsquellen.                                                                        Hintergrund                          ·             The            First Labor Day  (Library of Congress)             ·             How            Labor Won Its Day  (Detroit News)              ·             Labor            History Timeline  (AFL-CIO)              ·               The            Origins of Labor Day . (PBS Online Newshour)             ·               U.S.            Department of Labor             ·               Working            Heroes--Men and Women Who Shaped America's Labor Movement   (AFL-CIO)            Statistik             ·             Bureau            of Labor Statistics  (U.S. Department of Labor)             ·             Facts            for Features: Labor Day 2003  (U.S. Census Bureau)                        Ausstellungen            - Digitale Bilder             ·             100            Years of Struggle and Success  (AFL-CIO)             ·             Between            a Rock and a Hard Place  (National Museum of American History)             ·             From            Carbon to Computers : The Changing American Office (Smithsonian)                                      ·             Lost            Labor: Images of Vanished American Workers 1900-1980               ·             Triangle            Factory Fire  (Cornell University. School of Industrial and Labor            Relations)                         Für            Schüler                           ·             Celebrating            Labor Day  (Holiday Zone)              ·             Labor            Day  (Surfing the Net with Kids)                         Lehrermaterialien                          ·             A            Curriculum of United States Labor History for Teachers  (Illinois            Labor History Society)                          ·             Labor            History WebQuest             (Davison Community Schools)                          ·             Striking            a Deal. Learning the History of American Labor Strikes . Lesson Plan.            (New York Times Learning Network)                                     Linksammlungen             ·             African            American Labor History Links  (AFSCME )                                                    ·             The            American Federation of Labor and the Congress of Industrial Organizations            (AFL-CIO)               ·             Labor            and Working Class History Association : Resources & Links             ·  Labor            History on the Web  (AFL-CIO)                              ·             Union            Websites  (AFL-CIO)                          ·               Yahoo!            Holidays and Observances: Labor Day             ·             Women's            Labor History  (AFSCME )                                                                                                   Benutzen             Sie den Adobe Acrobat© Reader um die PDF-Dokumente auf dieser Seite             lesen zu können.                                                                             HINWEIS            Verweise dieses Servers auf bestimmte Produkte oder           Dienste stellen keine Unterstützung der US-Regierung für das Produkt oder           dessen Produzenten bzw. Anbieter dar. Ansichten und Meinungen, die in           den Verweisdokumenten geäußert werden, entsprechend nicht zwingend denen           der US-Regierung und spiegeln diese auch nicht wider.                          U.S.           Diplomatic Mission to Germany             /Public Affairs/ Information Resource Centers              Aktualisiert: September 2003
GX024-24-5710409	"Amerikanische              Feiertage               Einführung                 I  Martin              Luther King Day  I  President's              Day  I  Memorial Day  I               Independence Day  I   Labor Day               I  Columbus              Day  I  Veterans Day               I  Thanksgiving                I  Weihnachten                Andere Feiertage:  Ethnische & Religiöse              Feiertage  I  Brauchtumstage               I  Halloween                                                                                Amerikanische           Feiertage    >            Ethnische und Religiöse Feiertage                                                                                                                                                                                  E-Texte                                           Celebrate:                 Chinese New Year                                           Celebrate:                 Cinco de Mayo                                            Celebrate:                 Easter                                           Celebrate:                 Mardi Gras                                           Celebrate:                 Native American Pow-wows                                                            Celebrate:                 St.Patrick's Day                                             National                 Celebrations (Portrait of America)                                    Die             Vereinigten Staaten sind eine Nation, die sich aus vielen unterschiedlichen             Konfessionen und ethnischen Gruppen zusammensetzt. Alle haben ihre Festtage,             Feiertage oder speziellen Bräuche, die mit ihrer Religion oder             mit ihrem Ursprungsland zusammenhängen. Amerikaner jüdischen             Glaubens, zum Beispiel, begehen alle ihre traditionellen hohen Feiertage.             Ihre Arbeitgeber zeigen Verständnis und gestatten ihnen, sich an             diesen Tagen frei zu nehmen, damit sie ihre Traditionen pflegen können.             Das gleiche gilt für Moslems.             Dieser             Bräuche, die auf Traditionen aus anderen Ländern zurückgehen,             verleihen dem amerikanischen Leben besonders grosse Farbigkeit.                Das             Mardi Gras Fest, am Tag bevor die christliche Fastenzeit beginnt, ist             Tradition in New Orleans, Louisiana, einer der größten Städte             der Südstaaten. Die Festlichkeiten, die in einem großen farbenfrohen             Umzug und wahren Festgelagen gipfeln, entstammen einem alten französischen             Brauch, denn Louisiana gehörte einmal zum französischen Besitztum             in der neuen Welt.             In             den verschiedenen Regionen veranstalten die unterschiedlichen ethnischen             Gruppen Umzüge oder andere Festlichkeiten, die auf großes             Interesse stoßen und zu bunter Vielfalt und Fröhlichkeit             im amerikanischen Alltag beitragen. Hier ein paar Beispiele:             Am             St. Patrick's Day feiern Bürger ihre irische Herkunft. Die größten             Feierlichkeiten finden in New York City statt, wo am 17. März,             dem Tag des irischen Schutzheiligen, ein riesiger Festumzug veranstaltet             wird. In Gegenden wo Amerikaner chinesischer Abstammung leben, und speziell             in den Stadtteilen Chinatown von New York City und San Francisco, begehen             die Menschen das traditionelle chinesische Neujahrsfest mit Festessen,             Umzügen und Feuerwerk. Oktoberfeste mit deutscher Volksmusik, Tanz             und deutschen Spezialitäten werden in Gegenden veranstaltet, wo             viele Deutsch-Amerikaner leben.             Afro-Amerikaner            haben begonnen Kwanzaa zu feiern (26. Dezember bis 1. Januar), ein Fest            das auf die afrikanische Feier der ersten Ernte im Jahr zurückgeht.            Ins Leben gerufen in 1966 von Maulana Karenga, einem Professor für            ""Black Studies"" an der California State University, feiert            Kwanzaa die Einheit und die Entwicklung der afrikanischstämmigen            Bevölkerung. Das Fest basiert auf den ""Nguzo Saba"", den            sieben Prinzipien von Einheit, Selbstbestimmung, Zusammenarbeit und            Verantwortung, Gemeinwirtschaft, Bestimmung, Kreativität und Zuversicht.            Kwanzaa ruft Afro-Amerikaner auf, neben ihrem Alltag in Amerika auch            an ihre afrikanischen Wurzeln zu denken. Schwarze Amerikaner beschenken            sich an diesem Tag, um ihren Erfolg im vergangenen Jahr zu feiern, und            sie entzünden die ""Mishumaa Saba"", die sieben Kerzen,            die sie an die sieben Prinizipien erinnern sollen, die sie vereinen.                                                          Auszug             aus Publikationen des  State             Department/IIP  und anderen U.S. Regierungsquellen.                                                                        Hintergrund             ·              Cinco            de Mayo: A Celebration of Mexican Heritage             (World Book Encyclopedia Online)              ·              German            Customs, Traditions and Origins of Holidays  (Robert Shea)             ·              The            History of Kwanzaa  (History Channel)             ·              The            History of St.Patrick's Day   (History            Channel)             ·              Hanukkah             (History Channel)             ·              Hanukkah .            (World Book Encyclopedia Online)             ·              High HolyDays on the            Net  (Holidays.net)             ·              Kwanzaa             (World Book Encyclopedia Online)             ·              Kwanzaa            Information Center  (MelaNet)             ·              Kwanzaa on the Net             (Holidays.net)             ·              Mardi            Gras on the Net   (Holidays.net)             ·              Ramadan            on the Net   (Holidays.net)            Statistik             ·  Facts            for Features: St.Patrick's Day  (U.S. Census Bureau)                         Für            Schüler              ·             Easter            at the White House               ·              Holidays & Seasons             (Berit's Best Sites for Children)             ·              How            Cinco de Mayo Works  (HowStuffWorks.com)             ·              How Easter Works             (HowStuffWorks.com)             ·              How Mardi            Gras Works  (HowStuffWorks.com)             ·              How St.Patrick's            Day Works  (HowStuffWorks.com)             ·              Yahooligans!            United States: Holidays                       Linksammlungen             ·              Holidays            Around the World  (World Book Encyclopedia)                ·              Holidays            on the Net             ·              Yahoo!            Holidays and Observances                                                                                        Benutzen             Sie den Adobe Acrobat© Reader um die PDF-Dokumente auf dieser Seite             lesen zu können.                                                                       HINWEIS            Verweise dieses Servers auf bestimmte Produkte oder           Dienste stellen keine Unterstützung der US-Regierung für das Produkt oder           dessen Produzenten bzw. Anbieter dar. Ansichten und Meinungen, die in           den Verweisdokumenten geäußert werden, entsprechend nicht zwingend denen           der US-Regierung und spiegeln diese auch nicht wider.                          U.S.           Diplomatic Mission to Germany             /Public Affairs/ Information Resource Centers              Aktualisiert: Juni 2003"
GX024-27-3059406	Amerikanische              Feiertage               Einführung                 I  Martin              Luther King Day  I  President's              Day  I  Memorial Day  I               Independence Day  I    Labor              Day  I  Columbus              Day  I  Veterans Day               I  Thanksgiving  I  Weihnachten                             Andere Feiertage:  Ethnische & Religiöse              Feiertage  I  Brauchtumstage  I  Halloween                                                                                                             Amerikanische             Feiertage  >              Labor Day (Tag der Arbeit)                                                                                                                                                                       E-Texte                                                       Celebrate!                Holidays in the USA: Labor Day                                         Facts                for Features: Labor Day 2003 (U.S. Census Bureau)                                          The                History of Labor Day (U.S. Dept. of Labor)                                                         Labor                  in America - the Worker's Role (Outline of the U.S. Economy)                                                                 Labor             Day, der Tag der Arbeit, wird immer am ersten Montag im September begangen             und ist schon seit 1894 ein Nationalfeiertag. Er geht zurück auf             die  Kampagne             einer frühen Arbeiterbewegung, der Knights of Labor, und wurde              in einigen Gegenden sogar schon             vor 1894 als Feiertag begangen. Labor Day               wird zu Ehren der arbeitenden Bevölkerung gefeiert, und in vielen             Städten finden Umzüge von Mitgliedern der Gewerkschaften statt.            Für             die meisten Amerikaner bedeutet Labor Day auch das Ende der Sommermonate,             und Strände und Ausflugsziele sind oft überfüllt mit             Menschen, die das letzte lange Sommerwochenende geniessen. Für             die meisten Schüler bedeutet Labor Day das Ende der Ferien und             den Beginn des neuen Schuljahres.             Siehe auch:              About             the USA > Wirtschaft > Arbeitsmarkt               About the USA > US-Geschichte >             Wachstum und Veränderung                                              Auszug             aus Publikationen des  State             Department/IIP  und anderen U.S. Regierungsquellen.                                                                        Hintergrund                          ·             The            First Labor Day  (Library of Congress)             ·             How            Labor Won Its Day  (Detroit News)              ·             Labor            History Timeline  (AFL-CIO)              ·               The            Origins of Labor Day . (PBS Online Newshour)             ·               U.S.            Department of Labor             ·               Working            Heroes--Men and Women Who Shaped America's Labor Movement   (AFL-CIO)            Statistik             ·             Bureau            of Labor Statistics  (U.S. Department of Labor)             ·             Facts            for Features: Labor Day 2003  (U.S. Census Bureau)                        Ausstellungen            - Digitale Bilder             ·             100            Years of Struggle and Success  (AFL-CIO)             ·             Between            a Rock and a Hard Place  (National Museum of American History)             ·             From            Carbon to Computers : The Changing American Office (Smithsonian)                                      ·             Lost            Labor: Images of Vanished American Workers 1900-1980               ·             Triangle            Factory Fire  (Cornell University. School of Industrial and Labor            Relations)                         Für            Schüler                           ·             Celebrating            Labor Day  (Holiday Zone)              ·             Labor            Day  (Surfing the Net with Kids)                         Lehrermaterialien                          ·             A            Curriculum of United States Labor History for Teachers  (Illinois            Labor History Society)                          ·             Labor            History WebQuest             (Davison Community Schools)                          ·             Striking            a Deal. Learning the History of American Labor Strikes . Lesson Plan.            (New York Times Learning Network)                                     Linksammlungen             ·             African            American Labor History Links  (AFSCME )                                                    ·             The            American Federation of Labor and the Congress of Industrial Organizations            (AFL-CIO)               ·             Labor            and Working Class History Association : Resources & Links             ·  Labor            History on the Web  (AFL-CIO)                              ·             Union            Websites  (AFL-CIO)                          ·               Yahoo!            Holidays and Observances: Labor Day             ·             Women's            Labor History  (AFSCME )                                                                                                   Benutzen             Sie den Adobe Acrobat© Reader um die PDF-Dokumente auf dieser Seite             lesen zu können.                                                                             HINWEIS            Verweise dieses Servers auf bestimmte Produkte oder           Dienste stellen keine Unterstützung der US-Regierung für das Produkt oder           dessen Produzenten bzw. Anbieter dar. Ansichten und Meinungen, die in           den Verweisdokumenten geäußert werden, entsprechend nicht zwingend denen           der US-Regierung und spiegeln diese auch nicht wider.                          U.S.           Diplomatic Mission to Germany             /Public Affairs/ Information Resource Centers              Aktualisiert: September 2003
GX000-11-5390218	Link Directly to Content
GX175-72-5634438	The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                      Search the MySQL manual:                                   MySQL Manual      4 Database Administration  4.3 General Security Issues and the MySQL Access Privilege System  4.3.1 General Security Guidelines  4.3.2 How to Make MySQL Secure Against Crackers  4.3.3 Startup Options for  mysqld  Concerning Security  4.3.4 Security issues with  LOAD DATA LOCAL   4.3.5 What the Privilege System Does  4.3.6 How the Privilege System Works  4.3.7 Privileges Provided by MySQL  4.3.8 Connecting to the MySQL Server  4.3.9 Access Control, Stage 1: Connection Verification  4.3.10 Access Control, Stage 2: Request Verification  4.3.11 Password Hashing in MySQL 4.1  4.3.13 Causes of  Access denied  Errors        Additional languages       French German Portuguese Russian           Buy this Reference Manual in softcover from Barnes & Noble!            Additional formats       PDF (A4) PDF (US letter) HTML, one page per chapter, tarball HTML, all on one page, tarball HTML, all on one page, ZIP               Subscribe to the monthly MySQL Newsletter!                    Previous  /  Next  /  Up  /  Table of Contents 4.3.6  How the Privilege System Works            The MySQL privilege system ensures that all users may perform exactly the operations that they are supposed to be allowed to do.  When you connect to a MySQL server, your identity is determined by  the host from which you connect  and  the user name you specify .  The system grants privileges according to your identity and  what you want to do .      MySQL considers both your hostname and user name in identifying you because there is little reason to assume that a given user name belongs to the same person everywhere on the Internet.  For example, the user  joe  who connects from  office.com  need not be the same person as the user  joe  who connects from  elsewhere.com . MySQL handles this by allowing you to distinguish users on different hosts that happen to have the same name:  you can grant  joe  one set of privileges for connections from  office.com , and a different set of privileges for connections from  elsewhere.com .      MySQL access control involves two stages:          Stage 1: The server checks whether you are even allowed to connect.     Stage 2: Assuming you can connect, the server checks each request you issue to see whether you have sufficient privileges to perform it.  For example, if you try to select rows from a table in a database or drop a table from the database, the server makes sure you have the  SELECT  privilege for the table or the  DROP  privilege for the database.      Note that if your privileges are changed (either by yourself or someone else) while you are connected, those changes will not necessarily take effect with your next query or queries. See section  4.4.3  When Privilege Changes Take Effect  for details.      The server uses the  user ,  db , and  host  tables in the  mysql  database at both stages of access control.  The fields in these grant tables are shown here:       Table name      user     db     host      Scope fields      Host     Host     Host       User     Db     Db       Password     User        Privilege fields      Select_priv     Select_priv     Select_priv       Insert_priv     Insert_priv     Insert_priv       Update_priv     Update_priv     Update_priv       Delete_priv     Delete_priv     Delete_priv       Index_priv     Index_priv     Index_priv       Alter_priv     Alter_priv     Alter_priv       Create_priv     Create_priv     Create_priv       Drop_priv     Drop_priv     Drop_priv       Grant_priv     Grant_priv     Grant_priv        References_priv     References_priv     References_priv       Reload_priv            Shutdown_priv            Process_priv            File_priv             Show_db_priv            Super_priv            Create_tmp_table_priv     Create_tmp_table_priv     Create_tmp_table_priv       Lock_tables_priv     Lock_tables_priv     Lock_tables_priv       Execute_priv            Repl_slave_priv            Repl_client_priv             ssl_type            ssl_cypher            x509_issuer            x509_cubject             max_questions            max_updates            max_connections              For the second stage of access control (request verification), the server may, if the request involves tables, additionally consult the  tables_priv  and  columns_priv  tables.  The fields in these tables are shown here:       Table name     tables_priv     columns_priv      Scope fields     Host     Host       Db     Db       User     User       Table_name     Table_name         Column_name      Privilege fields     Table_priv     Column_priv       Column_priv        Other fields     Timestamp     Timestamp       Grantor           Each grant table contains scope fields and privilege fields.      Scope fields determine the scope of each entry in the tables, that is, the context in which the entry applies.  For example, a  user  table entry with  Host  and  User  values of  'thomas.loc.gov'  and  'bob'  would be used for authenticating connections made to the server by  bob  from the host  thomas.loc.gov .  Similarly, a  db  table entry with  Host ,  User , and  Db  fields of  'thomas.loc.gov' ,  'bob'  and  'reports'  would be used when  bob  connects from the host  thomas.loc.gov  to access the  reports  database.  The  tables_priv  and  columns_priv  tables contain scope fields indicating tables or table/column combinations to which each entry applies.        For access-checking purposes, comparisons of  Host  values are case-insensitive.   User ,  Password ,  Db , and  Table_name  values are case-sensitive.  Column_name  values are case-insensitive in MySQL Version 3.22.12 or later.      Privilege fields indicate the privileges granted by a table entry, that is, what operations can be performed.  The server combines the information in the various grant tables to form a complete description of a user's privileges. The rules used to do this are described in section  4.3.10  Access Control, Stage 2: Request Verification .      Scope fields are strings, declared as shown here; the default value for each is the empty string:       Field name     Type     Notes     Host     CHAR(60)       User     CHAR(16)       Password     CHAR(16)       Db     CHAR(64)    ( CHAR(60)  for the  tables_priv  and  columns_priv  tables)    Table_name     CHAR(60)       Column_name     CHAR(60)           In the  user ,  db  and  host  tables, all privilege fields are declared as  ENUM('N','Y') ---each can have a value of  'N'  or  'Y' , and the default value is  'N' .      In the  tables_priv  and  columns_priv  tables, the privilege fields are declared as  SET  fields:       Table name      Field name      Possible set elements     tables_priv      Table_priv      'Select', 'Insert', 'Update', 'Delete', 'Create', 'Drop', 'Grant', 'References', 'Index', 'Alter'     tables_priv      Column_priv      'Select', 'Insert', 'Update', 'References'     columns_priv      Column_priv      'Select', 'Insert', 'Update', 'References'         Briefly, the server uses the grant tables like this:          The  user  table scope fields determine whether to allow or reject incoming connections.  For allowed connections, any privileges granted in the  user  table indicate the user's global (superuser) privileges. These privileges apply to  all  databases on the server.     The  db  and  host  tables are used together:        The  db  table scope fields determine which users can access which databases from which hosts.  The privilege fields determine which operations are allowed.     The  host  table is used as an extension of the  db  table when you want a given  db  table entry to apply to several hosts.  For example, if you want a user to be able to use a database from several hosts in your network, leave the  Host  value empty in the user's  db  table entry, then populate the  host  table with an entry for each of those hosts.  This mechanism is described more detail in section  4.3.10  Access Control, Stage 2: Request Verification .       The  tables_priv  and  columns_priv  tables are similar to the  db  table, but are more fine-grained: they apply at the table and column levels rather than at the database level.      Note that administrative privileges ( RELOAD ,  SHUTDOWN , etc.) are specified only in the  user  table.  This is because administrative operations are operations on the server itself and are not database-specific, so there is no reason to list such privileges in the other grant tables.  In fact, only the  user  table need be consulted to determine whether you can perform an administrative operation.      The  FILE  privilege is specified only in the  user  table, too. It is not an administrative privilege as such, but your ability to read or write files on the server host is independent of the database you are accessing.      The  mysqld  server reads the contents of the grant tables once, when it starts up.  Changes to the grant tables take effect as indicated in section  4.4.3  When Privilege Changes Take Effect .      When you modify the contents of the grant tables, it is a good idea to make sure that your changes set up privileges the way you want.  For help in diagnosing problems, see section  4.3.13  Causes of  Access denied  Errors .  For advice on security issues, see section  4.3.2  How to Make MySQL Secure Against Crackers .      A useful diagnostic tool is the  mysqlaccess  script, which Yves Carlier has provided for the MySQL distribution.  Invoke  mysqlaccess  with the  --help  option to find out how it works. Note that  mysqlaccess  checks access using only the  user ,  db  and  host  tables.  It does not check table- or column-level privileges.         User Comments Posted by Jari Ristiranta on October 29 2003 3:17am [ Delete ] [ Edit ] To grant database creation to MySQL users, use this: UPDATE mysql.user SET Create_priv='Y' WHERE user='your_user' AND host='users_host'; FLUSH PRIVILEGES; Note that Create_priv also allows users to create tables to other users' databases. It seems that MySQL has no privilege for creating databases only. Add your own comment. Top  /  Previous  /  Next  /  Up  /  Table of Contents             MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2004 MySQL AB. All rights reserved.
GX172-07-11087631	REVOKE Statement  (revoke_statement)        The  REVOKE statement revokes  privileges .      Syntax        <revoke_statement> ::= REVOKE <priv_spec>,... FROM  <grantee>,... [<cascade_option>]   | REVOKE EXECUTE ON <dbproc_name> FROM <grantee>,...   | REVOKE SELECT ON <sequence_name> FROM <grantee>,...  [<cascade_option>]      priv_spec ,  grantee ,  cascade_option ,  dbproc_name ,   sequence_name      Explanation      The  owner  of a  table can revoke the privileges granted for this table from any  user .       If a user is not the owner of the table,  he may only revoke the privileges he has granted.       If the SELECT privilege was granted for a  table without specifying any column names, REVOKE SELECT (<column  name>,...) can be used to revoke the SELECT privilege (see  privilege type )  for the specified columns.  The SELECT privilege for table columns that have  not been specified remains unchanged. The same is true for the UPDATE,  REFERENCES, and SELUPD privileges.      The REVOKE statement can cascade; that  is, revoking a privilege from one user can result in this privilege being  revoked from other users who have received the privilege from the user in  question.           Let U1, U2, and U3 be users.    U1 grants U2 the privilege set P WITH GRANT OPTION.   U1 grants U3 the privilege set P' (P'<=P).      If U1 revokes the privilege set P''  (P''<=P) from user U2, the privilege set (P'*P'') is revoked implicitly  from user U3.      ·           Whenever the  SELECT privilege is revoked from the owner of a view table for a selected that  does not occur in the    table_expression  of the view definition ( CREATE VIEW statement ), the column defined by    select_column  is dropped from the view table.   If this view table is used in the  FROM clause  of  another view table, the described procedure is applied recursively to this  view table.      ·           If the SELECT  privilege is revoked from the owner of a view table for a column or table  occurring in the    table_expression  of the view definition, the view table is dropped,  along with all  view tables ,  privileges, and  synonyms  that are  dependent on this view table, if no  CASCADE option  or  the  cascade  option CASCADE is  specified. The REVOKE statement will fail if the CASCADE option   RESTRICT  is specified.      REVOKE  EXECUTE      If  REVOKE EXECUTE is specified, the authorization to execute the  database procedure   is revoked from the user identified by    grantee . The  authorization for execution can only be revoked by the owner of the database  procedure.
GX152-66-6983615	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                      Search the MySQL manual:                                   MySQL Manual      4 Database Administration  4.4 MySQL User Account Management  4.4.1  GRANT  and  REVOKE  Syntax  4.4.2 MySQL User Names and Passwords  4.4.3 When Privilege Changes Take Effect  4.4.4 Setting Up the Initial MySQL Privileges  4.4.5 Adding New Users to MySQL  4.4.6 Deleting Users from MySQL  4.4.7 Limiting user resources  4.4.8 Setting Up Passwords  4.4.9 Keeping Your Password Secure  4.4.10 Using Secure Connections        Additional languages       French German Portuguese Russian           Buy this Reference Manual in softcover from Barnes & Noble!            Additional formats       PDF (A4) PDF (US letter) HTML, one page per chapter, tarball HTML, all on one page, tarball HTML, all on one page, ZIP               Subscribe to the monthly MySQL Newsletter!                    Previous  /  Next  /  Up  /  Table of Contents 4.4.1   GRANT  and  REVOKE  Syntax                             GRANT priv_type [(column_list)] [, priv_type [(column_list)] ...]     ON {tbl_name | * | *.* | db_name.*}     TO user_name [IDENTIFIED BY [PASSWORD] 'password']         [, user_name [IDENTIFIED BY [PASSWORD] 'password'] ...]     [REQUIRE         NONE |         [{SSL| X509}]         [CIPHER cipher [AND]]         [ISSUER issuer [AND]]         [SUBJECT subject]]     [WITH [GRANT OPTION | MAX_QUERIES_PER_HOUR # |                           MAX_UPDATES_PER_HOUR # |                           MAX_CONNECTIONS_PER_HOUR #]]  REVOKE priv_type [(column_list)] [, priv_type [(column_list)] ...]     ON {tbl_name | * | *.* | db_name.*}     FROM user_name [, user_name ...]  REVOKE ALL PRIVILEGES,GRANT FROM user_name [, user_name ...]       GRANT  is implemented in MySQL Version 3.22.11 or later. For earlier MySQL versions, the  GRANT  statement does nothing.      The  GRANT  and  REVOKE  commands allow system administrators to create users and grant and revoke rights to MySQL users at four privilege levels:        Global level    Global privileges apply to all databases on a given server. These privileges are stored in the  mysql.user  table.  GRANT ALL ON *.*  and  REVOKE ALL ON *.*  will grant and revoke only global privileges.   Database level    Database privileges apply to all tables in a given database. These privileges are stored in the  mysql.db  and  mysql.host  tables.  GRANT ALL ON db.*  and  REVOKE ALL ON db.*  will grant and revoke only database privileges.   Table level    Table privileges apply to all columns in a given table. These privileges are stored in the  mysql.tables_priv  table.  GRANT ALL ON db.table  and  REVOKE ALL ON db.table  will grant and revoke only table privileges.   Column level    Column privileges apply to single columns in a given table. These privileges are stored in the  mysql.columns_priv  table. When using  REVOKE  you must specify the same columns that were granted.      To make it easy to revoke all privileges for a user, MySQL 4.1.1 has added the syntax:      REVOKE ALL PRIVILEGES,GRANT FROM user_name [, user_name ...]      This will drop all database, table and column level privileges for the user.      For the  GRANT  and  REVOKE  statements,  priv_type  may be specified as any of the following:       ALL [PRIVILEGES]    Sets all simple privileges except  WITH GRANT OPTION     ALTER    Allows usage of  ALTER TABLE     CREATE    Allows usage of  CREATE TABLE     CREATE TEMPORARY TABLES    Allows usage of  CREATE TEMPORARY TABLE     DELETE    Allows usage of  DELETE     DROP    Allows usage of  DROP TABLE .    EXECUTE    Allows the user to run stored procedures (MySQL 5.0)    FILE    Allows usage of  SELECT ... INTO OUTFILE  and  LOAD DATA INFILE .    INDEX    Allows usage of  CREATE INDEX  and  DROP INDEX     INSERT    Allows usage of  INSERT     LOCK TABLES    Allows usage of  LOCK TABLES  on tables for which one has the  SELECT  privilege.    PROCESS    Allows usage of  SHOW FULL PROCESSLIST     REFERENCES    For the future    RELOAD    Allows usage of  FLUSH     REPLICATION CLIENT    Gives the right to the user to ask where the slaves/masters are.    REPLICATION SLAVE    Needed for the replication slaves (to read binlogs from master).    SELECT    Allows usage of  SELECT     SHOW DATABASES     SHOW DATABASES  shows all databases.    SHUTDOWN    Allows usage of  mysqladmin shutdown     SUPER    Allows one connect (once) even if max_connections is reached and execute commands  CHANGE MASTER ,  KILL thread ,  mysqladmin debug ,  PURGE MASTER LOGS  and  SET GLOBAL     UPDATE    Allows usage of  UPDATE     USAGE    Synonym for ``no privileges.''    GRANT OPTION    Synonym for  WITH GRANT OPTION          USAGE  can be used when you want to create a user that has no privileges.      The privileges  CREATE TEMPORARY TABLES ,  EXECUTE ,  LOCK TABLES ,  REPLICATION ... ,  SHOW DATABASES  and  SUPER  are new for in version 4.0.2.  To use these new privileges after upgrading to 4.0.2, you have to run the  mysql_fix_privilege_tables  script. See section  2.5.7  Upgrading the Grant Tables .      In older MySQL versions, the  PROCESS  privilege gives the same rights as the new  SUPER  privilege.      To revoke the  GRANT  privilege from a user, use a  priv_type  value of  GRANT OPTION :      mysql> REVOKE GRANT OPTION ON ... FROM ...;      The only  priv_type  values you can specify for a table are  SELECT ,  INSERT ,  UPDATE ,  DELETE ,  CREATE ,  DROP ,  GRANT OPTION ,  INDEX , and  ALTER .      The only  priv_type  values you can specify for a column (that is, when you use a  column_list  clause) are  SELECT ,  INSERT , and  UPDATE .      MySQL allows you to create database level privileges even if the database doesn't exist, to make it easy to prepare for database usage. Currently MySQL does however not allow one to create table level grants if the table doesn't exist. MySQL will not automatically revoke any privileges even if you drop a table or drop a database.      You can set global privileges by using  ON *.*  syntax.  You can set database privileges by using  ON db_name.*  syntax. If you specify  ON *  and you have a current database, you will set the privileges for that database.  ( Warning : if you specify  ON *  and you  don't  have a current database, you will affect the global privileges!)       Please note : the  `_'  and  `%'  wildcards are allowed when specifying database names in  GRANT  commands. This means that if you wish to use for instance a  `_'  character as part of a database name, you should specify it as  `\_'  in the  GRANT  command, to prevent the user from being able to access additional databases matching the wildcard pattern, for example,  GRANT ... ON `foo\_bar`.* TO ... .      In order to accommodate granting rights to users from arbitrary hosts, MySQL supports specifying the  user_name  value in the form  user@host .  If you want to specify a  user  string containing special characters (such as  `-' ), or a  host  string containing special characters or wildcard characters (such as  `%' ), you can quote the user or host name (for example,  'test-user'@'test-hostname' ).      You can specify wildcards in the hostname.  For example,  user@'%.loc.gov'  applies to  user  for any host in the  loc.gov  domain, and  user@'144.155.166.%'  applies to  user  for any host in the  144.155.166  class C subnet.      The simple form  user  is a synonym for  user@""%"" .      MySQL doesn't support wildcards in user names.  Anonymous users are defined by inserting entries with  User=''  into the  mysql.user  table or creating an user with an empty name with the  GRANT  command.       Note : if you allow anonymous users to connect to the MySQL server, you should also grant privileges to all local users as  user@localhost  because otherwise the anonymous user entry for the local host in the  mysql.user  table will be used when the user tries to log into the MySQL server from the local machine!      You can verify if this applies to you by executing this query:      mysql> SELECT Host,User FROM mysql.user WHERE User='';      For the moment,  GRANT  only supports host, table, database, and column names up to 60 characters long. A user name can be up to 16 characters.      The privileges for a table or column are formed from the logical OR of the privileges at each of the four privilege levels.  For example, if the  mysql.user  table specifies that a user has a global  SELECT  privilege, this can't be denied by an entry at the database, table, or column level.      The privileges for a column can be calculated as follows:      global privileges OR (database privileges AND host privileges) OR table privileges OR column privileges      In most cases, you grant rights to a user at only one of the privilege levels, so life isn't normally as complicated as above. The details of the privilege-checking procedure are presented in section  4.3  General Security Issues and the MySQL Access Privilege System .      If you grant privileges for a user/hostname combination that does not exist in the  mysql.user  table, an entry is added and remains there until deleted with a  DELETE  command.  In other words,  GRANT  may create  user  table entries, but  REVOKE  will not remove them; you must do that explicitly using  DELETE .        In MySQL Version 3.22.12 or later, if a new user is created or if you have global grant privileges, the user's password will be set to the password specified by the  IDENTIFIED BY  clause, if one is given.  If the user already had a password, it is replaced by the new one.      If you don't want to send the password in clear text you can use the  PASSWORD  option followed by a scrambled password from SQL function  PASSWORD()  or the C API function  make_scrambled_password(char *to, const char *password) .       Warning : if you create a new user but do not specify an  IDENTIFIED BY  clause, the user has no password.  This is insecure.      Passwords can also be set with the  SET PASSWORD  command. See section  5.5.6   SET  Syntax .      If you grant privileges for a database, an entry in the  mysql.db  table is created if needed. When all privileges for the database have been removed with  REVOKE , this entry is deleted.      If a user doesn't have any privileges on a table, the table is not displayed when the user requests a list of tables (for example, with a  SHOW TABLES  statement). The same is true for  SHOW DATABASES .      The  WITH GRANT OPTION  clause gives the user the ability to give to other users any privileges the user has at the specified privilege level. You should be careful to whom you give the  GRANT  privilege, as two users with different privileges may be able to join privileges!       MAX_QUERIES_PER_HOUR # ,  MAX_UPDATES_PER_HOUR #  and  MAX_CONNECTIONS_PER_HOUR #  are new in MySQL version 4.0.2. These options limit the number of queries/updates and logins the user can do during one hour. If  #  is 0 (default), then this means that there are no limitations for that user. See section  4.4.7  Limiting user resources . Note: to specify any of these options for an existing user without adding other additional privileges, use  GRANT USAGE ON *.* ... WITH MAX_... .      You cannot grant another user a privilege you don't have yourself; the  GRANT  privilege allows you to give away only those privileges you possess.      Be aware that when you grant a user the  GRANT  privilege at a particular privilege level, any privileges the user already possesses (or is given in the future!) at that level are also grantable by that user. Suppose you grant a user the  INSERT  privilege on a database.  If you then grant the  SELECT  privilege on the database and specify  WITH GRANT OPTION , the user can give away not only the  SELECT  privilege, but also  INSERT .  If you then grant the  UPDATE  privilege to the user on the database, the user can give away the  INSERT ,  SELECT  and  UPDATE .      You should not grant  ALTER  privileges to a normal user.  If you do that, the user can try to subvert the privilege system by renaming tables!      Note that if you are using table or column privileges for even one user, the server examines table and column privileges for all users and this will slow down MySQL a bit.      When  mysqld  starts, all privileges are read into memory. Database, table, and column privileges take effect at once, and user-level privileges take effect the next time the user connects. Modifications to the grant tables that you perform using  GRANT  or  REVOKE  are noticed by the server immediately. If you modify the grant tables manually (using  INSERT ,  UPDATE , etc.), you should execute a  FLUSH PRIVILEGES  statement or run  mysqladmin flush-privileges  to tell the server to reload the grant tables. See section  4.4.3  When Privilege Changes Take Effect .        The biggest differences between the SQL standard and MySQL versions of  GRANT  are:          In MySQL privileges are given for an username + hostname combination and not only for an username.     SQL-99 doesn't have global or database-level privileges, nor does it  support all the privilege types that MySQL supports. MySQL doesn't support the SQL-99  TRIGGER  or  UNDER  privileges.     SQL-99 privileges are structured in a hierarchal manner. If you remove an user, all privileges the user has granted are revoked. In MySQL the granted privileges are not automatically revoked, but you have to revoke these yourself if needed.     In MySQL, if you have the  INSERT  privilege on only some of the columns in a table, you can execute  INSERT  statements on the table; the columns for which you don't have the  INSERT  privilege will be set to their default values. SQL-99 requires you to have the  INSERT  privilege on all columns.     With SQL99, when you drop a table, all privileges for the table are revoked. With SQL-99, when you revoke a privilege, all privileges that were granted based on the privilege are also revoked. In MySQL, privileges can be dropped only with explicit  REVOKE  commands or by manipulating the MySQL grant tables.      For a description of using  REQUIRE , see section  4.4.10  Using Secure Connections .        User Comments Posted by  Ken Maupin  on February 16 2002 10:21pm [ Delete ] [ Edit ] The documentation doesn't emphasize this point, but it appears tables_priv doesn't allow CIDR notation in the Host column.  If you use CIDR notation in the other privilege tables, you need to use wildcard notation in tables_priv.  This also affects the way GRANT and REVOKE work: if you grant table-specific privileges to a user using CIDR notation, you'll need to manually adjust the Host column in tables_priv. Posted by Lars Aronsson on June 8 2002 11:16am [ Delete ] [ Edit ] The normal response from a grant or revoke statement is ""Query OK, 0 rows affected"". The message that zero rows were affected is a common source of confusion, but should just be ignored by the user. Trying to revoke grants that were never granted yields an ""ERROR 1147: There is no such grant defined for user..."". Add your own comment. Top  /  Previous  /  Next  /  Up  /  Table of Contents             MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX152-59-13230633	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                      Search the MySQL manual:                                   MySQL Manual      4 Database Administration  4.3 General Security Issues and the MySQL Access Privilege System  4.3.1 General Security Guidelines  4.3.2 How to Make MySQL Secure Against Crackers  4.3.3 Startup Options for  mysqld  Concerning Security  4.3.4 Security issues with  LOAD DATA LOCAL   4.3.5 What the Privilege System Does  4.3.6 How the Privilege System Works  4.3.7 Privileges Provided by MySQL  4.3.8 Connecting to the MySQL Server  4.3.9 Access Control, Stage 1: Connection Verification  4.3.10 Access Control, Stage 2: Request Verification  4.3.11 Password Hashing in MySQL 4.1  4.3.13 Causes of  Access denied  Errors        Additional languages       French German Portuguese Russian           Buy this Reference Manual in softcover from Barnes & Noble!            Additional formats       PDF (A4) PDF (US letter) HTML, one page per chapter, tarball HTML, all on one page, tarball HTML, all on one page, ZIP               Subscribe to the monthly MySQL Newsletter!                    Previous  /  Next  /  Up  /  Table of Contents 4.3.7  Privileges Provided by MySQL            Information about user privileges is stored in the  user ,  db ,  host ,  tables_priv , and  columns_priv  tables in the  mysql  database (that is, in the database named  mysql ).  The MySQL server reads the contents of these tables when it starts up and under the circumstances indicated in section  4.4.3  When Privilege Changes Take Effect .      The names used in this manual to refer to the privileges provided by MySQL version 4.0.2 are shown here, along with the table column name associated with each privilege in the grant tables and the context in which the privilege applies. Further information about the meaning of each privilege may be found at section  4.4.1   GRANT  and  REVOKE  Syntax .       Privilege     Column     Context     ALTER     Alter_priv    tables    DELETE     Delete_priv    tables    INDEX     Index_priv    tables    INSERT     Insert_priv    tables    SELECT     Select_priv    tables    UPDATE     Update_priv    tables    CREATE     Create_priv    databases, tables, or indexes    DROP     Drop_priv    databases or tables    GRANT     Grant_priv    databases or tables    REFERENCES     References_priv    databases or tables    CREATE TEMPORARY TABLES     Create_tmp_table_priv    server administration    EXECUTE     Execute_priv    server administration    FILE     File_priv    file access on server    LOCK TABLES     Lock_tables_priv    server administration    PROCESS     Process_priv    server administration    RELOAD     Reload_priv    server administration    REPLICATION CLIENT     Repl_client_priv    server administration    REPLICATION SLAVE     Repl_slave_priv    server administration    SHOW DATABASES     Show_db_priv    server administration    SHUTDOWN     Shutdown_priv    server administration    SUPER     Super_priv    server administration        The  SELECT ,  INSERT ,  UPDATE , and  DELETE  privileges allow you to perform operations on rows in existing tables in a database.       SELECT  statements require the  SELECT  privilege only if they actually retrieve rows from a table.  You can execute certain  SELECT  statements even without permission to access any of the databases on the server.  For example, you could use the  mysql  client as a simple calculator:      mysql> SELECT 1+1; mysql> SELECT PI()*2;      The  INDEX  privilege allows you to create or drop (remove) indexes.      The  ALTER  privilege allows you to use  ALTER TABLE .      The  CREATE  and  DROP  privileges allow you to create new databases and tables, or to drop (remove) existing databases and tables.      Note that if you grant the  DROP  privilege for the  mysql  database to a user, that user can drop the database in which the MySQL access privileges are stored!      The  GRANT  privilege allows you to give to other users those privileges you yourself possess.      The  FILE  privilege gives you permission to read and write files on the server using the  LOAD DATA INFILE  and  SELECT ... INTO OUTFILE  statements.  Any user to whom this privilege is granted can read any world readable file accessable by the MySQL server and create a new world readable file in any directory where the MySQL server can write. The user can also read any file in the current database directory. The user can however not change any existing file.      The remaining privileges are used for administrative operations, which are performed using the  mysqladmin  program.  The table here shows which  mysqladmin  commands each administrative privilege allows you to execute:       Privilege     Commands permitted to privilege holders     RELOAD     reload ,  refresh ,  flush-privileges ,  flush-hosts ,  flush-logs , and  flush-tables     SHUTDOWN     shutdown     PROCESS     processlist     SUPER     kill         The  reload  command tells the server to re-read the grant tables.  The  refresh  command flushes all tables and opens and closes the log files.   flush-privileges  is a synonym for  reload .  The other  flush-*  commands perform functions similar to  refresh  but are more limited in scope, and may be preferable in some instances.  For example, if you want to flush just the log files,  flush-logs  is a better choice than  refresh .      The  shutdown  command shuts down the server.      The  processlist  command displays information about the threads executing within the server.  The  kill  command kills server threads.  You can always display or kill your own threads, but you need the  PROCESS  privilege to display and  SUPER  privilege to kill threads initiated by other users. See section  4.6.7   KILL  Syntax .      It is a good idea in general to grant privileges only to those users who need them, but you should exercise particular caution in granting certain privileges:          The  GRANT  privilege allows users to give away their privileges to other users.  Two users with different privileges and with the  GRANT  privilege are able to combine privileges.     The  ALTER  privilege may be used to subvert the privilege system by renaming tables.     The  FILE  privilege can be abused to read any world-readable file on the server or any file in the current database directory on the server into a database table, the contents of which can then be accessed using  SELECT .     The  SHUTDOWN  privilege can be abused to deny service to other users entirely, by terminating the server.     The  PROCESS  privilege can be used to view the plain text of currently executing queries, including queries that set or change passwords.     Privileges on the  mysql  database can be used to change passwords and other access privilege information.  (Passwords are stored encrypted, so a malicious user cannot simply read them to know the plain text password.)  If they can access the  mysql.user  password column, they can use it to log into the MySQL server for the given user.  (With sufficient privileges, the same user can replace a password with a different one.)      There are some things that you cannot do with the MySQL privilege system:          You cannot explicitly specify that a given user should be denied access. That is, you cannot explicitly match a user and then refuse the connection.     You cannot specify that a user has privileges to create or drop tables in a database but not to create or drop the database itself.        User Comments Posted by  phadeguy  on April 2 2002 7:39am [ Delete ] [ Edit ] I'm running into the situation where it would be  really nice for a connection to only have the  ability to SELECT and create/drop/insert/delete  TEMPORARY tables without having the privileges to  do this globally with all objects.  I didn't see  this option listed in any current or upcoming  release.  Can this function be implemented in  some sooner upcoming release?  I think others  might find it useful as well. Posted by  ute.diestel  on December 19 2002 3:27pm [ Delete ] [ Edit ] Note that:   ""To use ALTER TABLE, you need ALTER,  INSERT, and CREATE privileges on the table.""  http://www.mysql.com/doc/en/ALTER_TABLE.html Posted by Mike Hillyer on July 23 2003 7:34pm [ Delete ] [ Edit ] I believe the CREATE TEMPORARY TABLES privilege would be what you need to handle temporary tables without having global privileges. Posted by Dietrich Feist on November 25 2003 4:02am [ Delete ] [ Edit ] One workaround to give users permissions on temporary tables that you don't want to give them on regular tables is the following. We just have to keep in mind that users have the same access rights on temporary tables that they have on all tables in a particular database: 1) create a dedicated database for temporary tables: mysql> CREATE DATABASE tmp; 2) Give your users all the access privileges that they need to create and use temporary tables: mysql> GRANT SELECT, INSERT, UPDATE, DELETE, DROP, ALTER, CREATE TEMPORARY TABLES ON tmp.* TO user@localhost; Be sure that you do not give them CREATE or GRANT privileges! 3) Have you users create all temporary tables in that 'tmp' database instead of the current database: mysql> USE mydb mysql> CREATE TEMPORARY TABLE tmp.dummy SELECT * from mytable; Your users have to explicitly call their temporary tables as tmp.<tablename> in all requests. There is no problem if two users use the same name for a temporary table since they will not be able to see each other's temporary tables. You can also put the 'tmp' database on a dedicated disk. Add your own comment. Top  /  Previous  /  Next  /  Up  /  Table of Contents             MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX040-17-0628352	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Overview   Database Server   MaxDB   Control Center   Connector/J   Connector/ODBC   Connector/C++   MySQLGUI   Partners   Other Software                                          MySQL Licensing Policy   In Brief    This is our licensing policy in brief: Our software is 100% GPL, and   if your use of it is 100% GPL compliant, then you never have to pay us for   the licences. In all other instances, you are better served by our   commercial licence. Read the details below!    Licensing Details    MySQL software is licensed under the GPL license. The formal terms   of the GPL license can be found in the  GNU   General Public License  section of the MySQL Reference Manual.    MySQL is also available under commercial non-GPL license. For   pricing and ordering information, see our  online store    1. Free use for those who are 100% GPL    If your application is licensed under the GPL, you are free and   welcome to ship GPL licensed MySQL software with your application. By   ""application"" we mean any type of software application, system, tool or utility. For   doing this, you do not need a separate signed agreement with MySQL AB, because the   GPL text is sufficient. But we do recommend you to be in touch with us as there usually are good opportunities for partnership and co-marketing.    2. Free use for those who never copy, modify or distribute    As long as you never distribute MySQL software (or software that   forms a derivative work with MySQL software) in any way, you are free to use it   for powering your application, irrespective of the license the application   is under.    More specifically:    Modifying - You are allowed to modify GPL licensed MySQL software   any way you like. If you choose to distribute any software that forms a   derivative work with GPL licensed MySQL software then the entire derivative work must   be placed under the terms and conditions of the GPL.    Copying - You are allowed to copy MySQL binaries and source code, but when you do so, the copies will fall under the GPL license.    Derivative Work - A derivative work is a work that is based in whole   or in part on another work. Your national copyright law may provide additional information on when a derivative work is formed. If you are unsure of   whether or not your combination of GPL licensed MySQL software with other   software forms a derivative work, then we recommend placing the derivative work   under the GPL or purchasing a commercial license.    3. Commercial use for everyone else    If your application is  not  licensed under the GPL   and you intend to distribute MySQL software (be that internally or externally),   you must first obtain a commercial license to the MySQL software in   question.    More specifically:    a) If you include the MySQL server in your non-GPL licensed   application you need a commercial licence for the MySQL server.    b) If you include one of the MySQL drivers in your non-GPL licensed application (so that your application can run with MySQL), you need a commercial licence for the driver(s) in question. The MySQL drivers currently include an ODBC driver, a JDBC driver and the C language library.    c) If you desire a warranty for our software. Many users opt for the commercial licence simply because under it MySQL AB takes   responsibility for its products. Under the GPL licence, there are no warranties or   representations for the software.    4. Exceptions and free commercial licences    If you represent a non-profit organisation or an academic   institution, we recommend you to put your own application under GPL. Thereby you are   free to use MySQL software free of charge under the GPL licence. (We also   believe that if you have strong reasons  not  to go GPL, you   also have the monetary means to purchase commercial licences.)    If you are a private individual you are free to use MySQL software   for your personal applications, as long as you do not distribute them.    Please note that even if you ship a free demo version of your own application, the above rules apply.    5. Finally, what is the recommendation?    To all commercial organisations we do recommend the commercial   licence. Not only does this release you from the requirements of the GPL licence, it   also gives you a licence letter from MySQL AB where we assume responsibility   for our product. The GPL licence is an ""as is"" licence with no warranties whatsoever.    To all GPL/Open Source enthusiasts we do recommend our products   under the GPL licence. We believe that MySQL AB is the world's largest company   that offers all its software under the GPL licence. So help yourself to the   MySQL server and the drivers and feel the freedom of free software!    To anyone in doubt, we recommend the commercial licence. It is never   wrong. Thanks to our cost-effective way of producing software, we are able to   sell our commercial licences at prices well under the industry average, and this   is without compromising our own profitability. And, as evidenced by   benchmarks and our installed base of millions, our software beats the old legacy   databases in both performance and stability.    Older Versions    Note that older versions of the MySQL database server are still   using a  stricter license . See the documentation for the   specific version for more information.    MySQL Licenses    For circumstances under which a commercial non-GPL MySQL server   license is required, you need a license per database server (single installed MySQL binary). There are no restrictions on the number of connections, number   of CPUs, memory or disks to that one database server.    For circumstances under which a commercial non-GPL MySQL client   license is required, you need a license per each installed application.    When in doubt    If you have any questions on MySQL licensing, feel free to  contact us .   GPL = GNU General Public License,  http://www.gnu.org/  copyleft/gpl.html       “So even if I think I'm pretty smart about some aspects [of MySQL] -- and I do -- there was always the chance that the exam makers could grill me on stuff I'd never even looked at before. And they did. But they were fair at the same time.  Let me recount the whole experience... ”     Related pages: Prices Examples Send this page to a friend.        Subscribe to the monthly MySQL Newsletter!                          MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX113-06-1756036	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Overview   Database Server   MaxDB   Control Center   Connector/J   Connector/ODBC   Connector/C++   MySQLGUI   Partners   Other Software                                          MySQL Licensing Policy   In Brief    This is our licensing policy in brief: Our software is 100% GPL, and   if your use of it is 100% GPL compliant, then you never have to pay us for   the licences. In all other instances, you are better served by our   commercial licence. Read the details below!    Licensing Details    MySQL software is licensed under the GPL license. The formal terms   of the GPL license can be found in the  GNU   General Public License  section of the MySQL Reference Manual.    MySQL is also available under commercial non-GPL license. For   pricing and ordering information, see our  online store    1. Free use for those who are 100% GPL    If your application is licensed under the GPL, you are free and   welcome to ship GPL licensed MySQL software with your application. By   ""application"" we mean any type of software application, system, tool or utility. For   doing this, you do not need a separate signed agreement with MySQL AB, because the   GPL text is sufficient. But we do recommend you to be in touch with us as there usually are good opportunities for partnership and co-marketing.    2. Free use for those who never copy, modify or distribute    As long as you never distribute MySQL software (or software that   forms a derivative work with MySQL software) in any way, you are free to use it   for powering your application, irrespective of the license the application   is under.    More specifically:    Modifying - You are allowed to modify GPL licensed MySQL software   any way you like. If you choose to distribute any software that forms a   derivative work with GPL licensed MySQL software then the entire derivative work must   be placed under the terms and conditions of the GPL.    Copying - You are allowed to copy MySQL binaries and source code, but when you do so, the copies will fall under the GPL license.    Derivative Work - A derivative work is a work that is based in whole   or in part on another work. Your national copyright law may provide additional information on when a derivative work is formed. If you are unsure of   whether or not your combination of GPL licensed MySQL software with other   software forms a derivative work, then we recommend placing the derivative work   under the GPL or purchasing a commercial license.    3. Commercial use for everyone else    If your application is  not  licensed under the GPL   and you intend to distribute MySQL software (be that internally or externally),   you must first obtain a commercial license to the MySQL software in   question.    More specifically:    a) If you include the MySQL server in your non-GPL licensed   application you need a commercial licence for the MySQL server.    b) If you include one of the MySQL drivers in your non-GPL licensed application (so that your application can run with MySQL), you need a commercial licence for the driver(s) in question. The MySQL drivers currently include an ODBC driver, a JDBC driver and the C language library.    c) If you desire a warranty for our software. Many users opt for the commercial licence simply because under it MySQL AB takes   responsibility for its products. Under the GPL licence, there are no warranties or   representations for the software.    4. Exceptions and free commercial licences    If you represent a non-profit organisation or an academic   institution, we recommend you to put your own application under GPL. Thereby you are   free to use MySQL software free of charge under the GPL licence. (We also   believe that if you have strong reasons  not  to go GPL, you   also have the monetary means to purchase commercial licences.)    If you are a private individual you are free to use MySQL software   for your personal applications, as long as you do not distribute them.    Please note that even if you ship a free demo version of your own application, the above rules apply.    5. Finally, what is the recommendation?    To all commercial organisations we do recommend the commercial   licence. Not only does this release you from the requirements of the GPL licence, it   also gives you a licence letter from MySQL AB where we assume responsibility   for our product. The GPL licence is an ""as is"" licence with no warranties whatsoever.    To all GPL/Open Source enthusiasts we do recommend our products   under the GPL licence. We believe that MySQL AB is the world's largest company   that offers all its software under the GPL licence. So help yourself to the   MySQL server and the drivers and feel the freedom of free software!    To anyone in doubt, we recommend the commercial licence. It is never   wrong. Thanks to our cost-effective way of producing software, we are able to   sell our commercial licences at prices well under the industry average, and this   is without compromising our own profitability. And, as evidenced by   benchmarks and our installed base of millions, our software beats the old legacy   databases in both performance and stability.    Older Versions    Note that older versions of the MySQL database server are still   using a  stricter license . See the documentation for the   specific version for more information.    MySQL Licenses    For circumstances under which a commercial non-GPL MySQL server   license is required, you need a license per database server (single installed MySQL binary). There are no restrictions on the number of connections, number   of CPUs, memory or disks to that one database server.    For circumstances under which a commercial non-GPL MySQL client   license is required, you need a license per each installed application.    When in doubt    If you have any questions on MySQL licensing, feel free to  contact us .   GPL = GNU General Public License,  http://www.gnu.org/  copyleft/gpl.html     “We covered a lot. I feel much more comfortable with MySQL, how it works, what I can do, what I need to learn more about.”  —Tony Amidei, Compaq   Learn more about MySQL training....     Related pages: Prices Examples Send this page to a friend.        Subscribe to the monthly MySQL Newsletter!                          MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX018-26-6462552	"X-RAY CRYSTALLOGRAPHY METHODS (MORP) USED IN SOLVING STRUCTURES   As of Oct 29, 2003, BASED ON 22935 RELEASED ENTRIES           1. The breakdown numbers as YEAR are based on the deposition date      (on the right on the top line of a PDB file).   2* The numbers in 2002 and 2003 are still growing since some deposited      entries have not yet been released.   3. The X-RAY METHODS are taken from the record in the line of      ""REMARK 200  METHODS USED"".    4  MORP is the method involving molecular replacement.      -------------------------------------------------------        MR     = MOLECULAR_REPLACEMENT         MRDM   = MR_WITH_DIRECT_METHODS       MRAS   = MR_WITH_ANOMALOUS_SCATTERING       MRIR   = MR_WITH_ISOMORPHOUS_REPLACEMENT       MRASIR = MR_WITH_AS_AND_IR      -------------------------------------------------------           [  text only   ]           YEAR   MR   MRAS   MRIR   MRASIR   MORP       1995   11   0   0   0   11       1996   235   3   10   0   248       1997   617   2   16   5   640       1998   943   0   16   0   959       1999   684   1   4   0   689       2000   651   2   3   1   657       2001   1541   8   7   2   1558       2002   1563   5   1   1   1570       2003   841   5   2   0   848       SUM   7086   26   59   9   7180       (%)   98.7   0.4   0.8   0.1   n/a"
GX165-53-9902981	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Overview   Fact Sheet   Management   Press   Events   Partners   Affiliates   Newsletter   Jobs   Trademark   Contact Us                                          U.S. Census Bureau Reaps Awards from MySQL-based Web Sites 24 April 2002  Most Americans are aware that every ten years, the United States Census Bureau conducts a massive Census of the 105 million U.S. households to collect updated national demographic information. The Census data determines critical population information such as size, growth and geographic densities, as well as other vital statistics.  What many people don't know, is that the U.S. Census Bureau also creates and manages web sites that serve as highly-accessible resources for anyone looking for just about any kind of national or local statistic.   The Census Bureau's web development team has relied on the MySQL database server, as well as other open-source software such as Perl, Apache, Linux and PHP, to develop these highly-acclaimed and extraordinarily successful web sites.  In fact, one of the MySQL-run sites won the prestigious Census Bureau's Director's Award for Innovation in 2001, and the Bureau's web development team, which is led by Rachael LaPorte Taylor, senior technology architect for FedStats.gov at the Census Bureau, and Lisa Nyman, senior Internet technology architect, has begun serving as informal open-source consultants to their entire organization (of over 5,000 employees).   The Census Bureau has a site license for the Oracle RDBMS, but LaPorte Taylor notes that, ""We chose to use the MySQL database server because of its ease of installation, maintainability, configuration and speed. I've been using open source software since I got into the business, which was in '92,"" she continued.  ""MySQL has also provided us with huge cost savings, which we have been able to funnel into other resources.""    ""FedStats""  is a MySQL-powered portal to statistics produced by the Federal government.  Features include a display of the U.S.'s leading financial and economic indicators at a glance.  Users can use the site's powerful linking and searching capabilities to track economic and population trends, health care costs, aviation safety, foreign trade and more. With the ultra-fast MySQL database at the back end, users can access data from over 200,000 documents and from more than 70 federal agencies quickly and seamlessly.      ""MapStats"" , another feature of FedStats, is a dynamic MySQL-based application that delivers statistical profiles of states, counties and other local regions.  Like FedStats, it transparently aggregates data from many different sources within and outside the U.S. Census.  A popular site for many government agencies, MapStats has almost 70,000 records and relies heavily on the performance of the MySQL database to serve up statistics quickly and accurately.     The Census Bureau's MySQL-based  ""QuickFacts""  is an award-winning, user-friendly web site that provides state and county profiles with the latest Census statistics about people, business and geography. Visited by many students and others unaccustomed to using Census data, QuickFacts serves an average of 120,000 pages per day. It won the 2001 Census Bureau's Director's Award for Innovation in 2001.  The U.S. Census Bureau's open source-developed web sites have served as models of success for this government agency.  ""We've had a lot more traffic to our office because of our success with MySQL,"" said LaPorte Taylor.  ""We are now helping other departments within our agency develop applications with open source software, and we have future plans for more MySQL-based applications.""    Get Certified!  MySQL Professional Certification is now available.     Related pages: Share your story More success stories Send this page to a friend.        Subscribe to the monthly MySQL Newsletter!                          MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2004 MySQL AB. All rights reserved."
GX062-30-8403095	The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                      Search the MySQL manual:                                   MySQL Manual      1 Общая информация  1.6 Лицензии и поддержка MySQL  1.6.4 Логотипы и торговые марки MySQL AB  1.6.4.1 Оригинальный логотип MySQL  1.6.4.2 Логотипы MySQL, которые могут использоваться без письменного разрешения  1.6.4.3 В каком случае для использования логотипов необходимо письменное разрешение?  1.6.4.4 Партнерские логотипы MySQL AB  1.6.4.5 Использование слова  MySQL  в текстовых документах и презентациях  1.6.4.6 Использование слова  MySQL  в названиях компаний и продуктов        Additional languages       English French German Portuguese           Buy this Reference Manual in softcover from Barnes & Noble!            Additional formats       HTML, one page per chapter, tarball HTML, all on one page, tarball HTML, all on one page, ZIP               Subscribe to the monthly MySQL Newsletter!                    Previous  /  Next  /  Up  /  Table of Contents 1.6.4.2  Логотипы MySQL, которые могут использоваться без письменного разрешения     Мы разработали несколько специальных логотипов для договорного использования, которые можно загрузить с нашего сайта, расположенного по адресу  http://www.mysql.com/press/logos.html  и применять на сайтах третьих сторон без письменного разрешения MySQL AB. Возможности использования этих логотипов, как и следует из их названия, определенным образом ограничены: они регламентируются правилами применения наших торговых знаков (которые также приведены у нас на сайте). Если вы планируете использовать данные логотипы, необходимо ознакомиться с указанными правилами. Они в основном сводятся к следующим:          Нужный вам логотип вы можете использовать в том виде, в котором он приведен на сайте  http://www.mysql.com/ . Вы имеете право задать необходимые размеры логотипа, но не можете менять его цвета или вносить в изображение какие-либо другие изменения.     Должно быть явно указано, что именно вы, а не MySQL AB, являетесь создателем и владельцем сайта, на котором присутствует торговый знак MySQL.     Не разрешается использовать торговый знак в целях, которые могли бы принести вред MySQL AB или понизить ценность торговых знаков MySQL AB. Мы оставляем за собой право запретить использование торгового знака MySQL AB.     Помещая торговый знак на своем сайте, сделайте его гиперссылкой на сайт  http://www.mysql.com/ .     Если вы используете СУБД MySQL в своем приложении на условиях лицензии GPL, оно должно быть создано в соответствии с идеологией Open Source и снабжено способностью подсоединяться к серверу MySQL.      Связаться с нами с целью заключения соответствующих вашим потребностям соглашений можно по адресу  trademark@mysql.com .        User Comments Add your own comment. Top  /  Previous  /  Next  /  Up  /  Table of Contents             MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved.
GX001-50-3502676	"Go to the  first ,  previous ,  next ,  last  section,  table of contents .      6  The  MySQL  access privilege system      MySQL  has an advanced but non-standard security/privilege system.  This section describes how it works.        6.1  What the privilege system does     The primary function of the  MySQL  privilege system is to authenticate a user connecting from a given host, and to associate that user with  select ,  insert ,  update  and  delete  privileges on a database.      Additional functionality includes the ability to have an anonymous user and to grant privileges for  MySQL -specific functions such as  LOAD DATA INFILE  and administrative operations.       6.2   MySQL  user names and passwords     There are several distinctions between the way user names and passwords are used by  MySQL , and the way they are used by Unix or Windows:          User names, as used by  MySQL  for authentication purposes, have nothing to do with Unix user names (login names) or Windows user names.  Most  MySQL  clients by default try to log in using the current Unix user name as the  MySQL  user name, but that is for convenience only. Client programs allow a different name to be specified with the  -u  or  --user  options. This means that you can't make a database secure in any way unless all  MySQL  user names have passwords.  Anyone may attempt to connect to the server using any name, and they will succeed if they specify any name that doesn't have a password.      MySQL  user names can be up to 16 characters long; Unix user names typically are limited to 8 characters.      MySQL  passwords have nothing to do with Unix passwords.  There is no necessary connection between the password you use to log in to a Unix machine and the password you use to access a database on that machine.      MySQL  encrypts passwords using a different algorithm than the one used during the Unix login process.  See the descriptions of the  PASSWORD()  and  ENCRYPT()  functions in section  7.3.11  Miscellaneous functions .       6.3  Connecting to the  MySQL  server      MySQL  client programs generally require that you specify connection parameters when you want to access a  MySQL  server: the host you want to connect to, your user name and your password.  For example, the  mysql  client can be started like this (optional arguments are enclosed between  `['  and  `]' ):      shell> mysql [-h host_name] [-u user_name] [-pyour_pass]      Alternate forms of the  -h ,  -u  and  -p  options are  --host=host_name ,  --user=user_name  and  --password=your_pass .  Note that there is  no space  between  -p  or  --password=  and the password following it.       mysql  uses default values for connection parameters that are missing from the command line:          The default hostname is  localhost .     The default user name is your Unix login name.     No password is supplied if  -p  is missing.      Thus, for a Unix user  joe , the following commands are equivalent:      shell> mysql -h localhost -u joe shell> mysql -h localhost shell> mysql -u joe shell> mysql      Other  MySQL  clients behave similarly.      On Unix systems, you can specify different default values to be used when you make a connection, so that you need not enter them on the command line each time you invoke a client program.  This can be done in a couple of ways:            You can specify connection parameters in the  [client]  section of the  `.my.cnf'  configuration file in your home directory.  The relevant section of the file might look like this:    [client] host=host_name user=user_name password=your_pass    See section  4.15.4  Option files .                         You can specify connection parameters using environment values.  The host can be specified using  MYSQL_HOST .  The  MySQL  user name can be specified using  USER ,  LOGNAME  or  LOGIN  (although these variables might already be set to your Unix login name, and it may be unwise to change them).  The password can be specified using  MYSQL_PWD  (but this is insecure; see next section).        If connection parameters are specified in multiple ways, values specified on the command line take precedence over values specified in configuration files and environment variables, and values in configuration files take precedence over values in environment variables.       6.4  Keeping your password secure     It is inadvisable to specify your password in a way that exposes it to discovery by other users.  The methods you can use to specify your password when you run client programs are listed below, along with an assessment of the risks of each method:          Use a  -pyour_pass  or  --password=your_pass  option on the command line.  This is convenient but insecure, since your password becomes visible to system status programs (such as  ps ) that may be invoked by other users to display command lines.  ( MySQL  clients typically overwrite the command line argument with zeroes during their initialization sequence, but there is still a brief interval during which the value is visible.)     Use a  -p  or  --password  option (with no  your_pass  value specified).  In this case, the client program solicits the password from the terminal:    shell> mysql -u user_name -p Enter password: ********    The client echoes  `*'  characters to the terminal as you enter your password so that onlookers cannot see it.  It is more secure to enter your password this way than to specify it on the command line because it is not visible to other users.  However, this method of entering a password is suitable only for programs that you run interactively.  If you want to invoke a client from a script that runs non-interactively, there is no opportunity to enter the password from the terminal.       Store your password in a configuration file.  For example, you can list your password in the  [client]  section of the  `.my.cnf'  file in your home directory:    [client] password=your_pass    If you store your password in  `.my.cnf' , the file should not be group or world readable or writable.  Make sure the file's access mode is  400  or  600 .  See section  4.15.4  Option files .    You can store your password in the  MYSQL_PWD  environment variable, but this method must be considered extremely insecure and should not be used. Some versions of  ps  include an option to display the environment of running processes; your password will be in plain sight for all to see if you set  MYSQL_PWD .  Even on systems without such a version of  ps , it is unwise to assume there is no other method to observe process environments.      All in all, the safest methods are to have the client program prompt for the password or to specify the password in a properly-protected  `.my.cnf'  file.       6.5  Privileges provided by  MySQL     Privilege information is stored in the  user ,  db ,  host ,  tables_priv  and  columns_priv  tables in the  mysql  database (that is, in the database named  mysql ).  The  MySQL  server reads the contents of these tables when it starts up and under the circumstances indicated in section  6.9  When privilege changes take effect .      The names used in this manual to refer to the privileges provided by  MySQL  are shown below, along with the table column name associated with each privilege in the grant tables and the context in which the privilege applies:       Privilege     Column     Context     select     Select_priv    tables    insert     Insert_priv    tables    update     Update_priv    tables    delete     Delete_priv    tables    index     Index_priv    tables    alter     Alter_priv    tables    create     Create_priv    databases, tables or indexes    drop     Drop_priv    databases or tables    grant     Grant_priv    databases or tables    reload     Reload_priv    server administration    shutdown     Shutdown_priv    server administration    process     Process_priv    server administration    file     File_priv    file access on server        The  select ,  insert ,  update  and  delete  privileges allow you to perform operations on rows in existing tables in a database.       SELECT  statements require the  select  privilege only if they actually retrieve rows from a table.  You can execute certain  SELECT  statements even without permission to access any of the databases on the server.  For example, you could use the  mysql  client as a simple calculator:      mysql> SELECT 1+1; mysql> SELECT PI()*2;      The  index  privilege allows you to create or drop (remove) indexes.      The  alter  privilege allows you to use  ALTER TABLE .      The  create  and  drop  privileges allow you to create new databases and tables, or to drop (remove) existing databases and tables.      Note that if you grant the  drop  privilege for the  mysql  database to a user, that user can drop the database in which the  MySQL  access privileges are stored!      The  grant  privilege allows you to give to other users those privileges you yourself possess.      The  file  privilege gives you permission to read and write files on the server using the  LOAD DATA INFILE  and  SELECT ... INTO OUTFILE  statements.  Any user to whom this privilege is granted can read or write any file that the  MySQL  server can read or write.      The remaining privileges are used for administrative operations, which are performed using the  mysqladmin  program.  The table below shows which  mysqladmin  commands each administrative privilege allows you to execute:       Privilege     Commands permitted to privilege holders     reload     reload ,  refresh ,  flush-privileges ,  flush-hosts ,  flush-logs ,  flush-tables     shutdown     shutdown     process     processlist ,  kill         The  reload  command tells the server to reread the grant tables.  The  refresh  command flushes all tables and opens and closes the log files.   flush-privileges  is a synonym for  reload .  The other  flush-*  commands perform functions similar to  refresh  but are more limited in scope, and may be preferable in some instances.  For example, if you want to flush just the log files,  flush-logs  is a better choice than  refresh .      The  shutdown  command shuts down the server.      The  processlist  command displays information about the threads executing within the server.  The  kill  command kills server threads. You can always display or kill your own threads, but you need the  process  privilege to display or kill threads initiated by other users.      It is a good idea in general to grant privileges only to those users who need them, but you should exercise particular caution in granting certain privileges:          The  grant  privilege allows users to give away their privileges to other users.  Two users with different privileges and with the  grant  privilege are able to combine privileges.     The  alter  privilege may be used to subvert the privilege system by renaming tables.     The  file  privilege can be abused to read any world-readable file on the server into a database table, the contents of which can then be accessed using  SELECT .     The  shutdown  privilege can be abused to deny service to other users entirely, by terminating the server.     The  process  privilege can be used to view the plain text of currently executing queries, including queries that set or change passwords.     Privileges on the  mysql  database can be used to change passwords and other access privilege information.  (Passwords are stored encrypted, so a malicious user cannot simply read them.  However, with sufficient privileges, that same user can replace a password with a different one.)      There are some things that you cannot do with the  MySQL  privilege system:          You cannot explicitly specify that a given user should be denied access. That is, you cannot explicitly match a user and then refuse the connection.     You cannot specify that a user has privileges to create or drop tables in a database but not to create or drop the database itself.       6.6  How the privilege system works     The  MySQL  privilege system ensures that all users may do exactly the things that they are supposed to be allowed to do.  When you connect to a  MySQL  server, your identity is determined by  the host from which you connect  and  the user name you specify .  The system grants privileges according to your identity and  what you want to do .       MySQL  considers both your hostname and user name in identifying you because there is little reason to assume that a given user name belongs to the same person everywhere on the Internet.  For example, the user  bill  who connects from  whitehouse.gov  need not be the same person as the user  bill  who connects from  microsoft.com .  MySQL  handles this by allowing you to distinguish users on different hosts that happen to have the same name:  you can grant  bill  one set of privileges for connections from  whitehouse.gov , and a different set of privileges for connections from  microsoft.com .       MySQL  access control involves two stages:          Stage 1: The server checks whether or not you are even allowed to connect.     Stage 2: Assuming you can connect, the server checks each request you issue to see whether or not you have sufficient privileges to perform it.  For example, if you try to select rows from a table in a database or drop a table from the database, the server makes sure you have the  select  privilege for the table or the  drop  privilege for the database.      The server uses the  user ,  db  and  host  tables in the  mysql  database at both stages of access control.  The fields in these grant tables are shown below:       Table name     user     db     host      Scope fields     Host     Host     Host       User     Db     Db       Password     User        Privilege fields     Select_priv     Select_priv     Select_priv       Insert_priv     Insert_priv     Insert_priv       Update_priv     Update_priv     Update_priv       Delete_priv     Delete_priv     Delete_priv       Index_priv     Index_priv     Index_priv       Alter_priv     Alter_priv     Alter_priv       Create_priv     Create_priv     Create_priv       Drop_priv     Drop_priv     Drop_priv       Grant_priv     Grant_priv     Grant_priv       Reload_priv            Shutdown_priv            Process_priv            File_priv              For the second stage of access control (request verification), the server may, if the request involves tables, additionally consult the  tables_priv  and  columns_priv  tables.  The fields in these tables are shown below:       Table name     tables_priv     columns_priv      Scope fields     Host     Host       Db     Db       User     User       Table_name     Table_name         Column_name      Privilege fields     Table_priv     Column_priv       Column_priv        Other fields     Timestamp     Timestamp       Grantor           Each grant table contains scope fields and privilege fields.      Scope fields determine the scope of each entry in the tables, i.e., the context in which the entry applies.  For example, a  user  table entry with  Host  and  User  values of  'thomas.loc.gov'  and  'bob'  would be used for authenticating connections made to the server by  bob  from the host  thomas.loc.gov .  Similarly, a  db  table entry with  Host ,  User  and  Db  fields of  'thomas.loc.gov' ,  'bob'  and  'reports'  would be used when  bob  connects from the host  thomas.loc.gov  to access the  reports  database.  The  tables_priv  and  columns_priv  tables contain scope fields indicating tables or table/column combinations to which each entry applies.        For access-checking purposes, comparisons of  Host  values are case insensitive.   User ,  Password ,  Db  and  Table_name  values are case sensitive.  Column_name  values are case insensitive in  MySQL  3.22.12 or later.      Privilege fields indicate the privileges granted by a table entry, that is, what operations can be performed.  The server combines the information in the various grant tables to form a complete description of a user's privileges. The rules used to do this are described in section  6.8  Access control, stage 2: Request verification .      Scope fields are strings, declared as shown below; the default value for each is the empty string:       Field name     Type     Host     CHAR(60)     User     CHAR(16)     Password     CHAR(16)     Db     CHAR(64)    ( CHAR(60)  for the  tables_priv  and  columns_priv  tables)        In the  user ,  db  and  host  tables, all privilege fields are declared as  ENUM('N','Y')  -- each can have a value of  'N'  or  'Y' , and the default value is  'N' .      In the  tables_priv  and  columns_priv  tables, the privilege fields are declared as  SET  fields:       Table name     Field name     Possible set elements     tables_priv     Table_priv     'Select', 'Insert', 'Update', 'Delete', 'Create', 'Drop', 'Grant', 'References', 'Index', 'Alter'     tables_priv     Column_priv     'Select', 'Insert', 'Update', 'References'     columns_priv     Column_priv     'Select', 'Insert', 'Update', 'References'         Briefly, the server uses the grant tables like this:          The  user  table scope fields determine whether to allow or reject incoming connections.  For allowed connections, the privilege fields indicate the user's global (superuser) privileges.     The  db  and  host  tables are used together:        The  db  table scope fields determine which users can access which databases from which hosts.  The privilege fields determine which operations are allowed.     The  host  table is used as an extension of the  db  table when you want a given  db  table entry to apply to several hosts.  For example, if you want a user to be able to use a database from several hosts in your network, leave the  Host  value empty in the user's  db  table entry, then populate the  host  table with an entry for each of those hosts.  This mechanism is described more detail in section  6.8  Access control, stage 2: Request verification .       The  tables_priv  and  columns_priv  tables are similar to the  db  table, but are more fine-grained: they apply at the table and column level rather than at the database level.      Note that administrative privileges ( reload ,  shutdown , etc.) are specified only in the  user  table.  This is because administrative operations are operations on the server itself and are not database-specific, so there is no reason to list such privileges in the other grant tables.  In fact, only the  user  table need be consulted to determine whether or not you can perform an administrative operation.      The  file  privilege is specified only in the  user  table, too. It is not an administrative privilege as such, but your ability to read or write files on the server host is independent of the database you are accessing.      The  mysqld  server reads the contents of the grant tables once, when it starts up.  Changes to the grant tables take effect as indicated in section  6.9  When privilege changes take effect .      When you modify the contents of the grant tables, it is a good idea to make sure that your changes set up privileges the way you want.  For help in diagnosing problems, see section  6.13  Causes of  Access denied  errors .  For advice on security issues, section  6.14  How to make  MySQL  secure against crackers .      A useful diagnostic tool is the  mysqlaccess  script, which Yves Carlier has provided for the  MySQL  distribution.  Invoke  mysqlaccess  with the  --help  option to find out how it works. Note that  mysqlaccess  checks access using only the  user ,  db  and  host  tables.  It does not check table- or column-level privileges.       6.7  Access control, stage 1: Connection verification     When you attempt to connect to a  MySQL  server, the server accepts or rejects the connection based on your identity and whether or not you can verify your identity by supplying the correct password.  If not, the server denies access to you completely.  Otherwise, the server accepts the connection, then enters stage 2 and waits for requests.      Your identity is based on two pieces of information:          The host from which you connect     Your  MySQL  user name      Identity checking is performed using the three  user  table scope fields ( Host ,  User  and  Password ).  The server accepts the connection only if a  user  table entry matches your hostname and user name, and you supply the correct password.      Values in the  user  table scope fields may be specified as follows:          A  Host  value may be a hostname or an IP number, or  'localhost'  to indicate the local host.       You can use the wildcard characters  `%'  and  `_'  in the  Host  field.     A  Host  value of  '%'  matches any hostname.  A blank  Host  value is equivalent to  '%' .  Note that these values match  any host that can create a connection to your server!        Wildcard characters are not allowed in the  User  field, but you can specify a blank value, which matches any name.  If the  user  table entry that matches an incoming connection has a blank user name, the user is considered to be the anonymous user (the user with no name), rather than the name that the client actually specified.  This means that a blank user name is used for all further access checking for the duration of the connection (that is, during stage 2).     The  Password  field can be blank.  This does not mean that any password matches, it means the user must connect without specifying a password.        Non-blank  Password  values represent encrypted passwords.  MySQL  does not store passwords in plaintext form for anyone to see. Rather, the password supplied by a user who is attempting to connect is encrypted (using the  PASSWORD()  function) and compared to the already-encrypted version stored in the  user  table.  If they match, the password is correct.      The examples below show how various combinations of  Host  and  User  values in  user  table entries apply to incoming connections:       Host   value     User   value     Connections matched by entry     'thomas.loc.gov'  @tab  'fred'  @tab  fred , connecting from  thomas.loc.gov     'thomas.loc.gov'  @tab  ""  @tab Any user, connecting from  thomas.loc.gov     '%'  @tab  'fred'  @tab  fred , connecting from any host    '%'  @tab   ""  @tab Any user, connecting from any host    '%.loc.gov'  @tab  'fred'  @tab  fred , connecting from any host in the  loc.gov  domain    'x.y.%'  @tab  'fred'  @tab  fred , connecting from  x.y.net ,  x.y.com ,  x.y.edu , etc. (this is probably not useful)    '144.155.166.177'  @tab  'fred'  @tab  fred , connecting from the host with IP address  144.155.166.177     '144.155.166.%'  @tab  'fred'  @tab  fred , connecting from any host in the  144.155.166  class C subnet        Since you can use IP wildcard values in the  Host  field (e.g.,  '144.155.166.%'  to match every host on a subnet), there is the possibility that someone might try to exploit this capability by naming a host  144.155.166.somewhere.com .  To foil such attempts,  MySQL  disallows matching on hostnames that start with digits and a dot. Thus, if you have a host named something like  1.2.foo.com , its name will never match the  Host  column of the grant tables.  Only an IP number can match an IP wildcard value.      An incoming connection may be matched by more than one entry in the  user  table.  For example, a connection from  thomas.loc.gov  by  fred  would be matched by several of the entries just shown above.  How does the server choose which entry to use if more than one matches?  The server resolves this question by sorting the  user  table after reading it at startup time, then looking through the entries in sorted order when a user attempts to connect.  The first matching entry is the one that is used.       user  table sorting works as follows.  Suppose the  user  table looks like this:      +-----------+----------+- | Host      | User     | ... +-----------+----------+- | %         | root     | ... | %         | jeffrey  | ... | localhost | root     | ... | localhost |          | ... +-----------+----------+-      When the server reads in the table, it orders the entries with the most-specific  Host  values first ( '%'  in the  Host  column means ""any host"" and is least specific).  Entries with the same  Host  value are ordered with the most-specific  User  values first (a blank  User  value means ""any user"" and is least specific).  The resulting sorted  user  table looks like this:      +-----------+----------+- | Host      | User     | ... +-----------+----------+- | localhost | root     | ... | localhost |          | ... | %         | jeffrey  | ... | %         | root     | ... +-----------+----------+-            When a connection is attempted, the server looks through the sorted entries and uses the first match found.  For a connection from  localhost  by  jeffrey , the entries with  'localhost'  in the  Host  column match first.  Of those, the entry with the blank user name matches both the connecting hostname and user name.  (The  '%'/'jeffrey'  entry would have matched, too, but it is not the first match in the table.)      Here is another example.  Suppose the  user  table looks like this:      +----------------+----------+- | Host           | User     | ... +----------------+----------+- | %              | jeffrey  | ... | thomas.loc.gov |          | ... +----------------+----------+-      The sorted table looks like this:      +----------------+----------+- | Host           | User     | ... +----------------+----------+- | thomas.loc.gov |          | ... | %              | jeffrey  | ... +----------------+----------+-      A connection from  thomas.loc.gov  by  jeffrey  is matched by the first entry, whereas a connection from  whitehouse.gov  by  jeffrey  is matched by the second.      A common misconception is to think that for a given user name, all entries that explicitly name that user will be used first when the server attempts to find a match for the connection.  This is simply not true.  The previous example illustrates this, where a connection from  thomas.loc.gov  by  jeffrey  is first matched not by the entry containing  'jeffrey'  as the  User  field value, but by the entry with no user name!      If you have problems connecting to the server, print out the  user  table and sort it by hand to see where the first match is being made.       6.8  Access control, stage 2: Request verification     Once you establish a connection, the server enters stage 2.  For each request that comes in on the connection, the server checks whether you have sufficient privileges to perform it, based on the type of operation you wish to perform.  This is where the privilege fields in the grant tables come into play.  These privileges can come from any of the  user ,  db ,  host ,  tables_priv  or  columns_priv  tables.  The grant tables are manipulated with  GRANT  and  REVOKE  commands. See section  7.25   GRANT  and  REVOKE  syntax .  (You may find it helpful to refer to section  6.6  How the privilege system works , which lists the fields present in each of the grant tables.)      The  user  table grants privileges that are assigned to you on a global basis and that apply no matter what the current database is.  For example, if the  user  table grants you the  delete  privilege, you can delete rows from any database on the server host!  In other words,  user  table privileges are superuser privileges.  It is wise to grant privileges in the  user  table only to superusers such as server or database administrators.  For other users, you should leave the privileges in the  user  table set to  'N'  and grant privileges on a database-specific basis only, using the  db  and  host  tables.            The  db  and  host  tables grant database-specific privileges. Values in the scope fields may be specified as follows:          The wildcard characters  `%'  and  `_'  can be used in the  Host  and  Db  fields of either table.     A  '%'   Host  value in the  db  table means ""any host."" A blank  Host  value in the  db  table means ""consult the  host  table for further information.""     A  '%'  or blank  Host  value in the  host  table means ""any host.""     A  '%'  or blank  Db  value in either table means ""any database.""     A blank  User  value in either table matches the anonymous user.              The  db  and  host  tables are read in and sorted when the server starts up (at the same time that it reads the  user  table).  The  db  table is sorted on the  Host ,  Db  and  User  scope fields, and the  host  table is sorted on the  Host  and  Db  scope fields.  As with the  user  table, sorting puts the most-specific values first and least-specific values last, and when the server looks for matching entries, it uses the first match that it finds.           The  tables_priv  and  columns_priv  tables grant table- and column-specific privileges.  Values in the scope fields may be specified as follows:          The wildcard characters  `%'  and  `_'  can be used in the  Host  field of either table.     A  '%'  or blank  Host  value in either table means ""any host.""     The  Db ,  Table_name  and  Column_name  fields cannot contain wildcards or be blank in either table.      The  tables_priv  and  columns_priv  tables are sorted on the  Host ,  Db  and  User  fields.  This is similar to  db  table sorting, although since only the  Host  field may contain wildcards, the sorting is simpler.      The request verification process is described below.  (If you are familiar with the access-checking source code, you will notice that the description here differs slightly from the algorithm used in the code.  The description is equivalent to what the code actually does; it differs only to make the explanation simpler.)      For administrative requests ( shutdown ,  reload , etc.), the server checks only the  user  table entry, since that is the only table that specifies administrative privileges.  Access is granted if the entry allows the requested operation and denied otherwise.  For example, if you want to execute  mysqladmin shutdown  but your  user  table entry doesn't grant the  shutdown  privilege to you, access is denied without even checking the  db  or  host  tables.  (Since they contain no  Shutdown_priv  column, there is no need to do so.)      For database-related requests ( insert ,  update , etc.), the server first checks the user's global (superuser) privileges by looking in the  user  table entry.  If the entry allows the requested operation, access is granted.  If the global privileges in the  user  table are insufficient, the server determines the user's database-specific privileges by checking the  db  and  host  tables:          The server looks in the  db  table for a match on the  Host ,  Db  and  User  fields.   Host  and  User  are matched to the connecting user's hostname and  MySQL  user name.  The  Db  field is matched to the database the user wants to access.  If there is no entry for the  Host  and  User , access is denied.     If there is a matching  db  table entry and its  Host  field is not blank, that entry defines the user's database-specific privileges.     If the matching  db  table entry's  Host  field is blank, it signifies that the  host  table enumerates which hosts should be allowed access to the database.  In this case, a further lookup is done in the  host  table to find a match on the  Host  and  Db  fields. If no  host  table entry matches, access is denied.  If there is a match, the user's database-specific privileges are computed as the intersection ( not  the union!) of the privileges in the  db  and  host  table entries, i.e., the privileges that are  'Y'  in both entries.  (This way you can grant general privileges in the  db  table entry and then selectively restrict them on a host-by-host basis using the  host  table entries.)      After determining the database-specific privileges granted by the  db  and  host  table entries, the server adds them to the global privileges granted by the  user  table.  If the result allows the requested operation, access is granted.  Otherwise, the server checks the user's table and column privileges in the  tables_priv  and  columns_priv  tables and adds those to the user's privileges.  Access is allowed or denied based on the result.      Expressed in boolean terms, the preceding description of how a user's privileges are calculated may be summarized like this:      global privileges OR (database privileges AND host privileges) OR table privileges OR column privileges      It may not be apparent why, if the global  user  entry privileges are initially found to be insufficient for the requested operation, the server adds those privileges to the database-, table- and column-specific privileges later. The reason is that a request might require more than one type of privilege.  For example, if you execute an  INSERT ...  SELECT  statement, you need both  insert  and  select  privileges. Your privileges might be such that the  user  table entry grants one privilege and the  db  table entry grants the other.  In this case, you have the necessary privileges to perform the request, but the server cannot tell that from either table by itself; the privileges granted by both entries must be combined.      The  host  table can be used to maintain a list of ""secure"" servers. At TcX, the  host  table contains a list of all machines on the local network. These are granted all privileges.      You can also use the  host  table to indicate hosts that are  not  secure.  Suppose you have a machine  public.your.domain  that is located in a public area that you do not consider secure.  You can allow access to all hosts on your network except that machine by using  host  table entries like this:      +--------------------+----+- | Host               | Db | ... +--------------------+----+- | public.your.domain | %  | ... (all privileges set to 'N') | %.your.domain      | %  | ... (all privileges set to 'Y') +--------------------+----+-      Naturally, you should always test your entries in the grant tables (e.g., using  mysqlaccess ) to make sure your access privileges are actually set up the way you think they are.       6.9  When privilege changes take effect     When  mysqld  starts, all grant table contents are read into memory and become effective at that point.      Modifications to the grant tables that you perform using  GRANT ,  REVOKE , or  SET PASSWORD  are noticed by the server immediately.      If you modify the grant tables manually (using  INSERT ,  UPDATE , etc.), you should execute a  FLUSH PRIVILEGES  statement or run  mysqladmin flush-privileges  to tell the server to reload the grant tables.  Otherwise your changes will have  no effect  until you restart the server.      When the server notices that the grant tables have been changed, existing client connections are affected as follows:          Table and column privilege changes take effect with the client's next request.     Database privilege changes take effect at the next  USE db_name  command.      Global privilege changes and password changes take effect the next time the client connects.       6.10  Setting up the initial  MySQL  privileges     After installing  MySQL , you set up the initial access privileges by running  scripts/mysql_install_db . See section  4.7.1  Quick installation overview . The  scripts/mysql_install_db  script starts up the  mysqld  server, then initializes the grant tables to contain the following set of privileges:          The  MySQL   root  user is created as a superuser who can do anything.  Connections must be made from the local host.   Note:  The initial  root  password is empty, so anyone can connect as  root   without a password  and be granted all privileges.       An anonymous user is created that can do anything with databases that have a name of  'test'  or starting with  'test_' .  Connections must be made from the local host.  This means any local user can connect and be treated as the anonymous user.     Other privileges are denied.  For example, normal users can't use  mysqladmin shutdown  or  mysqladmin processlist .       Note:  The default privileges are different for Win32. See section  4.12.4  Running  MySQL  on Win32 .       Since your installation is initially wide open, one of the first things you should do is specify a password for the  MySQL   root  user.  You can do this as follows (note that you specify the password using the  PASSWORD()  function):      shell> mysql -u root mysql mysql> UPDATE user SET Password=PASSWORD('new_password')            WHERE user='root'; mysql> FLUSH PRIVILEGES;      You can also use the  SET PASSWORD  statement:      shell> mysql -u root mysql mysql> SET PASSWORD FOR root=PASSWORD('new_password');      Another way to set the password is by using the  mysqladmin  command:      shell> mysqladmin -u root password new_password      Note that if you update the password in the  user  table directly using the first method, you must tell the server to reread the grant tables (with  FLUSH PRIVILEGES ), since the change will go unnoticed otherwise.      Once the  root  password has been set, thereafter you must supply that password when you connect to the server as  root .      You may wish to leave the  root  password blank so that you don't need to specify it while you perform additional setup or testing, but be sure to set it before using your installation for any real production work.      See the  scripts/mysql_install_db  script to see how it sets up the default privileges.  You can use this as a basis to see how to add other users.      If you want the initial privileges to be different than those just described above, you can modify  mysql_install_db  before you run it.      To recreate the grant tables completely, remove all the  `*.ISM'  and  `*.ISD'  files in the directory containing the  mysql  database. (This is the directory named  `mysql'  under the database directory, which is listed when you run  mysqld --help .) Then run the  mysql_install_db  script, possibly after editing it first to have the privileges you want.       6.11  Adding new user privileges to  MySQL     You can add users two different ways: by using  GRANT  statements or by manipulating the  MySQL  grant tables directly.  The preferred method is to use  GRANT  statements, because they are more concise and less error-prone.      The examples below show how to use the  mysql  client to set up new users.  These examples assume that privileges are set up according to the defaults described in the previous section.  This means that to make changes, you must be on the same machine where  mysqld  is running, you must connect as the  MySQL   root  user, and the  root  user must have the  insert  privilege for the  mysql  database and the  reload  administrative privilege.  Also, if you have changed the  root  user password, you must specify it for the  mysql  commands below.      You can add new users by issuing  GRANT  statements:      shell> mysql --user=root mysql mysql> GRANT ALL PRIVILEGES ON *.* TO monty@localhost            IDENTIFIED BY 'something' WITH GRANT OPTION; mysql> GRANT ALL PRIVILEGES ON *.* TO monty@""%""            IDENTIFIED BY 'something' WITH GRANT OPTION; mysql> GRANT RELOAD,PROCESS ON *.* TO admin@localhost; mysql> GRANT USAGE ON *.* TO dummy@localhost;      These  GRANT  statements set up three new users:        monty    A full superuser who can connect to the server from anywhere, but who must use a password ( 'something'  to do so.  Note that we must issue  GRANT  statements for both  monty@localhost  and  monty@""%"" .  If we don't add the entry with  localhost , the anonymous user entry for  localhost  that is created by  mysql_install_db  will take precedence when we connect from the local host, because it has a more specific  Host  field value and thuse comes earlier in the  user  table sort order.   admin    A user who can connect from  localhost  without a password and who is granted the  reload  and  process  administrative privileges. This allows the user to execute the  mysqladmin reload ,  mysqladmin refresh  and  mysqladmin flush-*  commands, as well as  mysqladmin processlist  .  No database-related privileges are granted. They can be granted later by issuing additional  GRANT  statements.   dummy    A user who can connect without a password, but only from the local host.  The global privileges are all set to  'N'  -- the  USAGE  privilege type allows you to set up a user with no privileges.  It is assumed that you will grant database-specific privileges later.      You can also add the same user access information directly by issuing  INSERT  statements and then telling the server to reload the grant tables:      shell> mysql --user=root mysql mysql> INSERT INTO user VALUES('localhost','monty',PASSWORD('something'),                 'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y') mysql> INSERT INTO user VALUES('%','monty',PASSWORD('something'),                 'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y') mysql> INSERT INTO user SET Host='localhost',User='admin',                  Reload_priv='Y', Process_priv='Y'; mysql> INSERT INTO user (Host,User,Password)                         VALUES('localhost','dummy',""); mysql> FLUSH PRIVILEGES;      Depending on your  MySQL  version, you may have to use a different number of  'Y'  values above (versions prior to 3.22.11 had fewer privilege columns).  For the  admin  user, the more readable extended  INSERT  syntax that is available starting with 3.22.11 is used.      Note that to set up a superuser, you need only create a  user  table entry with the privilege fields set to  'Y' .  No  db  or  host  table entries are necessary.      The privilege columns in the  user  table were not set explicitly in the last  INSERT  statement (for the  dummy  user), so those columns are assigned the default value of  'N' .  This is the same thing that  GRANT USAGE  does.      The following example adds a user  custom  who can connect from hosts  localhost ,  server.domain  and  whitehouse.gov .  He wants to access the  bankaccount  database only from  localhost , the  expenses  database only from  whitehouse.gov  and the  customer  database from all three hosts.  He wants to use the password  stupid  from all three hosts.      To set up this user's privileges using  GRANT  statements, run these commands:      shell> mysql --user=root mysql mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP            ON bankaccount.*            TO custom@localhost            IDENTIFIED BY 'stupid'; mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP            ON expenses.*            TO custom@whitehouse.gov            IDENTIFIED BY 'stupid'; mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP            ON customer.*            TO custom@'%'            IDENTIFIED BY 'stupid';      To set up the user's privileges by modifying the grant tables directly, run these commands (note the  FLUSH PRIVILEGES  at the end):      shell> mysql --user=root mysql mysql> INSERT INTO user (Host,User,Password)        VALUES('localhost','custom',PASSWORD('stupid')); mysql> INSERT INTO user (Host,User,Password)        VALUES('server.domain','custom',PASSWORD('stupid')); mysql> INSERT INTO user (Host,User,Password)        VALUES('whitehouse.gov','custom',PASSWORD('stupid')); mysql> INSERT INTO db        (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,         Create_priv,Drop_priv)        VALUES        ('localhost','bankaccount','custom','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO db        (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,         Create_priv,Drop_priv)        VALUES        ('whitehouse.gov','expenses','custom','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO db        (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,         Create_priv,Drop_priv)        VALUES('%','customer','custom','Y','Y','Y','Y','Y','Y'); mysql> FLUSH PRIVILEGES;      The first three  INSERT  statements add  user  table entries that allow user  custom  to connect from the various hosts with the given password, but grant no permissions to him (all privileges are set to the default value of  'N' ).  The next three  INSERT  statements add  db  table entries that grant privileges to  custom  for the  bankaccount ,  expenses  and  customer  databases, but only when accessed from the proper hosts.  As usual, when the grant tables are modified directly, the server must be told to reload them (with  FLUSH PRIVILEGES ) so that the privilege changes take effect.      If you want to give a specific user access from any machine in a given domain, you can issue a  GRANT  statement like the following:      mysql> GRANT ...            ON *.*            TO myusername@""%.mydomainname.com""            IDENTIFIED BY 'mypassword';      To do the same thing by modifying the grant tables directly, do this:      mysql> INSERT INTO user VALUES ('%.mydomainname.com', 'myusername',            PASSWORD('mypassword'),...); mysql> FLUSH PRIVILEGES;      You can also use  xmysqladmin ,  mysql_webadmin  and even  xmysql  to insert, change and update values in the grant tables. You can find these utilities at the  MySQL   Contrib directory .       6.12  How to set up passwords             The examples in the preceding sections illustrate an important principle: when you store a non-empty password using  INSERT  or  UPDATE  statements, you must use the  PASSWORD()  function to encrypt it.  This is because the  user  table stores passwords in encrypted form, not as plaintext.  If you forget that fact, you are likely to attempt to set passwords like this:      shell> mysql -u root mysql mysql> INSERT INTO user (Host,User,Password)        VALUES('%','jeffrey','biscuit'); mysql> FLUSH PRIVILEGES;      The result is that the plaintext value  'biscuit'  is stored as the password in the  user  table.  When the user  jeffrey  attempts to connect to the server using this password, the  mysql  client encrypts it with  PASSWORD()  and sends the result to the server.  The server compares the value in the  user  table (which is the plaintext value  'biscuit' ) to the encrypted password (which is  not   'biscuit' ).  The comparison fails and the server rejects the connection:      shell> mysql -u jeffrey -pbiscuit test Access denied      Since passwords must be encrypted when they are inserted in the  user  table, the  INSERT  statement should have been specified like this instead:      mysql> INSERT INTO user (Host,User,Password)        VALUES('%','jeffrey',PASSWORD('biscuit'));      You must also use the  PASSWORD()  function when you use  SET PASSWORD  statements:      mysql> SET PASSWORD FOR jeffrey@""%"" = PASSWORD('biscuit');      If you set passwords using the  GRANT ... IDENTIFIED BY  statement or the  mysqladmin password  command, the  PASSWORD()  function is unnecessary.  They both take care of encrypting the password for you, so you would specify a password of  'biscuit'  like this:      mysql> GRANT USAGE ON *.* TO jeffrey@""%"" IDENTIFIED BY 'biscuit';      or      shell> mysqladmin -u jeffrey password biscuit      Note:  PASSWORD()  does not perform password encryption in the same way that Unix passwords are encrypted.  You should not assume that if your Unix password and your  MySQL  password are the same,  PASSWORD()  will result in the same encrypted value as is stored in the Unix password file. See section  6.2   MySQL  user names and passwords .       6.13  Causes of  Access denied  errors     If you encounter  Access denied  errors when you try to connect to the  MySQL  server, the list below indicates some courses of action you can take to correct the problem:          Did you run the  mysql_install_db  script after installing  MySQL , to set up the initial grant table contents?  If not, do so.  See section  6.10  Setting up the initial  MySQL  privileges .  Test the initial privileges by executing this command:    shell> mysql -u root test    The server should let you connect without error.  You should also make sure you have a file  `user.ISD'  in the  MySQL  database directory. Ordinarily, this is  `PATH/var/mysql/user.ISD' , where  PATH  is the pathname to the  MySQL  installation root.     After a fresh installation, you should connect to the server and set up your users and their access permissions:    shell> mysql -u root mysql    The server should let you connect because the  MySQL   root  user has no password initially.  Since that is also a security risk, setting the  root  password is something you should do while you're setting up your other  MySQL  users.  If you try to connect as  root  and get this error:    Access denied for user: '@unknown' to database mysql    this means that you don't have an entry in the  user  table with a  User  column value of  'root'  and that  mysqld  cannot resolve the hostname for your client.  In this case, you must restart the server with the  --skip-grant-tables  option and edit your  `/etc/hosts'  or  `\windows\hosts'  file to add a entry for your host.       If you updated an existing  MySQL  installation from a pre-3.22.11 version to 3.22.11 or later, did you run the  mysql_fix_privilege_tables  script?  If not, do so.  The structure of the grant tables changed with  MySQL  3.22.11 when the  GRANT  statement became functional.     If you make changes to the grant tables directly (using  INSERT  or  UPDATE  statement) and your changes seem to be ignored, remember that you must issue a  FLUSH PRIVILEGES  statement or execute a  mysqladmin flush-privileges  command to cause the server to reread the tables.  Otherwise your changes have no effect until the next time the server is restarted.  Remember that after you set the  root  password, you won't need to specify it until after you flush the privileges, because the server still won't know you've changed the password yet!     If your privileges seem to have changed in the middle of a session, it may be that a superuser has changed them.  Reloading the grant tables affects new client connections, but it also affects existing connections as indicated in section  6.9  When privilege changes take effect .     For testing, start the  mysqld  daemon with the  --skip-grant-tables  option.  Then you can change the  MySQL  grant tables and use the  mysqlaccess  script to check whether or not your modifications have the desired effect.  When you are satisfied with your changes, execute  mysqladmin flush-privileges  to tell the  mysqld  server to start using the new grant tables.   Note:  Reloading the grant tables overrides the  --skip-grant-tables  option.  This allows you to tell the server to begin using the grant tables again without bringing it down and restarting it.     If you have access problems with a Perl, Python or ODBC program, try to connect to the server with  mysql -u user_name db_name  or  mysql -u user_name -pyour_pass db_name .  If you are able to connect using the  mysql  client, there is a problem with your program and not with the access privileges.  (Notice that there is no space between  -p  and the password; you can also use the  --password=your_pass  syntax to specify the password.)     If you can't get your password to work, remember that you must use the  PASSWORD()  function if you set the password with the  INSERT ,  UPDATE  or  SET PASSWORD  statements.  The  PASSWORD()  function is unnecessary if you specify the password using the  GRANT ... INDENTIFIED BY  statement or the  mysqladmin password  command. See section  6.12  How to set up passwords .      localhost  is a synonym for your local hostname, and is also the default host to which clients try to connect if you specify no host explicitly.  However, connections to  localhost  do not work if you are running on a system that uses MIT-pthreads ( localhost  connections are made using Unix sockets, which are not supported by MIT-pthreads).  To avoid this problem on such systems, you should use the  --host  option to name the server host explicitly.  This will make a TCP/IP connection to the  mysqld  server.  In this case, you must have your real hostname in  user  table entries on the server host.  (This is true even if you are running a client program on the same host as the server.)     If you get an  Access denied  error when trying to connect to the database with  mysql -u user_name db_name , you may have a problem with the  user  table. Check this by executing  mysql -u root mysql  and issuing this SQL statement:    mysql> SELECT * FROM user;    The result should include an entry with the  Host  and  User  columns matching your computer's hostname and your  MySQL  user name.     The  Access denied  error message will tell you who you are trying to log in as, the host from which you are trying to connect, and whether or not you were using a password. Normally, you should have one entry in the  user  table that exactly matches the hostname and user name that were given in the error message.     If you get the following error when you try to connect from a different host than the one on which the  MySQL  server is running, then there is no row in the  user  table that matches that host:    Host ... is not allowed to connect to this MySQL server    You can fix this by using the command line tool  mysql  (on the server host!) to add a row to the  user  table for the user/hostname combination from which you are trying to connect.  If you are not running  MySQL  3.22 and you don't know the IP number or hostname of the machine from which you are connecting, you should put an entry with  '%'  as the  Host  column value in the  user  table and restart  mysqld  with the  --log  option on the server machine.  After trying to connect from the client machine, the information in the  MySQL  log will indicate how you really did connect.  (Then replace the  '%'  in the  user  table entry with the actual hostname that shows up in the log. Otherwise, you'll have a system that is insecure.)     If  mysql -u root test  works but  mysql -h your_hostname -u root test  results in  Access denied , then you may not have the correct name for your host in the  user  table.  A common problem here is that the  Host  value in the user table entry specifies an unqualified hostname, but your system's name resolution routines return a fully-qualified domain name (or vice-versa).  For example, if you have an entry with host  'tcx'  in the  user  table, but your DNS tells  MySQL  that your hostname is  'tcx.subnet.se' , the entry will not work. Try adding an entry to the  user  table that contains the IP number of your host as the  Host  column value.  (Alternatively, you could add an entry to the  user  table with a  Host  value that contains a wildcard--for example,  'tcx.%' .  However, use of hostnames ending with  `%'  is  insecure  and is  not  recommended!)     If  mysql -u user_name test  works but  mysql -u user_name other_db_name  doesn't work, you don't have an entry for  other_db_name  listed in the  db  table.     If  mysql -u user_name db_name  works when executed on the server machine, but  mysql -u host_name -u user_name db_name  doesn't work when executed on another client machine, you don't have the client machine listed in the  user  table or the  db  table.     If you can't figure out why you get  Access denied , remove from the  user  table all entries that have  Host  values containing wildcards (entries that contain  `%'  or  `_' ).  A very common error is to insert a new entry with  Host = '%'  and  User = 'some user' , thinking that this will allow you to specify  localhost  to connect from the same machine.  The reason that this doesn't work is that the default privileges include an entry with  Host = 'localhost'  and  User = "" .  Since that entry has a  Host  value  'localhost'  that is more specific than  '%' , it is used in preference to the new entry when connecting from  localhost !  The correct procedure is to insert a second entry with  Host = 'localhost'  and  User = 'some_user' , or to remove the entry with with  Host = 'localhost'  and  User = "" .     If you get the following error, you may have a problem with the  db  or  host  table:    Access to database denied    If the entry selected from the  db  table has an empty value in the  Host  column, make sure there are one or more corresponding entries in the  host  table specifying which hosts the  db  table entry applies to.  If you get the error when using the SQL commands  SELECT ... INTO OUTFILE  or  LOAD DATA INFILE , your entry in the  user  table probably doesn't have the  file  privilege enabled.           Remember that client programs will use connection parameters specified in configuration files or environment variables.  If a client seems to be sending the wrong default connection parameters when you don't specify them on the command line, check your environment and the  `.my.cnf'  file in your home directory.  You might also check the system-wide  MySQL  configuration files, though it is far less likely that client connection parameters will be specified there. See section  4.15.4  Option files .  If you get  Access denied  when you run a client without any options, make sure you haven't specified an old password in any of your option files! See section  4.15.4  Option files .     If everything else fails, start the  mysqld  daemon with a debugging option (for example,  --debug=d,general,query ). This will print host and user information about attempted connections, as well as information about each command issued. See section  19.10  Debugging a  MySQL  server .     If you have any other problems with the  MySQL  grant tables and feel you must post the problem to the mailing list, always provide a dump of the  MySQL  grant tables. You can dump the tables with the  mysqldump mysql  command. As always, post your problem using the  mysqlbug  script.  In some cases you may restart  mysqld  with  --skip-grant-tables  to be able to run  mysqldump .       6.14  How to make  MySQL  secure against crackers     When you connect to a  MySQL  server, you should normally use a password.  The password is not transmitted in clear text over the connection.      All other information is transferred as text that can be read by anyone that is able to watch the connection.  If you are concerned about this, you can use the compressed protocol (in  MySQL  3.22 and above) to make things much harder.  To make things even more secure you should install  ssh  (see  http://www.cs.hut.fi/ssh ).  With this, you can get an encrypted TCP/IP connection between a  MySQL  server and a  MySQL  client.      To make a  MySQL  system secure, you should strongly consider the following suggestions:          Use passwords for all  MySQL  users. Remember that anyone can log in as any other person as simply as  mysql -u other_user db_name  if  other_user  has no password.  It is common behavior with client/server applications that the client may specify any user name.  You can change the password of all users by editing the  mysql_install_db  script before you run it, or only the password for the  MySQL   root  user like this:    shell> mysql -u root mysql mysql> UPDATE user SET Password=PASSWORD('new_password')            WHERE user='root'; mysql> FLUSH PRIVILEGES;       Don't run the  MySQL  daemon as the Unix  root  user.  mysqld  can be run as any user.  You can also create a new Unix user  mysql  to make everything even more secure.  If you run  mysqld  as another Unix user, you don't need to change the  root  user name in the  user  table, because  MySQL  user names have nothing to do with Unix user names.  You can edit the  mysql.server  script to start  mysqld  as another Unix user.  Normally this is done with the  su  command.  For more details, see section  16.8  How to run  MySQL  as a normal user .     If you put a password for the Unix  root  user in the  mysql.server  script, make sure this script is readable only by  root .     Check that the Unix user that  mysqld  runs as is the only user with read/write privileges in the database directories.     Don't give the  process  privilege to all users.  The output of  mysqladmin processlist  shows the text of the currently executing queries, so any user who is allowed to execute that command might be able to see if another user issues an  UPDATE user SET password=PASSWORD('not_secure')  query.   mysqld  saves an extra connection for users who have the  process  privilege, so that a  MySQL   root  user can log in and check things even if all normal connections are in use.     Don't give the  file  privilege to all users.  Any user that has this privilege can write a file anywhere in the file system with the privileges of the  mysqld  daemon!  To make this a bit safer, all files generated with  SELECT ... INTO OUTFILE  are readable to everyone, and you can't overwrite existing files.    The  file  privilege may also be used to read any file accessible to the Unix user that the server runs as.  This could be abused, for example, by using  LOAD DATA  to load  `/etc/passwd'  into a table, which can then be read with  SELECT .     If you don't trust your DNS, you should use IP numbers instead of hostnames in the grant tables.  In principle, the  --secure  option to  mysqld  should make hostnames safe.  In any case, you should be very careful about using hostname values that contain wildcards!      The following  mysqld  options affect security:        --secure    IP numbers returned by the  gethostbyname()  system call are checked to make sure they resolve back to the original hostname. This makes it harder for someone on the outside to get access by simulating another host.  This option also adds some sanity checks of hostnames.  The option is turned off by default in  MySQL  3.21 since it sometimes takes a long time to perform backward resolutions.   MySQL  3.22 caches hostnames and has this option enabled by default.   --skip-grant-tables    This option causes the server not to use the privilege system at all. This gives everyone  full access  to all databases!  (You can tell a running server to start using the grant tables again by executing  mysqladmin reload .)   --skip-name-resolve    Hostnames are not resolved.  All  Host  column values in the grant tables must be IP numbers or  localhost .   --skip-networking    Don't allow TCP/IP connections over the network.  All connections to  mysqld  must be made via Unix sockets. This option is unsuitable for systems that use MIT-pthreads, because the MIT-pthreads package doesn't support Unix sockets.      Go to the  first ,  previous ,  next ,  last  section,  table of contents ."
GX009-02-3033684	"Go to the  first ,  previous ,  next ,  last  section,  table of contents .      6  The MySQL Access Privilege System                     MySQL  has an advanced but non-standard security/privilege system.  This section describes how it works.        6.1  General Security     Anyone using  MySQL  on a computer connected to the Internet should read this section to avoid the most common security mistakes.      In discussing security, we emphasize the necessity of fully protecting the entire server host (not simply the  MySQL  server) against all types of applicable attacks: eavesdropping, altering, playback, and denial of service. We do not cover all aspects of availability and fault tolerance here.       MySQL  uses security based on Access Control Lists (ACLs) for all connections, queries, and other operations that a user may attempt to perform. There is also some support for SSL-encrypted connections between  MySQL  clients and servers. Many of the concepts discussed here are not specific to  MySQL  at all; the same general ideas apply to almost all applications.      When running  MySQL , follow these guidelines whenever possible:          DON'T EVER GIVE ANYONE (EXCEPT THE  MySQL  ROOT USER) ACCESS TO THE  user  TABLE IN THE  mysql  DATABASE!  The encrypted password is the real password in  MySQL . If you know the password listed in the  user  table for a given user, you can easily log in as that user if you have access to the host listed for that account.     Learn the  MySQL  access privilege system. The  GRANT  and  REVOKE  commands are used for controlling access to  MySQL . Do not grant any more privileges than necessary. Never grant privileges to all hosts.  Checklist:       Try  mysql -u root . If you are able to connect successfully to the server without being asked for a password, you have problems. Anyone can connect to your  MySQL  server as the  MySQL   root  user with full privileges! Review the  MySQL  installation instructions, paying particular attention to the item about setting a  root  password.    Use the command  SHOW GRANTS  and check to see who has access to what. Remove those privileges that are not necessary using the  REVOKE  command.       Do not keep any plain-text passwords in your database. When your computer becomes compromised, the intruder can take the full list of passwords and use them. Instead use  MD5()  or another one-way hashing function.    Do not choose passwords from dictionaries. There are special programs to break them. Even passwords like ``xfish98'' are very bad.  Much better is ``duag98'' which contains the same word ``fish'' but typed one key to the left on a standard QWERTY keyboard. Another method is to use ``Mhall'' which is taken from the first characters of each word in the sentence ``Mary had a little lamb.'' This is easy to remember and type, but difficult to guess for someone who does not know it.    Invest in a firewall. This protects you from at least 50% of all types of exploits in any software. Put  MySQL  behind the firewall or in a demilitarized zone (DMZ).  Checklist:       Try to scan your ports from the Internet using a tool such as  nmap .  MySQL  uses port 3306 by default. This port should be inaccessible from untrusted hosts. Another simple way to check whether or not your  MySQL  port is open is to try the following command from some remote machine, where  server_host  is the hostname of your  MySQL  server:    shell> telnet server_host 3306    If you get a connection and some garbage characters, the port is open, and should be closed on your firewall or router, unless you really have a good reason to keep it open. If  telnet  just hangs or the connection is refused, everything is OK; the port is blocked.       Do not trust any data entered by your users. They can try to trick your code by entering special or escaped character sequences in Web forms, URLs, or whatever application you have built. Be sure that your application remains secure if a user enters something like `` ; DROP DATABASE mysql; ''. This is an extreme example, but large security leaks and data loss may occur as a result of hackers using similar techniques, if you do not prepare for them.  Also remember to check numeric data. A common mistake is to protect only strings. Sometimes people think that if a database contains only publicly available data that it need not be protected. This is incorrect. At least denial-of-service type attacks can be performed on such databases. The simplest way to protect from this type of attack is to use apostrophes around the numeric constants:  SELECT * FROM table WHERE ID='234'  rather than  SELECT * FROM table WHERE ID=234 .  MySQL  automatically converts this string to a number and strips all non-numeric symbols from it.  Checklist:       All Web applications:       Try to enter  `''  and  `""'  in all your Web forms. If you get any kind of  MySQL  error, investigate the problem right away.    Try to modify any dynamic URLs by adding  %22  ( `""' ),  %23  ( `#' ), and  %27  ( `'' ) in the URL.    Try to modify datatypes in dynamic URLs from numeric ones to character ones containing characters from previous examples. Your application should be safe against this and similar attacks.    Try to enter characters, spaces, and special symbols instead of numbers in numeric fields. Your application should remove them before passing them to  MySQL  or your application should generate an error. Passing unchecked values to  MySQL  is very dangerous!    Check data sizes before passing them to  MySQL .    Consider having your application connect to the database using a different user name than the one you use for administrative purposes. Do not give your applications any more access privileges than they need.       Users of PHP:     Check out the  addslashes()  function.  As of PHP 4.0.3, a  mysql_escape_string()  function is available that is based on the function of the same name in the  MySQL  C API.       Users of  MySQL  C API:     Check out the  mysql_escape_string()  API call.        Users of  MySQL ++:     Check out the  escape  and  quote  modifiers for query streams.        Users of Perl DBI:     Check out the  quote()  method or use placeholders.        Users of Java JDBC:     Use a  PreparedStatement  object and placeholders.           Do not transmit plain (unencrypted) data over the Internet. These data are accessible to everyone who has the time and ability to intercept it and use it for their own purposes. Instead, use an encrypted protocol such as SSL or SSH.  MySQL  supports internal SSL connections as of Version 3.23.9. SSH port-forwarding can be used to create an encrypted (and compressed) tunnel for the communication.    Learn to use the  tcpdump  and  strings  utilities. For most cases, you can check whether or not  MySQL  data streams are unencrypted by issuing a command like the following:    shell> tcpdump -l -i eth0 -w - src or dst port 3306 | strings    (This works under Linux and should work with small modifications under other systems).  Warning: If you do not see data this doesn't always actually mean that it is encrypted. If you need high security, you should consult with a security expert.       6.2  How to Make MySQL Secure Against Crackers             When you connect to a  MySQL  server, you normally should use a password.  The password is not transmitted in clear text over the connection, however the encryption algorithm is not very strong, and with some effort a clever attacker can crack the password if he is able to sniff the traffic between the client and the server. If the connection between the client and the server goes through an untrusted network, you should use an SSH tunnel to encrypt the communication.      All other information is transferred as text that can be read by anyone who is able to watch the connection.  If you are concerned about this, you can use the compressed protocol (in  MySQL  Version 3.22 and above) to make things much harder.  To make things even more secure you should use   ssh .  You can find an open source  ssh  client at   http://www.openssh.org , and a commercial  ssh  client at   http://www.ssh.com .  With this, you can get an encrypted TCP/IP  connection between a  MySQL  server and a  MySQL  client.      To make a  MySQL  system secure, you should strongly consider the following suggestions:          Use passwords for all  MySQL  users. Remember that anyone can log in as any other person as simply as  mysql -u other_user db_name  if  other_user  has no password.  It is common behavior with client/server applications that the client may specify any user name.  You can change the password of all users by editing the  mysql_install_db  script before you run it, or only the password for the  MySQL   root  user like this:    shell> mysql -u root mysql mysql> UPDATE user SET Password=PASSWORD('new_password')            WHERE user='root'; mysql> FLUSH PRIVILEGES;       Don't run the  MySQL  daemon as the Unix  root  user.  This is very dangerous, because any user with  FILE  privileges will be able to create files as  root  (for example,  ~root/.bashrc ). To prevent this,  mysqld  will refuse to run as  root  unless it is specified directly using a  --user=root  option.   mysqld  can be run as an ordinary unprivileged user instead. You can also create a new Unix user  mysql  to make everything even more secure.  If you run  mysqld  as another Unix user, you don't need to change the  root  user name in the  user  table, because  MySQL  user names have nothing to do with Unix user names.  To start  mysqld  as another Unix user, add a  user  line that specifies the user name to the  [mysqld]  group of the  `/etc/my.cnf'  option file or the  `my.cnf'  option file in the server's data directory. For example:    [mysqld] user=mysql    This will cause the server to start as the designated user whether you start it manually or by using  safe_mysqld  or  mysql.server . For more details, see section  21.9  How to Run MySQL As a Normal User .     Don't support symlinks to tables (This can be disabled with the  --skip-symlink  option. This is especially important if you run  mysqld  as root as anyone that has write access to the mysqld data directories could then delete any file in the system! See section  13.2.3.2  Using Symbolic Links for Tables .     Check that the Unix user that  mysqld  runs as is the only user with read/write privileges in the database directories.     Don't give the  process  privilege to all users.  The output of  mysqladmin processlist  shows the text of the currently executing queries, so any user who is allowed to execute that command might be able to see if another user issues an  UPDATE user SET password=PASSWORD('not_secure')  query.   mysqld  reserves an extra connection for users who have the  process  privilege, so that a  MySQL   root  user can log in and check things even if all normal connections are in use.     Don't give the  file  privilege to all users.  Any user that has this privilege can write a file anywhere in the file system with the privileges of the  mysqld  daemon!  To make this a bit safer, all files generated with  SELECT ... INTO OUTFILE  are readable to everyone, and you cannot overwrite existing files.    The  file  privilege may also be used to read any file accessible to the Unix user that the server runs as.  This could be abused, for example, by using  LOAD DATA  to load  `/etc/passwd'  into a table, which can then be read with  SELECT .     If you don't trust your DNS, you should use IP numbers instead of hostnames in the grant tables.  In principle, the  --secure  option to  mysqld  should make hostnames safe.  In any case, you should be very careful about creating grant table entries using hostname values that contain wild cards!     If you want to restrict the number of connections for a single user, you can do this by setting the  max_user_connections  variable in  mysqld .       6.3  Startup Options for  mysqld  Concerning Security     The following  mysqld  options affect networking security:        --secure    IP numbers returned by the  gethostbyname()  system call are checked to make sure they resolve back to the original hostname. This makes it harder for someone on the outside to get access by pretending to be another host.  This option also adds some sanity checks of hostnames.  The option is turned off by default in  MySQL  Version 3.21 because sometimes it takes a long time to perform backward resolutions.  MySQL  Version 3.22 caches hostnames and has this option enabled by default.   --skip-grant-tables    This option causes the server not to use the privilege system at all. This gives everyone  full access  to all databases!  (You can tell a running server to start using the grant tables again by executing  mysqladmin flush-privileges  or  mysqladmin reload .)   --skip-name-resolve    Hostnames are not resolved.  All  Host  column values in the grant tables must be IP numbers or  localhost .   --skip-networking    Don't allow TCP/IP connections over the network.  All connections to  mysqld  must be made via Unix sockets. This option is unsuitable for systems that use MIT-pthreads, because the MIT-pthreads package doesn't support Unix sockets.   --skip-show-database    With this option, the  SHOW DATABASES  statement doesn't return anything.   --safe-show-database    With this option,  SHOW DATABASES  returns only those databases for which the user has some kind of privilege.        6.4  What the Privilege System Does               The primary function of the  MySQL  privilege system is to authenticate a user connecting from a given host, and to associate that user with privileges on a database such as  select ,  insert ,  update  and  delete .      Additional functionality includes the ability to have an anonymous user and to grant privileges for  MySQL -specific functions such as  LOAD DATA INFILE  and administrative operations.       6.5  MySQL User Names and Passwords             There are several distinctions between the way user names and passwords are used by  MySQL  and the way they are used by Unix or Windows:          User names, as used by  MySQL  for authentication purposes, have nothing to do with Unix user names (login names) or Windows user names.  Most  MySQL  clients by default try to log in using the current Unix user name as the  MySQL  user name, but that is for convenience only. Client programs allow a different name to be specified with the  -u  or  --user  options. This means that you can't make a database secure in any way unless all  MySQL  user names have passwords.  Anyone may attempt to connect to the server using any name, and they will succeed if they specify any name that doesn't have a password.      MySQL  user names can be up to 16 characters long; Unix user names typically are limited to 8 characters.      MySQL  passwords have nothing to do with Unix passwords.  There is no necessary connection between the password you use to log in to a Unix machine and the password you use to access a database on that machine.      MySQL  encrypts passwords using a different algorithm than the one used during the Unix login process.  See the descriptions of the  PASSWORD()  and  ENCRYPT()  functions in section  7.4.12  Miscellaneous Functions .  Note that even if the password is stored 'scrambled', and knowing your 'scrambled' password is enough to be able to connect to the  MySQL  server!       MySQL  users and they privileges are normally created with the  GRANT  command. See section  7.35   GRANT  and  REVOKE  Syntax .      When you login to a  MySQL  server with a command line client you should specify the password with  --password=your-password . See section  6.6  Connecting to the MySQL Server .      mysql --user=monty --password=guess database_name      If you want the client to prompt for a password, you should use  --password  without any argument      mysql --user=monty --password database_name      or the short form:      mysql -u monty -p database_name      Note that in the last example the password is  NOT  'database_name'.      If you want to use the -p option to supply a password you should do like this:      mysql -u monty -pguess database_name      On some system the library call that  MySQL  uses to prompt for a password will automaticly cut the password to 8 characters. Internally  MySQL  doesn't have any limit for the length of the password.       6.6  Connecting to the MySQL Server                  MySQL  client programs generally require that you specify connection parameters when you want to access a  MySQL  server: the host you want to connect to, your user name, and your password.  For example, the  mysql  client can be started like this (optional arguments are enclosed between  `['  and  `]' ):      shell> mysql [-h host_name] [-u user_name] [-pyour_pass]      Alternate forms of the  -h ,  -u , and  -p  options are  --host=host_name ,  --user=user_name , and  --password=your_pass .  Note that there is  no space  between  -p  or  --password=  and the password following it.       NOTE:  Specifying a password on the command line is not secure! Any user on your system may then find out your password by typing a command like:  ps auxww .  See section  4.16.5  Option Files .       mysql  uses default values for connection parameters that are missing from the command line:          The default hostname is  localhost .     The default user name is your Unix login name.     No password is supplied if  -p  is missing.      Thus, for a Unix user  joe , the following commands are equivalent:      shell> mysql -h localhost -u joe shell> mysql -h localhost shell> mysql -u joe shell> mysql      Other  MySQL  clients behave similarly.      On Unix systems, you can specify different default values to be used when you make a connection, so that you need not enter them on the command line each time you invoke a client program.  This can be done in a couple of ways:            You can specify connection parameters in the  [client]  section of the  `.my.cnf'  configuration file in your home directory.  The relevant section of the file might look like this:    [client] host=host_name user=user_name password=your_pass    See section  4.16.5  Option Files .                 You can specify connection parameters using environment variables.  The host can be specified for  mysql  using  MYSQL_HOST .  The  MySQL  user name can be specified using  USER  (this is for Windows only).  The password can be specified using  MYSQL_PWD  (but this is insecure; see the next section).  See section  A  Environment Variables .       6.7  Keeping Your Password Secure     It is inadvisable to specify your password in a way that exposes it to discovery by other users.  The methods you can use to specify your password when you run client programs are listed below, along with an assessment of the risks of each method:          Never give a normal user access to the  mysql.user  table. Knowing the encrypted password for a user makes it possible to login as this user.  The passwords are only scrambled so that one shouldn't be able to see the real password you used (if you happen to use a similar password with your other applications).     Use a  -pyour_pass  or  --password=your_pass  option on the command line.  This is convenient but insecure, because your password becomes visible to system status programs (such as  ps ) that may be invoked by other users to display command lines.  ( MySQL  clients typically overwrite the command-line argument with zeroes during their initialization sequence, but there is still a brief interval during which the value is visible.)     Use a  -p  or  --password  option (with no  your_pass  value specified).  In this case, the client program solicits the password from the terminal:        shell> mysql -u user_name -p Enter password: ********    The  `*'  characters represent your password.  It is more secure to enter your password this way than to specify it on the command line because it is not visible to other users.  However, this method of entering a password is suitable only for programs that you run interactively.  If you want to invoke a client from a script that runs non-interactively, there is no opportunity to enter the password from the terminal. On some systems, you may even find that the first line of your script is read and interpreted (incorrectly) as your password!       Store your password in a configuration file.  For example, you can list your password in the  [client]  section of the  `.my.cnf'  file in your home directory:    [client] password=your_pass    If you store your password in  `.my.cnf' , the file should not be group or world readable or writable.  Make sure the file's access mode is  400  or  600 .  See section  4.16.5  Option Files .    You can store your password in the  MYSQL_PWD  environment variable, but this method must be considered extremely insecure and should not be used. Some versions of  ps  include an option to display the environment of running processes; your password will be in plain sight for all to see if you set  MYSQL_PWD .  Even on systems without such a version of  ps , it is unwise to assume there is no other method to observe process environments. See section  A  Environment Variables .      All in all, the safest methods are to have the client program prompt for the password or to specify the password in a properly protected  `.my.cnf'  file.       6.8  Privileges Provided by MySQL           Information about user privileges is stored in the  user ,  db ,  host ,  tables_priv , and  columns_priv  tables in the  mysql  database (that is, in the database named  mysql ).  The  MySQL  server reads the contents of these tables when it starts up and under the circumstances indicated in section  6.12  When Privilege Changes Take Effect .      The names used in this manual to refer to the privileges provided by  MySQL  are shown below, along with the table column name associated with each privilege in the grant tables and the context in which the privilege applies:       Privilege     Column     Context     select     Select_priv    tables    insert     Insert_priv    tables    update     Update_priv    tables    delete     Delete_priv    tables    index     Index_priv    tables    alter     Alter_priv    tables    create     Create_priv    databases, tables, or indexes    drop     Drop_priv    databases or tables    grant     Grant_priv    databases or tables    references     References_priv    databases or tables    reload     Reload_priv    server administration    shutdown     Shutdown_priv    server administration    process     Process_priv    server administration    file     File_priv    file access on server        The  select ,  insert ,  update , and  delete  privileges allow you to perform operations on rows in existing tables in a database.       SELECT  statements require the  select  privilege only if they actually retrieve rows from a table.  You can execute certain  SELECT  statements even without permission to access any of the databases on the server.  For example, you could use the  mysql  client as a simple calculator:      mysql> SELECT 1+1; mysql> SELECT PI()*2;      The  index  privilege allows you to create or drop (remove) indexes.      The  alter  privilege allows you to use  ALTER TABLE .      The  create  and  drop  privileges allow you to create new databases and tables, or to drop (remove) existing databases and tables.      Note that if you grant the  drop  privilege for the  mysql  database to a user, that user can drop the database in which the  MySQL  access privileges are stored!      The  grant  privilege allows you to give to other users those privileges you yourself possess.      The  file  privilege gives you permission to read and write files on the server using the  LOAD DATA INFILE  and  SELECT ... INTO OUTFILE  statements.  Any user to whom this privilege is granted can read or write any file that the  MySQL  server can read or write.      The remaining privileges are used for administrative operations, which are performed using the  mysqladmin  program.  The table below shows which  mysqladmin  commands each administrative privilege allows you to execute:       Privilege     Commands permitted to privilege holders     reload     reload ,  refresh ,  flush-privileges ,  flush-hosts ,  flush-logs , and  flush-tables     shutdown     shutdown     process     processlist ,  kill         The  reload  command tells the server to re-read the grant tables.  The  refresh  command flushes all tables and opens and closes the log files.   flush-privileges  is a synonym for  reload .  The other  flush-*  commands perform functions similar to  refresh  but are more limited in scope, and may be preferable in some instances.  For example, if you want to flush just the log files,  flush-logs  is a better choice than  refresh .      The  shutdown  command shuts down the server.      The  processlist  command displays information about the threads executing within the server.  The  kill  command kills server threads. You can always display or kill your own threads, but you need the  process  privilege to display or kill threads initiated by other users. See section  7.27   KILL  Syntax .      It is a good idea in general to grant privileges only to those users who need them, but you should exercise particular caution in granting certain privileges:          The  grant  privilege allows users to give away their privileges to other users.  Two users with different privileges and with the  grant  privilege are able to combine privileges.     The  alter  privilege may be used to subvert the privilege system by renaming tables.     The  file  privilege can be abused to read any world-readable file on the server into a database table, the contents of which can then be accessed using  SELECT . This includes the contents of all databases hosted by the server!     The  shutdown  privilege can be abused to deny service to other users entirely, by terminating the server.     The  process  privilege can be used to view the plain text of currently executing queries, including queries that set or change passwords.     Privileges on the  mysql  database can be used to change passwords and other access privilege information.  (Passwords are stored encrypted, so a malicious user cannot simply read them to know the plain text password).  If they can access the  mysql.user  password column, they can use it to log into the  MySQL  server for the given user.  (With sufficient privileges, the same user can replace a password with a different one.)      There are some things that you cannot do with the  MySQL  privilege system:          You cannot explicitly specify that a given user should be denied access. That is, you cannot explicitly match a user and then refuse the connection.     You cannot specify that a user has privileges to create or drop tables in a database but not to create or drop the database itself.       6.9  How the Privilege System Works           The  MySQL  privilege system ensures that all users may do exactly the things that they are supposed to be allowed to do.  When you connect to a  MySQL  server, your identity is determined by  the host from which you connect  and  the user name you specify .  The system grants privileges according to your identity and  what you want to do .       MySQL  considers both your hostname and user name in identifying you because there is little reason to assume that a given user name belongs to the same person everywhere on the Internet.  For example, the user  bill  who connects from  whitehouse.gov  need not be the same person as the user  bill  who connects from  microsoft.com .  MySQL  handles this by allowing you to distinguish users on different hosts that happen to have the same name:  you can grant  bill  one set of privileges for connections from  whitehouse.gov , and a different set of privileges for connections from  microsoft.com .       MySQL  access control involves two stages:          Stage 1: The server checks whether or not you are even allowed to connect.     Stage 2: Assuming you can connect, the server checks each request you issue to see whether or not you have sufficient privileges to perform it.  For example, if you try to select rows from a table in a database or drop a table from the database, the server makes sure you have the  select  privilege for the table or the  drop  privilege for the database.      The server uses the  user ,  db , and  host  tables in the  mysql  database at both stages of access control.  The fields in these grant tables are shown below:       Table name     user     db     host      Scope fields     Host     Host     Host       User     Db     Db       Password     User        Privilege fields     Select_priv     Select_priv     Select_priv       Insert_priv     Insert_priv     Insert_priv       Update_priv     Update_priv     Update_priv       Delete_priv     Delete_priv     Delete_priv       Index_priv     Index_priv     Index_priv       Alter_priv     Alter_priv     Alter_priv       Create_priv     Create_priv     Create_priv       Drop_priv     Drop_priv     Drop_priv       Grant_priv     Grant_priv     Grant_priv       References_priv            Reload_priv            Shutdown_priv            Process_priv            File_priv              For the second stage of access control (request verification), the server may, if the request involves tables, additionally consult the  tables_priv  and  columns_priv  tables.  The fields in these tables are shown below:       Table name     tables_priv     columns_priv      Scope fields     Host     Host       Db     Db       User     User       Table_name     Table_name         Column_name      Privilege fields     Table_priv     Column_priv       Column_priv        Other fields     Timestamp     Timestamp       Grantor           Each grant table contains scope fields and privilege fields.      Scope fields determine the scope of each entry in the tables, that is, the context in which the entry applies.  For example, a  user  table entry with  Host  and  User  values of  'thomas.loc.gov'  and  'bob'  would be used for authenticating connections made to the server by  bob  from the host  thomas.loc.gov .  Similarly, a  db  table entry with  Host ,  User , and  Db  fields of  'thomas.loc.gov' ,  'bob'  and  'reports'  would be used when  bob  connects from the host  thomas.loc.gov  to access the  reports  database.  The  tables_priv  and  columns_priv  tables contain scope fields indicating tables or table/column combinations to which each entry applies.        For access-checking purposes, comparisons of  Host  values are case insensitive.   User ,  Password ,  Db , and  Table_name  values are case sensitive.  Column_name  values are case insensitive in  MySQL  Version 3.22.12 or later.      Privilege fields indicate the privileges granted by a table entry, that is, what operations can be performed.  The server combines the information in the various grant tables to form a complete description of a user's privileges. The rules used to do this are described in section  6.11  Access Control, Stage 2: Request Verification .      Scope fields are strings, declared as shown below; the default value for each is the empty string:       Field name     Type     Host     CHAR(60)     User     CHAR(16)     Password     CHAR(16)     Db     CHAR(64)    ( CHAR(60)  for the  tables_priv  and  columns_priv  tables)    Table_name     CHAR(60)     Column_name     CHAR(60)         In the  user ,  db  and  host  tables, all privilege fields are declared as  ENUM('N','Y')  -- each can have a value of  'N'  or  'Y' , and the default value is  'N' .      In the  tables_priv  and  columns_priv  tables, the privilege fields are declared as  SET  fields:       Table name     Field name     Possible set elements     tables_priv     Table_priv     'Select', 'Insert', 'Update', 'Delete', 'Create', 'Drop', 'Grant', 'References', 'Index', 'Alter'     tables_priv     Column_priv     'Select', 'Insert', 'Update', 'References'     columns_priv     Column_priv     'Select', 'Insert', 'Update', 'References'         Briefly, the server uses the grant tables like this:          The  user  table scope fields determine whether to allow or reject incoming connections.  For allowed connections, any privileges granted in the  user  table indicate the user's global (superuser) privileges. These privileges apply to  all  databases on the server.     The  db  and  host  tables are used together:        The  db  table scope fields determine which users can access which databases from which hosts.  The privilege fields determine which operations are allowed.     The  host  table is used as an extension of the  db  table when you want a given  db  table entry to apply to several hosts.  For example, if you want a user to be able to use a database from several hosts in your network, leave the  Host  value empty in the user's  db  table entry, then populate the  host  table with an entry for each of those hosts.  This mechanism is described more detail in section  6.11  Access Control, Stage 2: Request Verification .       The  tables_priv  and  columns_priv  tables are similar to the  db  table, but are more fine-grained: they apply at the table and column levels rather than at the database level.      Note that administrative privileges ( reload ,  shutdown , etc.) are specified only in the  user  table.  This is because administrative operations are operations on the server itself and are not database-specific, so there is no reason to list such privileges in the other grant tables.  In fact, only the  user  table need be consulted to determine whether or not you can perform an administrative operation.      The  file  privilege is specified only in the  user  table, too. It is not an administrative privilege as such, but your ability to read or write files on the server host is independent of the database you are accessing.      The  mysqld  server reads the contents of the grant tables once, when it starts up.  Changes to the grant tables take effect as indicated in section  6.12  When Privilege Changes Take Effect .      When you modify the contents of the grant tables, it is a good idea to make sure that your changes set up privileges the way you want.  For help in diagnosing problems, see section  6.16  Causes of  Access denied  Errors .  For advice on security issues, see section  6.2  How to Make MySQL Secure Against Crackers .      A useful diagnostic tool is the  mysqlaccess  script, which Yves Carlier has provided for the  MySQL  distribution.  Invoke  mysqlaccess  with the  --help  option to find out how it works. Note that  mysqlaccess  checks access using only the  user ,  db  and  host  tables.  It does not check table- or column-level privileges.       6.10  Access Control, Stage 1: Connection Verification                 When you attempt to connect to a  MySQL  server, the server accepts or rejects the connection based on your identity and whether or not you can verify your identity by supplying the correct password.  If not, the server denies access to you completely.  Otherwise, the server accepts the connection, then enters Stage 2 and waits for requests.      Your identity is based on two pieces of information:          The host from which you connect     Your  MySQL  user name      Identity checking is performed using the three  user  table scope fields ( Host ,  User , and  Password ).  The server accepts the connection only if a  user  table entry matches your hostname and user name, and you supply the correct password.      Values in the  user  table scope fields may be specified as follows:          A  Host  value may be a hostname or an IP number, or  'localhost'  to indicate the local host.       You can use the wild-card characters  `%'  and  `_'  in the  Host  field.     A  Host  value of  '%'  matches any hostname.     A blank  Host  value means that the privilege should be anded with the entry in the  host  table that matches the given host name. You can find more information about this in the next chapter.       As of  MySQL  Version 3.23, for  Host  values specified as  IP numbers, you can specify a netmask indicating how many address bits to  use for the network number. For example:    GRANT ALL PRIVILEGES on db.* to david@'192.58.197.0/255.255.255.0';    This will allow everyone to connect from an IP where the following is true:    user_ip & netmask = host_ip.    In the above example all IP:s in the interval 192.58.197.0 - 192.58.197.255 can connect to the  MySQL  server.       Wild-card characters are not allowed in the  User  field, but you can specify a blank value, which matches any name.  If the  user  table entry that matches an incoming connection has a blank user name, the user is considered to be the anonymous user (the user with no name), rather than the name that the client actually specified.  This means that a blank user name is used for all further access checking for the duration of the connection (that is, during Stage 2).     The  Password  field can be blank.  This does not mean that any password matches, it means the user must connect without specifying a password.        Non-blank  Password  values represent encrypted passwords.  MySQL  does not store passwords in plaintext form for anyone to see.  Rather, the password supplied by a user who is attempting to connect is encrypted (using the  PASSWORD()  function). The encrypted password is then used when the client/server is checking if the password is correct (This is done without the encrypted password ever traveling over the connection.)  Note that from  MySQL 's point of view the encrypted password is the REAL password, so you should not give anyone access to it!  In particular, don't give normal users read access to the tables in the  mysql  database!      The examples below show how various combinations of  Host  and  User  values in  user  table entries apply to incoming connections:       Host   value     User   value     Connections matched by entry     'thomas.loc.gov'     'fred'     fred , connecting from  thomas.loc.gov     'thomas.loc.gov'     ''    Any user, connecting from  thomas.loc.gov     '%'     'fred'     fred , connecting from any host    '%'     ''    Any user, connecting from any host    '%.loc.gov'     'fred'     fred , connecting from any host in the  loc.gov  domain    'x.y.%'     'fred'     fred , connecting from  x.y.net ,  x.y.com , x.y.edu , etc. (this is probably not useful)    '144.155.166.177'     'fred'     fred , connecting from the host with IP address  144.155.166.177     '144.155.166.%'     'fred'     fred , connecting from any host in the  144.155.166  class C subnet    '144.155.166.0/255.255.255.0'     'fred'    Same as previous example        Because you can use IP wild-card values in the  Host  field (for example,  '144.155.166.%'  to match every host on a subnet), there is the possibility that someone might try to exploit this capability by naming a host  144.155.166.somewhere.com .  To foil such attempts,  MySQL  disallows matching on hostnames that start with digits and a dot. Thus, if you have a host named something like  1.2.foo.com , its name will never match the  Host  column of the grant tables.  Only an IP number can match an IP wild-card value.      An incoming connection may be matched by more than one entry in the  user  table.  For example, a connection from  thomas.loc.gov  by  fred  would be matched by several of the entries just shown above.  How does the server choose which entry to use if more than one matches?  The server resolves this question by sorting the  user  table after reading it at startup time, then looking through the entries in sorted order when a user attempts to connect.  The first matching entry is the one that is used.       user  table sorting works as follows.  Suppose the  user  table looks like this:      +-----------+----------+- | Host      | User     | ... +-----------+----------+- | %         | root     | ... | %         | jeffrey  | ... | localhost | root     | ... | localhost |          | ... +-----------+----------+-      When the server reads in the table, it orders the entries with the most-specific  Host  values first ( '%'  in the  Host  column means ``any host'' and is least specific).  Entries with the same  Host  value are ordered with the most-specific  User  values first (a blank  User  value means ``any user'' and is least specific).  The resulting sorted  user  table looks like this:      +-----------+----------+- | Host      | User     | ... +-----------+----------+- | localhost | root     | ... | localhost |          | ... | %         | jeffrey  | ... | %         | root     | ... +-----------+----------+-            When a connection is attempted, the server looks through the sorted entries and uses the first match found.  For a connection from  localhost  by  jeffrey , the entries with  'localhost'  in the  Host  column match first.  Of those, the entry with the blank user name matches both the connecting hostname and user name.  (The  '%'/'jeffrey'  entry would have matched, too, but it is not the first match in the table.)      Here is another example.  Suppose the  user  table looks like this:      +----------------+----------+- | Host           | User     | ... +----------------+----------+- | %              | jeffrey  | ... | thomas.loc.gov |          | ... +----------------+----------+-      The sorted table looks like this:      +----------------+----------+- | Host           | User     | ... +----------------+----------+- | thomas.loc.gov |          | ... | %              | jeffrey  | ... +----------------+----------+-      A connection from  thomas.loc.gov  by  jeffrey  is matched by the first entry, whereas a connection from  whitehouse.gov  by  jeffrey  is matched by the second.      A common misconception is to think that for a given user name, all entries that explicitly name that user will be used first when the server attempts to find a match for the connection.  This is simply not true.  The previous example illustrates this, where a connection from  thomas.loc.gov  by  jeffrey  is first matched not by the entry containing  'jeffrey'  as the  User  field value, but by the entry with no user name!      If you have problems connecting to the server, print out the  user  table and sort it by hand to see where the first match is being made.       6.11  Access Control, Stage 2: Request Verification     Once you establish a connection, the server enters Stage 2.  For each request that comes in on the connection, the server checks whether you have sufficient privileges to perform it, based on the type of operation you wish to perform.  This is where the privilege fields in the grant tables come into play.  These privileges can come from any of the  user ,  db ,  host ,  tables_priv , or  columns_priv  tables.  The grant tables are manipulated with  GRANT  and  REVOKE  commands. See section  7.35   GRANT  and  REVOKE  Syntax .  (You may find it helpful to refer to section  6.9  How the Privilege System Works , which lists the fields present in each of the grant tables.)      The  user  table grants privileges that are assigned to you on a global basis and that apply no matter what the current database is.  For example, if the  user  table grants you the  delete  privilege, you can delete rows from any database on the server host!  In other words,  user  table privileges are superuser privileges.  It is wise to grant privileges in the  user  table only to superusers such as server or database administrators.  For other users, you should leave the privileges in the  user  table set to  'N'  and grant privileges on a database-specific basis only, using the  db  and  host  tables.            The  db  and  host  tables grant database-specific privileges. Values in the scope fields may be specified as follows:          The wild-card characters  `%'  and  `_'  can be used in the  Host  and  Db  fields of either table.     A  '%'   Host  value in the  db  table means ``any host.'' A blank  Host  value in the  db  table means ``consult the  host  table for further information.''     A  '%'  or blank  Host  value in the  host  table means ``any host.''     A  '%'  or blank  Db  value in either table means ``any database.''     A blank  User  value in either table matches the anonymous user.              The  db  and  host  tables are read in and sorted when the server starts up (at the same time that it reads the  user  table).  The  db  table is sorted on the  Host ,  Db , and  User  scope fields, and the  host  table is sorted on the  Host  and  Db  scope fields.  As with the  user  table, sorting puts the most-specific values first and least-specific values last, and when the server looks for matching entries, it uses the first match that it finds.           The  tables_priv  and  columns_priv  tables grant table- and column-specific privileges.  Values in the scope fields may be specified as follows:          The wild-card characters  `%'  and  `_'  can be used in the  Host  field of either table.     A  '%'  or blank  Host  value in either table means ``any host.''     The  Db ,  Table_name  and  Column_name  fields cannot contain wild cards or be blank in either table.      The  tables_priv  and  columns_priv  tables are sorted on the  Host ,  Db , and  User  fields.  This is similar to  db  table sorting, although the sorting is simpler because only the  Host  field may contain wild cards.      The request verification process is described below.  (If you are familiar with the access-checking source code, you will notice that the description here differs slightly from the algorithm used in the code.  The description is equivalent to what the code actually does; it differs only to make the explanation simpler.)      For administrative requests ( shutdown ,  reload , etc.), the server checks only the  user  table entry, because that is the only table that specifies administrative privileges.  Access is granted if the entry allows the requested operation and denied otherwise.  For example, if you want to execute  mysqladmin shutdown  but your  user  table entry doesn't grant the  shutdown  privilege to you, access is denied without even checking the  db  or  host  tables.  (They contain no  Shutdown_priv  column, so there is no need to do so.)      For database-related requests ( insert ,  update , etc.), the server first checks the user's global (superuser) privileges by looking in the  user  table entry.  If the entry allows the requested operation, access is granted.  If the global privileges in the  user  table are insufficient, the server determines the user's database-specific privileges by checking the  db  and  host  tables:          The server looks in the  db  table for a match on the  Host ,  Db , and  User  fields.  The  Host  and  User  fields are matched to the connecting user's hostname and  MySQL  user name.  The  Db  field is matched to the database the user wants to access.  If there is no entry for the  Host  and  User , access is denied.     If there is a matching  db  table entry and its  Host  field is not blank, that entry defines the user's database-specific privileges.     If the matching  db  table entry's  Host  field is blank, it signifies that the  host  table enumerates which hosts should be allowed access to the database.  In this case, a further lookup is done in the  host  table to find a match on the  Host  and  Db  fields. If no  host  table entry matches, access is denied.  If there is a match, the user's database-specific privileges are computed as the intersection ( not  the union!) of the privileges in the  db  and  host  table entries, that is, the privileges that are  'Y'  in both entries.  (This way you can grant general privileges in the  db  table entry and then selectively restrict them on a host-by-host basis using the  host  table entries.)      After determining the database-specific privileges granted by the  db  and  host  table entries, the server adds them to the global privileges granted by the  user  table.  If the result allows the requested operation, access is granted.  Otherwise, the server checks the user's table and column privileges in the  tables_priv  and  columns_priv  tables and adds those to the user's privileges.  Access is allowed or denied based on the result.      Expressed in boolean terms, the preceding description of how a user's privileges are calculated may be summarized like this:      global privileges OR (database privileges AND host privileges) OR table privileges OR column privileges      It may not be apparent why, if the global  user  entry privileges are initially found to be insufficient for the requested operation, the server adds those privileges to the database-, table-, and column-specific privileges later. The reason is that a request might require more than one type of privilege.  For example, if you execute an  INSERT ...  SELECT  statement, you need both  insert  and  select  privileges. Your privileges might be such that the  user  table entry grants one privilege and the  db  table entry grants the other.  In this case, you have the necessary privileges to perform the request, but the server cannot tell that from either table by itself; the privileges granted by the entries in both tables must be combined.               The  host  table can be used to maintain a list of secure servers.      At TcX, the  host  table contains a list of all machines on the local network. These are granted all privileges.      You can also use the  host  table to indicate hosts that are  not  secure.  Suppose you have a machine  public.your.domain  that is located in a public area that you do not consider secure.  You can allow access to all hosts on your network except that machine by using  host  table entries like this:      +--------------------+----+- | Host               | Db | ... +--------------------+----+- | public.your.domain | %  | ... (all privileges set to 'N') | %.your.domain      | %  | ... (all privileges set to 'Y') +--------------------+----+-                   Naturally, you should always test your entries in the grant tables (for example, using  mysqlaccess ) to make sure your access privileges are actually set up the way you think they are.       6.12  When Privilege Changes Take Effect     When  mysqld  starts, all grant table contents are read into memory and become effective at that point.      Modifications to the grant tables that you perform using  GRANT ,  REVOKE , or  SET PASSWORD  are noticed by the server immediately.      If you modify the grant tables manually (using  INSERT ,  UPDATE , etc.), you should execute a  FLUSH PRIVILEGES  statement or run  mysqladmin flush-privileges  or  mysqladmin reload  to tell the server to reload the grant tables.  Otherwise your changes will have  no effect  until you restart the server. If you change the grant tables manually but forget to reload the privileges, you will be wondering why your changes don't seem to make any difference!      When the server notices that the grant tables have been changed, existing client connections are affected as follows:          Table and column privilege changes take effect with the client's next request.     Database privilege changes take effect at the next  USE db_name  command.      Global privilege changes and password changes take effect the next time the client connects.                       6.13  Setting Up the Initial MySQL Privileges     After installing  MySQL , you set up the initial access privileges by running  scripts/mysql_install_db . See section  4.7.1  Quick Installation Overview . The  mysql_install_db  script starts up the  mysqld  server, then initializes the grant tables to contain the following set of privileges:          The  MySQL   root  user is created as a superuser who can do anything.  Connections must be made from the local host.   NOTE:  The initial  root  password is empty, so anyone can connect as  root   without a password  and be granted all privileges.       An anonymous user is created that can do anything with databases that have a name of  'test'  or starting with  'test_' .  Connections must be made from the local host.  This means any local user can connect without a password and be treated as the anonymous user.     Other privileges are denied.  For example, normal users can't use  mysqladmin shutdown  or  mysqladmin processlist .       NOTE:  The default privileges are different for Windows. See section  4.13.4  Running MySQL on Windows .      Because your installation is initially wide open, one of the first things you should do is specify a password for the  MySQL   root  user.  You can do this as follows (note that you specify the password using the  PASSWORD()  function):      shell> mysql -u root mysql mysql> UPDATE user SET Password=PASSWORD('new_password')            WHERE user='root'; mysql> FLUSH PRIVILEGES;      You can, in  MySQL  Version 3.22 and above, use the  SET PASSWORD  statement:      shell> mysql -u root mysql mysql> SET PASSWORD FOR root=PASSWORD('new_password');      Another way to set the password is by using the  mysqladmin  command:      shell> mysqladmin -u root password new_password      Only users with write/update access to the  mysql  database can change the password for others users.  All normal users (not anonymous ones) can only change their own password with either of the above commands or with  SET PASSWORD=PASSWORD('new password') .      Note that if you update the password in the  user  table directly using the first method, you must tell the server to re-read the grant tables (with  FLUSH PRIVILEGES ), because the change will go unnoticed otherwise.      Once the  root  password has been set, thereafter you must supply that password when you connect to the server as  root .      You may wish to leave the  root  password blank so that you don't need to specify it while you perform additional setup or testing. However, be sure to set it before using your installation for any real production work.      See the  scripts/mysql_install_db  script to see how it sets up the default privileges.  You can use this as a basis to see how to add other users.      If you want the initial privileges to be different than those just described above, you can modify  mysql_install_db  before you run it.          To re-create the grant tables completely, remove all the  `.frm' ,  `.MYI' , and  `.MYD'  files in the directory containing the  mysql  database.  (This is the directory named  `mysql'  under the database directory, which is listed when you run  mysqld --help .) Then run the  mysql_install_db  script, possibly after editing it first to have the privileges you want.       NOTE:  For  MySQL  versions older than Version 3.22.10, you should NOT delete the  `.frm'  files.  If you accidentally do this, you should copy them back from your  MySQL  distribution before running  mysql_install_db .                   6.14  Adding New Users to MySQL     You can add users two different ways: by using  GRANT  statements or by manipulating the  MySQL  grant tables directly.  The preferred method is to use  GRANT  statements, because they are more concise and less error-prone. See section  7.35   GRANT  and  REVOKE  Syntax .      There is also a lot of contributed programs like  phpmyadmin  that can be used to create and administrate users. See section  D  Contributed Programs .      The examples below show how to use the  mysql  client to set up new users.  These examples assume that privileges are set up according to the defaults described in the previous section.  This means that to make changes, you must be on the same machine where  mysqld  is running, you must connect as the  MySQL   root  user, and the  root  user must have the  insert  privilege for the  mysql  database and the  reload  administrative privilege.  Also, if you have changed the  root  user password, you must specify it for the  mysql  commands below.      You can add new users by issuing  GRANT  statements:      shell> mysql --user=root mysql mysql> GRANT ALL PRIVILEGES ON *.* TO monty@localhost            IDENTIFIED BY 'some_pass' WITH GRANT OPTION; mysql> GRANT ALL PRIVILEGES ON *.* TO monty@""%""            IDENTIFIED BY 'some_pass' WITH GRANT OPTION; mysql> GRANT RELOAD,PROCESS ON *.* TO admin@localhost; mysql> GRANT USAGE ON *.* TO dummy@localhost;      These  GRANT  statements set up three new users:        monty    A full superuser who can connect to the server from anywhere, but who must use a password  'some_pass'  to do so.  Note that we must issue  GRANT  statements for both  monty@localhost  and  monty@""%"" .  If we don't add the entry with  localhost , the anonymous user entry for  localhost  that is created by  mysql_install_db  will take precedence when we connect from the local host, because it has a more specific  Host  field value and thus comes earlier in the  user  table sort order.   admin    A user who can connect from  localhost  without a password and who is granted the  reload  and  process  administrative privileges. This allows the user to execute the  mysqladmin reload ,  mysqladmin refresh , and  mysqladmin flush-*  commands, as well as  mysqladmin processlist  .  No database-related privileges are granted. (They can be granted later by issuing additional  GRANT  statements.)   dummy    A user who can connect without a password, but only from the local host.  The global privileges are all set to  'N'  -- the  USAGE  privilege type allows you to create a user with no privileges.  It is assumed that you will grant database-specific privileges later.          You can also add the same user access information directly by issuing  INSERT  statements and then telling the server to reload the grant tables:      shell> mysql --user=root mysql mysql> INSERT INTO user VALUES('localhost','monty',PASSWORD('some_pass'),                 'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO user VALUES('%','monty',PASSWORD('some_pass'),                 'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO user SET Host='localhost',User='admin',                  Reload_priv='Y', Process_priv='Y'; mysql> INSERT INTO user (Host,User,Password)                         VALUES('localhost','dummy',''); mysql> FLUSH PRIVILEGES;      Depending on your  MySQL  version, you may have to use a different number of  'Y'  values above (versions prior to Version 3.22.11 had fewer privilege columns).  For the  admin  user, the more readable extended  INSERT  syntax that is available starting with Version 3.22.11 is used.      Note that to set up a superuser, you need only create a  user  table entry with the privilege fields set to  'Y' .  No  db  or  host  table entries are necessary.      The privilege columns in the  user  table were not set explicitly in the last  INSERT  statement (for the  dummy  user), so those columns are assigned the default value of  'N' .  This is the same thing that  GRANT USAGE  does.      The following example adds a user  custom  who can connect from hosts  localhost ,  server.domain , and  whitehouse.gov .  He wants to access the  bankaccount  database only from  localhost , the  expenses  database only from  whitehouse.gov , and the  customer  database from all three hosts.  He wants to use the password  stupid  from all three hosts.      To set up this user's privileges using  GRANT  statements, run these commands:      shell> mysql --user=root mysql mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP            ON bankaccount.*            TO custom@localhost            IDENTIFIED BY 'stupid'; mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP            ON expenses.*            TO custom@whitehouse.gov            IDENTIFIED BY 'stupid'; mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP            ON customer.*            TO custom@'%'            IDENTIFIED BY 'stupid';      The reason that we do to grant statements for the user 'custom' is that we want the give the user access to  MySQL  both from the local machine with Unix sockets and from the remote machine 'whitehouse.gov' over TCP/IP.      To set up the user's privileges by modifying the grant tables directly, run these commands (note the  FLUSH PRIVILEGES  at the end):      shell> mysql --user=root mysql mysql> INSERT INTO user (Host,User,Password)        VALUES('localhost','custom',PASSWORD('stupid')); mysql> INSERT INTO user (Host,User,Password)        VALUES('server.domain','custom',PASSWORD('stupid')); mysql> INSERT INTO user (Host,User,Password)        VALUES('whitehouse.gov','custom',PASSWORD('stupid')); mysql> INSERT INTO db        (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,         Create_priv,Drop_priv)        VALUES        ('localhost','bankaccount','custom','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO db        (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,         Create_priv,Drop_priv)        VALUES        ('whitehouse.gov','expenses','custom','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO db        (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,         Create_priv,Drop_priv)        VALUES('%','customer','custom','Y','Y','Y','Y','Y','Y'); mysql> FLUSH PRIVILEGES;      The first three  INSERT  statements add  user  table entries that allow user  custom  to connect from the various hosts with the given password, but grant no permissions to him (all privileges are set to the default value of  'N' ).  The next three  INSERT  statements add  db  table entries that grant privileges to  custom  for the  bankaccount ,  expenses , and  customer  databases, but only when accessed from the proper hosts.  As usual, when the grant tables are modified directly, the server must be told to reload them (with  FLUSH PRIVILEGES ) so that the privilege changes take effect.      If you want to give a specific user access from any machine in a given domain, you can issue a  GRANT  statement like the following:      mysql> GRANT ...            ON *.*            TO myusername@""%.mydomainname.com""            IDENTIFIED BY 'mypassword';      To do the same thing by modifying the grant tables directly, do this:      mysql> INSERT INTO user VALUES ('%.mydomainname.com', 'myusername',            PASSWORD('mypassword'),...); mysql> FLUSH PRIVILEGES;      You can also use  xmysqladmin ,  mysql_webadmin , and even  xmysql  to insert, change, and update values in the grant tables. You can find these utilities in the  Contrib directory of the  MySQL  Website .                 6.15  Setting Up Passwords     In most cases you should use  GRANT  to set up your users/passwords, so the following only applies for advanced users. See section  7.35   GRANT  and  REVOKE  Syntax .      The examples in the preceding sections illustrate an important principle: when you store a non-empty password using  INSERT  or  UPDATE  statements, you must use the  PASSWORD()  function to encrypt it.  This is because the  user  table stores passwords in encrypted form, not as plaintext.  If you forget that fact, you are likely to attempt to set passwords like this:      shell> mysql -u root mysql mysql> INSERT INTO user (Host,User,Password)        VALUES('%','jeffrey','biscuit'); mysql> FLUSH PRIVILEGES;      The result is that the plaintext value  'biscuit'  is stored as the password in the  user  table.  When the user  jeffrey  attempts to connect to the server using this password, the  mysql  client encrypts it with  PASSWORD()  and sends the result to the server.  The server compares the value in the  user  table (the encrypted value of  'biscuit' ) to the encrypted password (which is  not   'biscuit' ).  The comparison fails and the server rejects the connection:      shell> mysql -u jeffrey -pbiscuit test Access denied      Passwords must be encrypted when they are inserted in the  user  table, so the  INSERT  statement should have been specified like this instead:      mysql> INSERT INTO user (Host,User,Password)        VALUES('%','jeffrey',PASSWORD('biscuit'));      You must also use the  PASSWORD()  function when you use  SET PASSWORD  statements:      mysql> SET PASSWORD FOR jeffrey@""%"" = PASSWORD('biscuit');      If you set passwords using the  GRANT ... IDENTIFIED BY  statement or the  mysqladmin password  command, the  PASSWORD()  function is unnecessary.  They both take care of encrypting the password for you, so you would specify a password of  'biscuit'  like this:      mysql> GRANT USAGE ON *.* TO jeffrey@""%"" IDENTIFIED BY 'biscuit';      or      shell> mysqladmin -u jeffrey password biscuit       NOTE:   PASSWORD()  does not perform password encryption in the same way that Unix passwords are encrypted.  You should not assume that if your Unix password and your  MySQL  password are the same, that  PASSWORD()  will result in the same encrypted value as is stored in the Unix password file. See section  6.5  MySQL User Names and Passwords .       6.16  Causes of  Access denied  Errors     If you encounter  Access denied  errors when you try to connect to the  MySQL  server, the list below indicates some courses of action you can take to correct the problem:          After installing  MySQL , did you run the  mysql_install_db  script to set up the initial grant table contents?  If not, do so. See section  6.13  Setting Up the Initial MySQL Privileges .  Test the initial privileges by executing this command:    shell> mysql -u root test    The server should let you connect without error.  You should also make sure you have a file  `user.MYD'  in the  MySQL  database directory. Ordinarily, this is  `PATH/var/mysql/user.MYD' , where  PATH  is the pathname to the  MySQL  installation root.     After a fresh installation, you should connect to the server and set up your users and their access permissions:    shell> mysql -u root mysql    The server should let you connect because the  MySQL   root  user has no password initially.  That is also a security risk, so setting the  root  password is something you should do while you're setting up your other  MySQL  users.  If you try to connect as  root  and get this error:    Access denied for user: '@unknown' to database mysql    this means that you don't have an entry in the  user  table with a  User  column value of  'root'  and that  mysqld  cannot resolve the hostname for your client.  In this case, you must restart the server with the  --skip-grant-tables  option and edit your  `/etc/hosts'  or  `\windows\hosts'  file to add an entry for your host.     If you get an error like the following:    shell> mysqladmin -u root -pxxxx ver Access denied for user: 'root@localhost' (Using password: YES)    It means that you are using a wrong password. See section  6.15  Setting Up Passwords .  If you have forgot the root password, you can restart  mysqld  with  --skip-grant-tables  to change the password. You can find more about this option later on in this manual section.  If you get the above error even if you haven't specified a password, this means that you a wrong password in some  my.ini  file. See section  4.16.5  Option Files .  You can avoid using option files with the  --no-defaults  option, as follows:    shell> mysqladmin --no-defaults -u root ver         If you updated an existing  MySQL  installation from a version earlier than Version 3.22.11 to Version 3.22.11 or later, did you run the  mysql_fix_privilege_tables  script?  If not, do so.  The structure of the grant tables changed with  MySQL  Version 3.22.11 when the  GRANT  statement became functional.     If your privileges seem to have changed in the middle of a session, it may be that a superuser has changed them.  Reloading the grant tables affects new client connections, but it also affects existing connections as indicated in section  6.12  When Privilege Changes Take Effect .     If you can't get your password to work, remember that you must use the  PASSWORD()  function if you set the password with the  INSERT ,  UPDATE , or  SET PASSWORD  statements.  The  PASSWORD()  function is unnecessary if you specify the password using the  GRANT ... INDENTIFIED BY  statement or the  mysqladmin password  command. See section  6.15  Setting Up Passwords .      localhost  is a synonym for your local hostname, and is also the default host to which clients try to connect if you specify no host explicitly.  However, connections to  localhost  do not work if you are running on a system that uses MIT-pthreads ( localhost  connections are made using Unix sockets, which are not supported by MIT-pthreads).  To avoid this problem on such systems, you should use the  --host  option to name the server host explicitly.  This will make a TCP/IP connection to the  mysqld  server.  In this case, you must have your real hostname in  user  table entries on the server host.  (This is true even if you are running a client program on the same host as the server.)     If you get an  Access denied  error when trying to connect to the database with  mysql -u user_name db_name , you may have a problem with the  user  table. Check this by executing  mysql -u root mysql  and issuing this SQL statement:    mysql> SELECT * FROM user;    The result should include an entry with the  Host  and  User  columns matching your computer's hostname and your  MySQL  user name.     The  Access denied  error message will tell you who you are trying to log in as, the host from which you are trying to connect, and whether or not you were using a password. Normally, you should have one entry in the  user  table that exactly matches the hostname and user name that were given in the error message. For example if you get an error message that contains  Using password: NO , this means that you tried to login without an password.     If you get the following error when you try to connect from a different host than the one on which the  MySQL  server is running, then there is no row in the  user  table that matches that host:    Host ... is not allowed to connect to this MySQL server    You can fix this by using the command-line tool  mysql  (on the server host!) to add a row to the  user ,  db , or  host  table for the user/hostname combination from which you are trying to connect and then execute  mysqladmin flush-privileges .  If you are not running  MySQL  Version 3.22 and you don't know the IP number or hostname of the machine from which you are connecting, you should put an entry with  '%'  as the  Host  column value in the  user  table and restart  mysqld  with the  --log  option on the server machine.  After trying to connect from the client machine, the information in the  MySQL  log will indicate how you really did connect.  (Then replace the  '%'  in the  user  table entry with the actual hostname that shows up in the log.  Otherwise, you'll have a system that is insecure.)  Another reason for this error on Linux is that you are using a binary  MySQL  version that is compiled with a different glibc version than the one you are using.  In this case you should either upgrade your OS/glibc or download the source  MySQL  version and compile this yourself.  A source RPM is normally trivial to compile and install, so this isn't a big problem.     If you get an error message where the hostname is not shown or where the hostname is an IP, even if you try to connect with a hostname:    shell> mysqladmin -u root -pxxxx -h some-hostname ver Access denied for user: 'root' (Using password: YES)    This means that  MySQL  got some error when trying to resolve the IP to a hostname.  In this case you can execute  mysqladmin flush-hosts  to reset the internal DNS cache. See section  13.2.11  How MySQL uses DNS .  Some permanent solutions are:        Try to find out what is wrong with your DNS server and fix this.    Specify IPs instead of hostnames in the  MySQL  privilege tables.    Start  mysqld  with  --skip-name-resolve .    Start  mysqld  with  --skip-host-cache .    Connect to  localhost  if you are running the server and the client on the same machine.    Put the client machine names in  /etc/hosts .       If  mysql -u root test  works but  mysql -h your_hostname -u root test  results in  Access denied , then you may not have the correct name for your host in the  user  table.  A common problem here is that the  Host  value in the user table entry specifies an unqualified hostname, but your system's name resolution routines return a fully qualified domain name (or vice-versa).  For example, if you have an entry with host  'tcx'  in the  user  table, but your DNS tells  MySQL  that your hostname is  'tcx.subnet.se' , the entry will not work. Try adding an entry to the  user  table that contains the IP number of your host as the  Host  column value.  (Alternatively, you could add an entry to the  user  table with a  Host  value that contains a wild card--for example,  'tcx.%' .  However, use of hostnames ending with  `%'  is  insecure  and is  not  recommended!)     If  mysql -u user_name test  works but  mysql -u user_name other_db_name  doesn't work, you don't have an entry for  other_db_name  listed in the  db  table.     If  mysql -u user_name db_name  works when executed on the server machine, but  mysql -u host_name -u user_name db_name  doesn't work when executed on another client machine, you don't have the client machine listed in the  user  table or the  db  table.     If you can't figure out why you get  Access denied , remove from the  user  table all entries that have  Host  values containing wild cards (entries that contain  `%'  or  `_' ).  A very common error is to insert a new entry with  Host = '%'  and  User = 'some user' , thinking that this will allow you to specify  localhost  to connect from the same machine.  The reason that this doesn't work is that the default privileges include an entry with  Host = 'localhost'  and  User = '' .  Because that entry has a  Host  value  'localhost'  that is more specific than  '%' , it is used in preference to the new entry when connecting from  localhost !  The correct procedure is to insert a second entry with  Host = 'localhost'  and  User = 'some_user' , or to remove the entry with  Host = 'localhost'  and  User = '' .     If you get the following error, you may have a problem with the  db  or  host  table:    Access to database denied    If the entry selected from the  db  table has an empty value in the  Host  column, make sure there are one or more corresponding entries in the  host  table specifying which hosts the  db  table entry applies to.  If you get the error when using the SQL commands  SELECT ... INTO OUTFILE  or  LOAD DATA INFILE , your entry in the  user  table probably doesn't have the  file  privilege enabled.           Remember that client programs will use connection parameters specified in configuration files or environment variables.  See section  A  Environment Variables .  If a client seems to be sending the wrong default connection parameters when you don't specify them on the command line, check your environment and the  `.my.cnf'  file in your home directory.  You might also check the system-wide  MySQL  configuration files, though it is far less likely that client connection parameters will be specified there. See section  4.16.5  Option Files .  If you get  Access denied  when you run a client without any options, make sure you haven't specified an old password in any of your option files! See section  4.16.5  Option Files .     If you make changes to the grant tables directly (using an  INSERT  or  UPDATE  statement) and your changes seem to be ignored, remember that you must issue a  FLUSH PRIVILEGES  statement or execute a  mysqladmin flush-privileges  command to cause the server to re-read the privilege tables.  Otherwise your changes have no effect until the next time the server is restarted.  Remember that after you set the  root  password with an  UPDATE  command, you won't need to specify it until after you flush the privileges, because the server won't know you've changed the password yet!     If you have access problems with a Perl, PHP, Python, or ODBC program, try to connect to the server with  mysql -u user_name db_name  or  mysql -u user_name -pyour_pass db_name .  If you are able to connect using the  mysql  client, there is a problem with your program and not with the access privileges.  (Note that there is no space between  -p  and the password; you can also use the  --password=your_pass  syntax to specify the password. If you use the  -p  option alone,  MySQL  will  prompt you for the password.)     For testing, start the  mysqld  daemon with the  --skip-grant-tables  option.  Then you can change the  MySQL  grant tables and use the  mysqlaccess  script to check whether or not your modifications have the desired effect.  When you are satisfied with your changes, execute  mysqladmin flush-privileges  to tell the  mysqld  server to start using the new grant tables.   Note:  Reloading the grant tables overrides the  --skip-grant-tables  option.  This allows you to tell the server to begin using the grant tables again without bringing it down and restarting it.     If everything else fails, start the  mysqld  daemon with a debugging option (for example,  --debug=d,general,query ). This will print host and user information about attempted connections, as well as information about each command issued. See section  I.1.2  Creating trace files .     If you have any other problems with the  MySQL  grant tables and feel you must post the problem to the mailing list, always provide a dump of the  MySQL  grant tables. You can dump the tables with the  mysqldump mysql  command. As always, post your problem using the  mysqlbug  script.  See section  2.3  How to Report Bugs or Problems .  In some cases you may need to restart  mysqld  with  --skip-grant-tables  to run  mysqldump .      Go to the  first ,  previous ,  next ,  last  section,  table of contents ."
GX043-55-7226851	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                          Getting Started with MySQL   This article is the first in an educational series offered by MySQL AB aimed towards providing the reader with valuable insight into the MySQL database server. Although future articles will delve into some of the more complicated topics surrounding MySQL, including replication, ODBC and optimization, it was thought to be prudent if the first tutorial started, well, at the beginning. Therefore the goal of this article is to thoroughly acquaint the reader with various topics surrounding the basic functioning of MySQL. A synopsis of what is covered is shown in the Table of Contents, listed below. You can go to any topic listed in the Table of Contents simply by clicking on its title.   Assumptions   At this point, it is assumed that the reader has successfully installed the MySQL database server. If MySQL has not yet been installed, please take some time to review the information provided in the  installation section of the MySQL documentation . It is also assumed that mysql database has been created (using mysql_install_db), and the MySQL database server has been started using safe_mysqld. If this has not yet been accomplished, take a moment to read  Section 4.16, ""Post-Installation Setup and Testing"" , located in the  MySQL documentation .   It is also assumed that the reader has at least a basic comprehension of SQL (Structured Query Language) syntax. For those readers new to the world of SQL, the following links point to a few particularly useful SQL tutorials:    Philip Greenspun's ""SQL for Web Nerds""   Mike Chapple's Introduction to SQL   James Hoffman's Introduction to SQL      Table of Contents      So You've Installed MySQL. Now What?   The MySQL Configuration File: my.cnf   The MySQL Privilege Tables   Connecting to the MySQL Server For the First Time       Exiting and Reconnecting to the MySQL Monitor       Careful With That Password!         Selecting a Database   mysqladmin   Securing a Database       The GRANT Command    The REVOKE Command      Database Backups       mysqldump    mysqlhotcopy      Conclusion      So You've Installed MySQL. Now What?    The installation instructions were scrutinized, the latest distribution was downloaded, coffee was brewed and drank and brewed again. The familiar  configure ,  make  and  make install  were wielded to once again produce another beautifully compiled application. Nods were exchanged, pats on the back traded, frothy capuccino toasts are proposed in succession. Yes, there is reason to celebrate in the office today, as the MySQL database server has been successfully installed.     You lounge back in your deskchair, surrounded by colleagues hailing the wisdom of you, the newly-christened MySQL administrator. If they only knew the pain and anguish swirling around in your mind right now, as you ponder the question, ""So now what?"".     The purpose of this tutorial is to acquaint new MySQL users with several of the key aspects of this wonderful database server. Issues regarding general server functionality, security, user and privilege administration, working with databases and tables, and data backups will all be introduced to some degree. While the reader will likely find much of this material easy to understand, keep in mind that these concepts lay much of the foundation for efficiently and properly working with the MySQL database server, in addition to implementing more complicated aspects which will be discussed in later tutorials. Therefore it is suggested that the reader take the time to not only read the tutorial, but also to actually follow along with the steps described herein, experimenting with his own MySQL installation.     The MySQL Configuration File: my.cnf    It's very likely that the first task the administrator will want to undertake is proper configuration of MySQL's configuration file. This file, entitled  my.cnf , stores default startup options for both the server and for clients. Correct configuration of this file can go a long way towards optimizing MySQL, as various memory buffer settings and other valuable options can be set here.    Interestingly, the scope of this file can be set according to its location. The settings will be considered global to all MySQL servers if stored in  /etc/my.cnf . It will be global to a specific server if located in the directory where the MySQL databases are stored ( /usr/local/mysql/data  for a binary installation, or  /usr/local/var  for a source installation). Finally, its scope could be limited to a specific user if located in the home directory of the MySQL user ( ~/.my.cnf ). Keep in mind that even if MySQL does locate a my.cnf file in /etc/my.cnf (global to all MySQL servers on that machine), it will  continue  its search for a server-specific file, and then a user-specific file. You can think of the final configuration settings as being the result of the /etc/my.cnf, mysql-data-dir/my.cnf, and ~/.my.cnf files.       In order to aid administrator's in the proper configuration of this file, the MySQL developers have included four sample  my.cnf  files within the distribution. Their names are my-huge.cnf.sh, my-large.cnf.sh, my-medium.cnf.sh, and my-small.cnf.sh, and each denotes recommended configuration settings in accordance with system resource availability.        Further Reading   4.16.5 Option Files    The MySQL Privilege Tables    Before delving into the many examples that consititute this tutorial, a brief introduction of one of the most important (and most misunderstood!) aspects of the MySQL server is in order; that is the mechanism from which MySQL secures its data and integrity: The MySQL privilege tables. The MySQL privilege tables are responsible for authenticating user access to the MySQL server, and subsequently associating those users granted access with a set of privileges. This privilege set decides what a user is capable of doing while connected to the MySQL server, controlling the user's activities on a server-wide, database, tabular and even columnar level. For example, an administrator could grant a user only enough privileges to connect to one specific MySQL database, and restrict access to all others. Furthermore, that same user might be granted only certain privileges while connected to that database, selection, insertion, and modification privileges for example. Associated with only these three privileges, that user would be denied any attempt to delete data, since the user has not been granted the deletion privilege.     Although in-depth introduction to the privilege tables is out of the scope of this article, it is important that the reader understands the very important role these tables play in securing the MySQL server. While working through the examples presented throughout the remainder of this article, keep in mind that the privilege tables are playing a role in  every single  query and command that takes place, ensuring that the user executing these commands/queries has proper permissions for doing so. It is also strongly recommended that the reader takes some time to review the links listed below, as each describes in great detail the underlying mechanics of these tables.       Further Reading   6.9 How the Privilege System Works   6.2 How to Make MySQL Secure Against Crackers   6.14 Adding New User Privileges to MySQL      Connecting to the MySQL Server For the First Time   The MySQL client program, also known as the MySQL monitor, is an interface that allows the user to connect to the MySQL server, create and modify databases, and execute queries and view their results. This program is started by executing the command mysql at the shell prompt. In general, the syntax for this command is:    %>mysql [options] [database]    Where [options] can be one or a series of options used in conjunction with the mysql program, and [database] is the name of the database to use. Since it is assumed to be the reader's first time using the MySQL monitor, take a moment to review all offered options by executing the following command:   %>mysql --help    This produces a long list of options that can be used in conjunction with the mysql program. For the moment, however, the main goal is to simply connect to the database server. Therefore, execute the following command:   %>mysql -u root    The following should appear:   Welcome to the MySQL monitor.  Commands end with ; or \g. Your MySQL connection id is 8 to server version: 3.23.28-gamma-log  Type 'help;' or '\h' for help. Type '\c' to clear the buffer  mysql>    Congratulations, you are now connected to the MySQL monitor as the almighty root user. Your first official action as this supreme leader of the MySQL database server should be to ensure that nobody else can declare this position. Therefore, make it possible to only connect as root in the future by supplying a password. Change the password from its current blank (or null) value, to something difficult to guess using the following command:   mysql>SET PASSWORD FOR 'root'@'localhost' = PASSWORD('secret_password');     The 'root', which is the username, and 'localhost', which is the hostname, constitute a unique user in MySQL. For those readers perhaps unfamiliar with networking terminology, 'localhost' is a name used to specify the local server; that is, the server upon which MySQL resides. Therefore, by stating 'root'@'localhost', this command is telling the MySQL server to set the password for a user named 'root' that will connect specifically from the local server (thus 'localhost'). More specifically, this command will change the password by updating what are commonly known as the MySQL privilege tables. These tables, collectively located in the mysql database, contain information regarding the connection and usage capabilities of all users intended to use the MySQL database server. More specifically, this command will update the user table, updating the password field of the row in which the user field's value is 'root'. The password field will be updated with the encrypted value of the string enclosed within the Password() function.     Of course, do not forget this password. Since it is stored in encrypted text on the database server, it cannot simply be looked up if forgotten.   There is also an alternative method for updating a password:  %>mysqladmin -u root  password 'secret_password'    This command will accomplish the same results as the one previously introduced.   Exiting and Reconnecting to the MySQL Monitor  In order to test the new password, exit the MySQL database using the following command:   mysql>\q     This will return you to the system shell. Now log back into the monitor, this time using the following command:    %>mysql -u root -p     Doing so will result in a prompt for the root user password, as follows:    Enter password:     Go ahead and enter the password supplied within the update command that was used to set the root password. Assuming it is entered correctly, the standard MySQL greeting will appear, and root will be connected to the MySQL server once again.    Careful With That Password!    Many readers may be tempted to instead try to include the password on the same line as the mysql connection command, as follows:     %>mysql -u root -psecret_password     Do not do this! Not only is it a highly insecure method for entering the password, but it will not produce the expected results! It is insecure not only because it will allow any onlookers the possibility of seeing the password in its plaintext format, but also because any user can use the Unix 'ps' command to look at what commands you are executing and view the password in its plaintext format from there.     It might be a good idea to store the password in your my.cnf configuration file, located in ~/.my.cnf. If you don't know what this file is, please read the earlier section entitled The MySQL Configuration File: my.cnf .     Selecting a Database    Of course, simply connecting to the MySQL server isn't going to accomplish much. Chances are you will want to select a database to work with. This is accomplished in one of two ways:       Including the name of the database along with the mysql connection command. For example, the command used to both connect to the MySQL server and select the mysql database is:   %>mysql -u root -p mysql      This might be misleading for some readers, as it seems as if the intent is to input mysql as the password. This is not correct. Take a moment to review the syntax as described in the mysql --help output, and it will be apparent that u root p actually comprise the [options] component of the syntax, and mysql comprises the [database] component.     Once connected, select the database using the use command, as follows:   mysql>use mydatabase        Once executed, all queries not explicitly specifying a database name will be directed towards the hypothetical  mydatabase  database.    mysqladmin    The  mysqladmin  program is used to administrate various aspects of the MySQL database server. Using it, the administrator can perform tasks such as: create and delete databases, shutdown the database server, update the privilege tables, and view running MySQL processes. The general syntax is:     %>mysqladmin [options] command(s)     Where [options] can be one or a series of options used in conjunction with the  mysqladmin  program, and [database] is the name of the database to use. Since it is assumed to be the reader's first time using the MySQL monitor, take a moment to review all offered options by executing the following command:     %>mysqladmin --help     This produces a long list of options that can be used in conjunction with the  mysqladmin  program. As a demonstration of how these options are used, let's use  mysqladmin  to create a new database named widgets, which will be used throughout the remainder of this article to demonstrate various other useful MySQL functions. A new database is created as follows:     %>mysqladmin -u root -p create widgets Enter Password:     Upon execution,  mysqladmin  will create the database and return to the shell prompt. Typically, the next step is to secure the new database by modifying the privilege tables. Details regarding how this is accomplished is the subject of the next section.    Further Reading   14.5 Administering a MySQL Server    Securing a Database    Security should be the first thought that comes to a MySQL administrator's mind after creating a new database. Privilege as was discussed in the section,  ""The Privilege Tables"" , securing a database is accomplished through modifications made to the tables found in the mysql database. In this section, the reader will learn how to secure the newly created widgets database. Before doing so, a brief summary of exactly how the privilege tables are modified is in order.     There are two methods used to modify the privilege tables. The first is through the use of typical SQL statements such as INSERT, UPDATE and DELETE. However, this method has largely been deprecated through the introduction of the second method, which involves the use of the special commands GRANT and REVOKE. Therefore, only this second method will be discussed in this section.     The Grant Command   The GRANT function is used both to create new users, and to assign privileges to users. Its syntax is:    mysql>GRANT priv_type [(column_list)] [, priv_type [(column_list)] ...]       ON {tbl_name | * | *.* | db_name.*}       TO user_name [IDENTIFIED BY 'password']       [, user_name [IDENTIFIED BY 'password'] ...]       [WITH GRANT OPTION]     An understanding of how GRANT works is best gained through examples. In the first example, GRANT is used to add a new user to the database. This user will be used to access the widgets database:    mysql>GRANT usage ON *.* TO widgetAdmin@localhost      ->IDENTIFIED BY 'ilovewidgets';     This will create a new user named  widgetAdmin , capable of connecting to the MySQL database server via the host  localhost  using the password  ilovewidgets . Keep in mind that this only grants connection privileges. It will not allow the user to do anything with the MySQL server! Go ahead and switch to the  mysql  database and execute the following query:    mysql>SELECT * FROM user;     Notice that the row containing the  widgetAdmin  user has N values for all of the privileges. This is good, since the user table contains a user's global privilege settings. To clarify this, if a  Y  value is set for any user's privilege in the  user  table, that user can apply that privilege to  any  MySQL database. Therefore, it is almost always best to set all privileges to  N  within this table.     So how then are user privileges assigned for a particular database? This is easily done just like the usage privilege was set in the previous example. For example, assume that the administrator wanted to grant user  widgetAdmin  with SELECT, INSERT, UPDATE and DELETE privileges for the  widget  database. This is accomplished using the following GRANT command:    mysql>GRANT SELECT, INSERT, UPDATE, DELETE      ->ON widgets.* TO widgetAdmin@localhost;     Upon execution, the user  widgetAdmin  can immediately begin using these privileges.     The privileges introduced thus far are not the only ones available to the administrator. Table 1-1 provides a listing of all available privileges.      Table 1-1: Privileges available for use within GRANT and REVOKE commands         ALL PRIVILEGES FILE RELOAD        ALTER INDEX SELECT        CREATE INSERT SHUTDOWN        DELETE PROCESS UPDATE        DROP REFERENCES USAGE        To view the new privilege table updates, execute the following query:   mysql>SELECT * FROM db;     Notice that a row has been added to the  db  table for user  widgetAdmin , with Y values assigned to the SELECT, INSERT, UPDATE and DELETE fields.     Incidentally, it is also possible to bypass the usage query, instead both creating the new user and assigning user privileges simply by executing a variation of the previous query:    mysql>GRANT SELECT, INSERT, UPDATE, DELETE     ->ON widgets.* TO widgetAdmin@localhost      ->IDENTIFIED BY 'ilovewidgets';     Assuming that the user widgetAdmin did not yet exist when this query is executed, both the  user  and  db  tables will be updated with the necessary rows.     Of course, the administrator can revoke previously granted privileges. Exactly how this is accomplished in discussed in the following section.    The Revoke Command  The REVOKE command is used to rescind privileges previously granted to a user. Its syntax is:   REVOKE priv_type [(column_list)] [, priv_type [(column_list)] ...]        ON {tbl_name | * | *.* | db_name.*}        FROM user_name [, user_name ...]     As is the case with the  GRANT  command, perhaps the best way to really understand how it operates is to experiment with several examples. Assume that the administrator wants to repeal the DELETE privilege from the user  widgetAdmin . This is accomplished using the following command:    mysql>REVOKE DELETE ON widgets.*      ->FROM widgetAdmin@localhost;     Refer to Table 1-1 for a complete listing of privilege types which can be used within the REVOKE command.     One point to keep in mind is that while REVOKE can remove all privileges (including connection privileges) from a user, it does  not  explicitly remove that user from the privilege tables. To illustrate this, consider the following command:    mysql>REVOKE ALL PRIVILEGES ON widgets.*      ->FROM widgetAdmin@localhost;     While this would result in all privileges being revoked from the user  widgetAdmin , it would not delete the relevant rows from the privilege tables! If completely removing the user from the database is the intention, the rows would have to be removed using the delete command, as follows:    mysql>DELETE FROM user WHERE user = 'widgetAdmin'; Query OK, 1 row affected (0.00 sec) mysql>flush privileges;     This will effectively deny that user from connecting to the MySQL server. Note that rows from the  user  table will have to be explicitly removed using DELETE should the administrator wish to entirely remove the user from the privilege tables.      Further Reading   7.34 Grant and Revoke Syntax      Database Backups    The final concept discussed in this tutorial is indeed an important one: data backups. In this section, two methods for making backups of MySQL data and database structures are discussed, namely  mysqldump  and  mysqlhotcopy .    mysqldump    The utility  mysqldump  provides a rather convenient way to dump existing data and table structures. Note that while  mysqldump  is not the most efficient method for creating backups (mysqlhotcopy is, described next), it does offer a convenient method for copying data and table structures which could then be used to repopulate another SQL server, that server not even necessarily being MySQL.      The function  mysqldump  can be used to backup all databases, several databases, one database, or just certain tables within a given database. In this section, the syntax involved with each scenario is provided, followed with a few examples.     Using  mysqldump  to backup just one database:   %>mysqldump [options] db_name       Using  mysqldump  to backup several tables within a database:     %>mysqldump [options] db_name table1 table2 . . . tableN       Using  mysqldump  to backup several databases:     %>mysqldump [options] --databases [options] db_name1 db_name2 . . . db_nameN       Using  mysqldump  to backup all databases:     %>mysqldump [options] --all-databases [options]      The options can be viewed by executing the following command:    %>mysqldump --help      Examples :     Backing up both the structure and data found within the widgets database would be accomplished as follows:    %>mysqldump -u root -p --opt widgets      Alternatively, perhaps just a backup of the data is required. This is accomplished by including the option  --no-create-info , which means no table creation data:    %>mysqldump -u root -p --no-create-info widgets      Another variation is just to backup the table structure. This is accompished by including the option  --no-data , which means no table data:    %>mysqldump -u root -p --no-data widgets      If you are planning on using  mysqldump  for reason of backing up data so it can be moved to another MySQL server, it is recommended that you use the option '--opt'. This will give you an optimized dump which will result in a faster read time when you later load it to another MySQL server.     While  mysqldump  provides a convenient method for backing up data, there is a second method which is both faster and more efficient. It is described in the next section.    mysqlhotcopy    The  mysqlhotcopy  utility is a perl script that uses several basic system and SQL commands to backup a database. More specifically, it will lock the tables, flush the tables, make a copy, and unlock the tables. Although it is the fastest method available for backing up a MySQL database, it is limited to backing up only those databases residing on the same machine as where it is executed.     The function  mysqlhotcopy  can be executed to backup one database, a number of databases, or only those databases matching a name specified by a regular expression. In this section, the syntax involved with each scenario is provided, followed with a few examples.      Using  mysqlhotcopy  to backup just one database:     %>mysqlhotcopy [options] db_name /path/to/new_directory       Using  mysqlhotcopy  to backup just several databases:     %>mysqlhotcopy [options] db_name_1 ... db_name_n /path/to/new_directory      Using  mysqlhotcopy  to backup only those tables within a given database that match a regular expression:     %>mysqlhotcopy [options] db_name./regex/      The options can be viewed by executing the following command:    %>mysqlhotcopy --help      Examples :  Experiment with  mysqlhotcopy  by backing up the widgets database to the directory path ""/usr/mysql/backups/"". Execute the following command:    %>mysqlhotcopy -u root -p widgets /usr/mysql/backups      As a second example, assume that the widgets database contains the tables: ""products2000"", ""products2001"", ""clientele2000"", and ""clientele2001"", with the four digits at the end of each name representing the year for which that data represents. The administrator wants to backup only those tables relative to the year ""2000"":   %>mysqlhotcopy -u root -p widgets./^.+('2000')$/ /usr/mysql/backups    In the above example, the regular expression /^.+('2000')$/ tells  mysqlhotcopy  to only backup those tables ending with the string ""2000"".      Further Reading   14.6 Dumping MySQL Database and Table Structures and Data   11 Replication in MySQL   14.7 Copying MySQL Databases and Tables     Conclusion   The goal of this tutorial was to introduce the essential topics which surround the basic functionality of the MySQL server. It is suggested that the novice reader devote some time to experimenting with all of the examples, as ""learning by doing"" is certainly the fastest way to become comfortable with MySQL.     Next time, we'll take a look at some general configuration issues, focusing on the my.cnf files first introduced at the beginning of this tutorial.       W.J. Gilmore is the author of  A Programmer's Introduction to PHP 4.0  (January, 2001 Apress). He is the Assistant Editorial Director of Web and Open Source Technologies at  Apress , and is a regular contributor to several of the Web's most prominent developer publications.     “The Core Certification Exam is hard, but very fair.”  (Not everyone passes MySQL Certification exams) — January 4, 2003    Get yours now!     Related pages: More articles Send this page to a friend.        Subscribe to the monthly MySQL Newsletter!                          MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX052-59-14955653	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                      Search the MySQL manual:                                   MySQL Manual      4 Database Administration  4.4 MySQL User Account Management  4.4.1  GRANT  and  REVOKE  Syntax  4.4.2 MySQL User Names and Passwords  4.4.3 When Privilege Changes Take Effect  4.4.4 Setting Up the Initial MySQL Privileges  4.4.5 Adding New Users to MySQL  4.4.6 Deleting Users from MySQL  4.4.7 Limiting user resources  4.4.8 Setting Up Passwords  4.4.9 Keeping Your Password Secure  4.4.10 Using Secure Connections        Additional languages       French German Portuguese Russian           Buy this Reference Manual in softcover from Barnes & Noble!            Additional formats       PDF (A4) PDF (US letter) HTML, one page per chapter, tarball HTML, all on one page, tarball HTML, all on one page, ZIP               Subscribe to the monthly MySQL Newsletter!                    Previous  /  Next  /  Up  /  Table of Contents 4.4.1   GRANT  and  REVOKE  Syntax                             GRANT priv_type [(column_list)] [, priv_type [(column_list)] ...]     ON {tbl_name | * | *.* | db_name.*}     TO user_name [IDENTIFIED BY [PASSWORD] 'password']         [, user_name [IDENTIFIED BY [PASSWORD] 'password'] ...]     [REQUIRE         NONE |         [{SSL| X509}]         [CIPHER cipher [AND]]         [ISSUER issuer [AND]]         [SUBJECT subject]]     [WITH [GRANT OPTION | MAX_QUERIES_PER_HOUR # |                           MAX_UPDATES_PER_HOUR # |                           MAX_CONNECTIONS_PER_HOUR #]]  REVOKE priv_type [(column_list)] [, priv_type [(column_list)] ...]     ON {tbl_name | * | *.* | db_name.*}     FROM user_name [, user_name ...]  REVOKE ALL PRIVILEGES,GRANT FROM user_name [, user_name ...]       GRANT  is implemented in MySQL Version 3.22.11 or later. For earlier MySQL versions, the  GRANT  statement does nothing.      The  GRANT  and  REVOKE  commands allow system administrators to create users and grant and revoke rights to MySQL users at four privilege levels:        Global level    Global privileges apply to all databases on a given server. These privileges are stored in the  mysql.user  table.  GRANT ALL ON *.*  and  REVOKE ALL ON *.*  will grant and revoke only global privileges.   Database level    Database privileges apply to all tables in a given database. These privileges are stored in the  mysql.db  and  mysql.host  tables.  GRANT ALL ON db.*  and  REVOKE ALL ON db.*  will grant and revoke only database privileges.   Table level    Table privileges apply to all columns in a given table. These privileges are stored in the  mysql.tables_priv  table.  GRANT ALL ON db.table  and  REVOKE ALL ON db.table  will grant and revoke only table privileges.   Column level    Column privileges apply to single columns in a given table. These privileges are stored in the  mysql.columns_priv  table. When using  REVOKE  you must specify the same columns that were granted.      To make it easy to revoke all privileges for a user, MySQL 4.1.1 has added the syntax:      REVOKE ALL PRIVILEGES,GRANT FROM user_name [, user_name ...]      This will drop all database, table and column level privileges for the user.      For the  GRANT  and  REVOKE  statements,  priv_type  may be specified as any of the following:       ALL [PRIVILEGES]    Sets all simple privileges except  WITH GRANT OPTION     ALTER    Allows usage of  ALTER TABLE     CREATE    Allows usage of  CREATE TABLE     CREATE TEMPORARY TABLES    Allows usage of  CREATE TEMPORARY TABLE     DELETE    Allows usage of  DELETE     DROP    Allows usage of  DROP TABLE .    EXECUTE    Allows the user to run stored procedures (MySQL 5.0)    FILE    Allows usage of  SELECT ... INTO OUTFILE  and  LOAD DATA INFILE .    INDEX    Allows usage of  CREATE INDEX  and  DROP INDEX     INSERT    Allows usage of  INSERT     LOCK TABLES    Allows usage of  LOCK TABLES  on tables for which one has the  SELECT  privilege.    PROCESS    Allows usage of  SHOW FULL PROCESSLIST     REFERENCES    For the future    RELOAD    Allows usage of  FLUSH     REPLICATION CLIENT    Gives the right to the user to ask where the slaves/masters are.    REPLICATION SLAVE    Needed for the replication slaves (to read binlogs from master).    SELECT    Allows usage of  SELECT     SHOW DATABASES     SHOW DATABASES  shows all databases.    SHUTDOWN    Allows usage of  mysqladmin shutdown     SUPER    Allows one connect (once) even if max_connections is reached and execute commands  CHANGE MASTER ,  KILL thread ,  mysqladmin debug ,  PURGE MASTER LOGS  and  SET GLOBAL     UPDATE    Allows usage of  UPDATE     USAGE    Synonym for ``no privileges.''    GRANT OPTION    Synonym for  WITH GRANT OPTION          USAGE  can be used when you want to create a user that has no privileges.      The privileges  CREATE TEMPORARY TABLES ,  EXECUTE ,  LOCK TABLES ,  REPLICATION ... ,  SHOW DATABASES  and  SUPER  are new for in version 4.0.2.  To use these new privileges after upgrading to 4.0.2, you have to run the  mysql_fix_privilege_tables  script. See section  2.5.6  Upgrading the Grant Tables .      In older MySQL versions, the  PROCESS  privilege gives the same rights as the new  SUPER  privilege.      To revoke the  GRANT  privilege from a user, use a  priv_type  value of  GRANT OPTION :      mysql> REVOKE GRANT OPTION ON ... FROM ...;      The only  priv_type  values you can specify for a table are  SELECT ,  INSERT ,  UPDATE ,  DELETE ,  CREATE ,  DROP ,  GRANT OPTION ,  INDEX , and  ALTER .      The only  priv_type  values you can specify for a column (that is, when you use a  column_list  clause) are  SELECT ,  INSERT , and  UPDATE .      MySQL allows you to create database level privileges even if the database doesn't exist, to make it easy to prepare for database usage. Currently MySQL does however not allow one to create table level grants if the table doesn't exist. MySQL will not automatically revoke any privileges even if you drop a table or drop a database.      You can set global privileges by using  ON *.*  syntax.  You can set database privileges by using  ON db_name.*  syntax. If you specify  ON *  and you have a current database, you will set the privileges for that database.  ( Warning : if you specify  ON *  and you  don't  have a current database, you will affect the global privileges!)       Please note : the  `_'  and  `%'  wildcards are allowed when specifying database names in  GRANT  commands. This means that if you wish to use for instance a  `_'  character as part of a database name, you should specify it as  `\_'  in the  GRANT  command, to prevent the user from being able to access additional databases matching the wildcard pattern, for example,  GRANT ... ON `foo\_bar`.* TO ... .      In order to accommodate granting rights to users from arbitrary hosts, MySQL supports specifying the  user_name  value in the form  user@host .  If you want to specify a  user  string containing special characters (such as  `-' ), or a  host  string containing special characters or wildcard characters (such as  `%' ), you can quote the user or host name (for example,  'test-user'@'test-hostname' ).      You can specify wildcards in the hostname.  For example,  user@'%.loc.gov'  applies to  user  for any host in the  loc.gov  domain, and  user@'144.155.166.%'  applies to  user  for any host in the  144.155.166  class C subnet.      The simple form  user  is a synonym for  user@""%"" .      MySQL doesn't support wildcards in user names.  Anonymous users are defined by inserting entries with  User=''  into the  mysql.user  table or creating an user with an empty name with the  GRANT  command.       Note : if you allow anonymous users to connect to the MySQL server, you should also grant privileges to all local users as  user@localhost  because otherwise the anonymous user entry for the local host in the  mysql.user  table will be used when the user tries to log into the MySQL server from the local machine!      You can verify if this applies to you by executing this query:      mysql> SELECT Host,User FROM mysql.user WHERE User='';      For the moment,  GRANT  only supports host, table, database, and column names up to 60 characters long. A user name can be up to 16 characters.      The privileges for a table or column are formed from the logical OR of the privileges at each of the four privilege levels.  For example, if the  mysql.user  table specifies that a user has a global  SELECT  privilege, this can't be denied by an entry at the database, table, or column level.      The privileges for a column can be calculated as follows:      global privileges OR (database privileges AND host privileges) OR table privileges OR column privileges      In most cases, you grant rights to a user at only one of the privilege levels, so life isn't normally as complicated as above. The details of the privilege-checking procedure are presented in section  4.3  General Security Issues and the MySQL Access Privilege System .      If you grant privileges for a user/hostname combination that does not exist in the  mysql.user  table, an entry is added and remains there until deleted with a  DELETE  command.  In other words,  GRANT  may create  user  table entries, but  REVOKE  will not remove them; you must do that explicitly using  DELETE .        In MySQL Version 3.22.12 or later, if a new user is created or if you have global grant privileges, the user's password will be set to the password specified by the  IDENTIFIED BY  clause, if one is given.  If the user already had a password, it is replaced by the new one.      If you don't want to send the password in clear text you can use the  PASSWORD  option followed by a scrambled password from SQL function  PASSWORD()  or the C API function  make_scrambled_password(char *to, const char *password) .       Warning : if you create a new user but do not specify an  IDENTIFIED BY  clause, the user has no password.  This is insecure.      Passwords can also be set with the  SET PASSWORD  command. See section  5.5.6   SET  Syntax .      If you grant privileges for a database, an entry in the  mysql.db  table is created if needed. When all privileges for the database have been removed with  REVOKE , this entry is deleted.      If a user doesn't have any privileges on a table, the table is not displayed when the user requests a list of tables (for example, with a  SHOW TABLES  statement). The same is true for  SHOW DATABASES .      The  WITH GRANT OPTION  clause gives the user the ability to give to other users any privileges the user has at the specified privilege level. You should be careful to whom you give the  GRANT  privilege, as two users with different privileges may be able to join privileges!       MAX_QUERIES_PER_HOUR # ,  MAX_UPDATES_PER_HOUR #  and  MAX_CONNECTIONS_PER_HOUR #  are new in MySQL version 4.0.2. These options limit the number of queries/updates and logins the user can do during one hour. If  #  is 0 (default), then this means that there are no limitations for that user. See section  4.4.7  Limiting user resources . Note: to specify any of these options for an existing user without adding other additional privileges, use  GRANT USAGE ON *.* ... WITH MAX_... .      You cannot grant another user a privilege you don't have yourself; the  GRANT  privilege allows you to give away only those privileges you possess.      Be aware that when you grant a user the  GRANT  privilege at a particular privilege level, any privileges the user already possesses (or is given in the future!) at that level are also grantable by that user. Suppose you grant a user the  INSERT  privilege on a database.  If you then grant the  SELECT  privilege on the database and specify  WITH GRANT OPTION , the user can give away not only the  SELECT  privilege, but also  INSERT .  If you then grant the  UPDATE  privilege to the user on the database, the user can give away the  INSERT ,  SELECT  and  UPDATE .      You should not grant  ALTER  privileges to a normal user.  If you do that, the user can try to subvert the privilege system by renaming tables!      Note that if you are using table or column privileges for even one user, the server examines table and column privileges for all users and this will slow down MySQL a bit.      When  mysqld  starts, all privileges are read into memory. Database, table, and column privileges take effect at once, and user-level privileges take effect the next time the user connects. Modifications to the grant tables that you perform using  GRANT  or  REVOKE  are noticed by the server immediately. If you modify the grant tables manually (using  INSERT ,  UPDATE , etc.), you should execute a  FLUSH PRIVILEGES  statement or run  mysqladmin flush-privileges  to tell the server to reload the grant tables. See section  4.4.3  When Privilege Changes Take Effect .        The biggest differences between the SQL standard and MySQL versions of  GRANT  are:          In MySQL privileges are given for an username + hostname combination and not only for an username.     SQL-99 doesn't have global or database-level privileges, nor does it  support all the privilege types that MySQL supports. MySQL doesn't support the SQL-99  TRIGGER  or  UNDER  privileges.     SQL-99 privileges are structured in a hierarchal manner. If you remove an user, all privileges the user has granted are revoked. In MySQL the granted privileges are not automatically revoked, but you have to revoke these yourself if needed.     In MySQL, if you have the  INSERT  privilege on only some of the columns in a table, you can execute  INSERT  statements on the table; the columns for which you don't have the  INSERT  privilege will be set to their default values. SQL-99 requires you to have the  INSERT  privilege on all columns.     With SQL99, when you drop a table, all privileges for the table are revoked. With SQL-99, when you revoke a privilege, all privileges that were granted based on the privilege are also revoked. In MySQL, privileges can be dropped only with explicit  REVOKE  commands or by manipulating the MySQL grant tables.      For a description of using  REQUIRE , see section  4.4.10  Using Secure Connections .        User Comments Posted by  Ken Maupin  on February 16 2002 10:21pm [ Delete ] [ Edit ] The documentation doesn't emphasize this point, but it appears tables_priv doesn't allow CIDR notation in the Host column.  If you use CIDR notation in the other privilege tables, you need to use wildcard notation in tables_priv.  This also affects the way GRANT and REVOKE work: if you grant table-specific privileges to a user using CIDR notation, you'll need to manually adjust the Host column in tables_priv. Posted by Lars Aronsson on June 8 2002 11:16am [ Delete ] [ Edit ] The normal response from a grant or revoke statement is ""Query OK, 0 rows affected"". The message that zero rows were affected is a common source of confusion, but should just be ignored by the user. Trying to revoke grants that were never granted yields an ""ERROR 1147: There is no such grant defined for user..."". Add your own comment. Top  /  Previous  /  Next  /  Up  /  Table of Contents             MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX055-25-16690342	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                      Search the MySQL manual:                                   MySQL Manual      4 Database Administration  4.3 General Security Issues and the MySQL Access Privilege System  4.3.1 General Security Guidelines  4.3.2 How to Make MySQL Secure Against Crackers  4.3.3 Startup Options for  mysqld  Concerning Security  4.3.4 Security issues with  LOAD DATA LOCAL   4.3.5 What the Privilege System Does  4.3.6 How the Privilege System Works  4.3.7 Privileges Provided by MySQL  4.3.8 Connecting to the MySQL Server  4.3.9 Access Control, Stage 1: Connection Verification  4.3.10 Access Control, Stage 2: Request Verification  4.3.11 Password Hashing in MySQL 4.1  4.3.13 Causes of  Access denied  Errors        Additional languages       French German Portuguese Russian           Buy this Reference Manual in softcover from Barnes & Noble!            Additional formats       PDF (A4) PDF (US letter) HTML, one page per chapter, tarball HTML, all on one page, tarball HTML, all on one page, ZIP               Subscribe to the monthly MySQL Newsletter!                    Previous  /  Next  /  Up  /  Table of Contents 4.3.7  Privileges Provided by MySQL            Information about user privileges is stored in the  user ,  db ,  host ,  tables_priv , and  columns_priv  tables in the  mysql  database (that is, in the database named  mysql ).  The MySQL server reads the contents of these tables when it starts up and under the circumstances indicated in section  4.4.3  When Privilege Changes Take Effect .      The names used in this manual to refer to the privileges provided by MySQL version 4.0.2 are shown here, along with the table column name associated with each privilege in the grant tables and the context in which the privilege applies. Further information about the meaning of each privilege may be found at section  4.4.1   GRANT  and  REVOKE  Syntax .       Privilege     Column     Context     ALTER     Alter_priv    tables    DELETE     Delete_priv    tables    INDEX     Index_priv    tables    INSERT     Insert_priv    tables    SELECT     Select_priv    tables    UPDATE     Update_priv    tables    CREATE     Create_priv    databases, tables, or indexes    DROP     Drop_priv    databases or tables    GRANT     Grant_priv    databases or tables    REFERENCES     References_priv    databases or tables    CREATE TEMPORARY TABLES     Create_tmp_table_priv    server administration    EXECUTE     Execute_priv    server administration    FILE     File_priv    file access on server    LOCK TABLES     Lock_tables_priv    server administration    PROCESS     Process_priv    server administration    RELOAD     Reload_priv    server administration    REPLICATION CLIENT     Repl_client_priv    server administration    REPLICATION SLAVE     Repl_slave_priv    server administration    SHOW DATABASES     Show_db_priv    server administration    SHUTDOWN     Shutdown_priv    server administration    SUPER     Super_priv    server administration        The  SELECT ,  INSERT ,  UPDATE , and  DELETE  privileges allow you to perform operations on rows in existing tables in a database.       SELECT  statements require the  SELECT  privilege only if they actually retrieve rows from a table.  You can execute certain  SELECT  statements even without permission to access any of the databases on the server.  For example, you could use the  mysql  client as a simple calculator:      mysql> SELECT 1+1; mysql> SELECT PI()*2;      The  INDEX  privilege allows you to create or drop (remove) indexes.      The  ALTER  privilege allows you to use  ALTER TABLE .      The  CREATE  and  DROP  privileges allow you to create new databases and tables, or to drop (remove) existing databases and tables.      Note that if you grant the  DROP  privilege for the  mysql  database to a user, that user can drop the database in which the MySQL access privileges are stored!      The  GRANT  privilege allows you to give to other users those privileges you yourself possess.      The  FILE  privilege gives you permission to read and write files on the server using the  LOAD DATA INFILE  and  SELECT ... INTO OUTFILE  statements.  Any user to whom this privilege is granted can read any world readable file accessable by the MySQL server and create a new world readable file in any directory where the MySQL server can write. The user can also read any file in the current database directory. The user can however not change any existing file.      The remaining privileges are used for administrative operations, which are performed using the  mysqladmin  program.  The table here shows which  mysqladmin  commands each administrative privilege allows you to execute:       Privilege     Commands permitted to privilege holders     RELOAD     reload ,  refresh ,  flush-privileges ,  flush-hosts ,  flush-logs , and  flush-tables     SHUTDOWN     shutdown     PROCESS     processlist     SUPER     kill         The  reload  command tells the server to re-read the grant tables.  The  refresh  command flushes all tables and opens and closes the log files.   flush-privileges  is a synonym for  reload .  The other  flush-*  commands perform functions similar to  refresh  but are more limited in scope, and may be preferable in some instances.  For example, if you want to flush just the log files,  flush-logs  is a better choice than  refresh .      The  shutdown  command shuts down the server.      The  processlist  command displays information about the threads executing within the server.  The  kill  command kills server threads.  You can always display or kill your own threads, but you need the  PROCESS  privilege to display and  SUPER  privilege to kill threads initiated by other users. See section  4.6.7   KILL  Syntax .      It is a good idea in general to grant privileges only to those users who need them, but you should exercise particular caution in granting certain privileges:          The  GRANT  privilege allows users to give away their privileges to other users.  Two users with different privileges and with the  GRANT  privilege are able to combine privileges.     The  ALTER  privilege may be used to subvert the privilege system by renaming tables.     The  FILE  privilege can be abused to read any world-readable file on the server or any file in the current database directory on the server into a database table, the contents of which can then be accessed using  SELECT .     The  SHUTDOWN  privilege can be abused to deny service to other users entirely, by terminating the server.     The  PROCESS  privilege can be used to view the plain text of currently executing queries, including queries that set or change passwords.     Privileges on the  mysql  database can be used to change passwords and other access privilege information.  (Passwords are stored encrypted, so a malicious user cannot simply read them to know the plain text password.)  If they can access the  mysql.user  password column, they can use it to log into the MySQL server for the given user.  (With sufficient privileges, the same user can replace a password with a different one.)      There are some things that you cannot do with the MySQL privilege system:          You cannot explicitly specify that a given user should be denied access. That is, you cannot explicitly match a user and then refuse the connection.     You cannot specify that a user has privileges to create or drop tables in a database but not to create or drop the database itself.        User Comments Posted by  phadeguy  on April 2 2002 7:39am [ Delete ] [ Edit ] I'm running into the situation where it would be  really nice for a connection to only have the  ability to SELECT and create/drop/insert/delete  TEMPORARY tables without having the privileges to  do this globally with all objects.  I didn't see  this option listed in any current or upcoming  release.  Can this function be implemented in  some sooner upcoming release?  I think others  might find it useful as well. Posted by  ute.diestel  on December 19 2002 3:27pm [ Delete ] [ Edit ] Note that:   ""To use ALTER TABLE, you need ALTER,  INSERT, and CREATE privileges on the table.""  http://www.mysql.com/doc/en/ALTER_TABLE.html Posted by Mike Hillyer on July 23 2003 7:34pm [ Delete ] [ Edit ] I believe the CREATE TEMPORARY TABLES privilege would be what you need to handle temporary tables without having global privileges. Posted by Dietrich Feist on November 25 2003 4:02am [ Delete ] [ Edit ] One workaround to give users permissions on temporary tables that you don't want to give them on regular tables is the following. We just have to keep in mind that users have the same access rights on temporary tables that they have on all tables in a particular database: 1) create a dedicated database for temporary tables: mysql> CREATE DATABASE tmp; 2) Give your users all the access privileges that they need to create and use temporary tables: mysql> GRANT SELECT, INSERT, UPDATE, DELETE, DROP, ALTER, CREATE TEMPORARY TABLES ON tmp.* TO user@localhost; Be sure that you do not give them CREATE or GRANT privileges! 3) Have you users create all temporary tables in that 'tmp' database instead of the current database: mysql> USE mydb mysql> CREATE TEMPORARY TABLE tmp.dummy SELECT * from mytable; Your users have to explicitly call their temporary tables as tmp.<tablename> in all requests. There is no problem if two users use the same name for a temporary table since they will not be able to see each other's temporary tables. You can also put the 'tmp' database on a dedicated disk. Add your own comment. Top  /  Previous  /  Next  /  Up  /  Table of Contents             MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX081-28-3151936	Privilege type (privilege)        A privilege type (    privilege    ) identifies a certain       privilege .    Syntax       <privilege> ::= INSERT | UPDATE [(<column_name>,...)]  | SELECT [(<column_name>,...)] | SELUPD [(<column_name>,...)]  | DELETE | INDEX | ALTER | REFERENCES [(<column_name>,...)]            column_name Explanation       Privilege       Explanation    INSERT          Allows the identified user to insert rows in the specified table. The current user must be authorized to grant the INSERT privilege.    UPDATE          Allows the identified user to update rows in the specified table. If column names are specified, the rows may only be updated in the columns identified by these names. The current user must be authorized to grant the UPDATE privilege.    SELECT          Allows the identified user to select rows in the specified table. If column names are specified, the rows may only be selected in the columns identified by these names. The current user must be authorized to grant the SELECT privilege.    SELUPD          The SELECT and UPDATE privileges are granted. If column names are specified, the rows may only be selected or updated in the columns identified by these names. The current user must be authorized to grant both the SELECT and the UPDATE privileges.    DELETE          Allows the identified user to delete rows from the specified table. The current user must be authorized to grant the DELETE privilege.    INDEX          Allows the identified user to execute the CREATE INDEX and DROP INDEX statements for the specified tables. The INDEX privilege can only be granted for base tables. The current user must be authorized to grant the INDEX privilege.    ALTER          Allows the identified user to execute the ALTER TABLE statement for the specified tables. The ALTER privilege can only be granted for base tables. The current user must be authorized to grant the ALTER privilege.    REFERENCES          Allows the identified user to specify the table as a referenced table in a       column_definition  or       referential_constraint_definition .            SQL statement for granting or revoking privileges            GRANT statement      REVOKE statement
GX082-93-4355858	Database Function Call  (dbfunction_call)        A  database function is called ( dbfunction_call ) in the same way as a  function . The  database function  is created by executing a  CREATE FUNCTION statement .      Syntax      <dbfunction_call>  ::= <dbfunction_name> ( [<expression>,...] )      dbfunction_name ,  expression      Explanation      The  current user must have the authorization to execute the function (EXECUTE  privilege).
GX090-77-6800469	Privilege        A privilege  is used to impose restrictions on operations carried out on certain objects.        Users can  only execute operations on objects if they have been granted the privileges to  do so. The  owner  of an object  receives all of the relevant privileges when the object is created. Privileges  can be explicitly granted to other users.  Privileges  are not granted to other users implicitly.      Users who  are not the owner of an object can only grant privileges to other users if  they have already been granted these privileges and are allowed to pass them  on, i.e. with the relevant option.      See  also:      Privilege type      Privilege Specification
GX095-72-7181712	The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                      Search the MySQL manual:                                   MySQL Manual      4 Database Administration  4.3 General Security Issues and the MySQL Access Privilege System  4.3.1 General Security Guidelines  4.3.2 How to Make MySQL Secure Against Crackers  4.3.3 Startup Options for  mysqld  Concerning Security  4.3.4 Security issues with  LOAD DATA LOCAL   4.3.5 What the Privilege System Does  4.3.6 How the Privilege System Works  4.3.7 Privileges Provided by MySQL  4.3.8 Connecting to the MySQL Server  4.3.9 Access Control, Stage 1: Connection Verification  4.3.10 Access Control, Stage 2: Request Verification  4.3.11 Password Hashing in MySQL 4.1  4.3.13 Causes of  Access denied  Errors        Additional languages       French German Portuguese Russian           Buy this Reference Manual in softcover from Barnes & Noble!            Additional formats       PDF (A4) PDF (US letter) HTML, one page per chapter, tarball HTML, all on one page, tarball HTML, all on one page, ZIP               Subscribe to the monthly MySQL Newsletter!                    Previous  /  Next  /  Up  /  Table of Contents 4.3.10  Access Control, Stage 2: Request Verification     Once you establish a connection, the server enters Stage 2.  For each request that comes in on the connection, the server checks whether you have sufficient privileges to perform it, based on the type of operation you wish to perform.  This is where the privilege fields in the grant tables come into play.  These privileges can come from any of the  user ,  db ,  host ,  tables_priv , or  columns_priv  tables.  The grant tables are manipulated with  GRANT  and  REVOKE  commands. See section  4.4.1   GRANT  and  REVOKE  Syntax .  (You may find it helpful to refer to section  4.3.6  How the Privilege System Works , which lists the fields present in each of the grant tables.)      The  user  table grants privileges that are assigned to you on a global basis and that apply no matter what the current database is.  For example, if the  user  table grants you the  DELETE  privilege, you can delete rows from any database on the server host!  In other words,  user  table privileges are superuser privileges.  It is wise to grant privileges in the  user  table only to superusers such as server or database administrators.  For other users, you should leave the privileges in the  user  table set to  'N'  and grant privileges on a database-specific basis only, using the  db  and  host  tables.            The  db  and  host  tables grant database-specific privileges. Values in the scope fields may be specified as follows:          The wildcard characters  `%'  and  `_'  can be used in the  Host  and  Db  fields of either table. If you wish to use for instance a  `_'  character as part of a database name, specify it as  `\_'  in the  GRANT  command.     A  '%'   Host  value in the  db  table means ``any host.'' A blank  Host  value in the  db  table means ``consult the  host  table for further information.''     A  '%'  or blank  Host  value in the  host  table means ``any host.''     A  '%'  or blank  Db  value in either table means ``any database.''     A blank  User  value in either table matches the anonymous user.              The  db  and  host  tables are read in and sorted when the server starts up (at the same time that it reads the  user  table).  The  db  table is sorted on the  Host ,  Db , and  User  scope fields, and the  host  table is sorted on the  Host  and  Db  scope fields.  As with the  user  table, sorting puts the most-specific values first and least-specific values last, and when the server looks for matching entries, it uses the first match that it finds.           The  tables_priv  and  columns_priv  tables grant table- and column-specific privileges.  Values in the scope fields may be specified as follows:          The wildcard characters  `%'  and  `_'  can be used in the  Host  field of either table.     A  '%'  or blank  Host  value in either table means ``any host.''     The  Db ,  Table_name  and  Column_name  fields cannot contain wildcards or be blank in either table.      The  tables_priv  and  columns_priv  tables are sorted on the  Host ,  Db , and  User  fields.  This is similar to  db  table sorting, although the sorting is simpler because only the  Host  field may contain wildcards.      The request verification process is described here.  (If you are familiar with the access-checking source code, you will notice that the description here differs slightly from the algorithm used in the code.  The description is equivalent to what the code actually does; it differs only to make the explanation simpler.)      For administrative requests ( SHUTDOWN ,  RELOAD , etc.), the server checks only the  user  table entry, because that is the only table that specifies administrative privileges.  Access is granted if the entry allows the requested operation and denied otherwise.  For example, if you want to execute  mysqladmin shutdown  but your  user  table entry doesn't grant the  SHUTDOWN  privilege to you, access is denied without even checking the  db  or  host  tables.  (They contain no  Shutdown_priv  column, so there is no need to do so.)      For database-related requests ( INSERT ,  UPDATE , etc.), the server first checks the user's global (superuser) privileges by looking in the  user  table entry.  If the entry allows the requested operation, access is granted.  If the global privileges in the  user  table are insufficient, the server determines the user's database-specific privileges by checking the  db  and  host  tables:          The server looks in the  db  table for a match on the  Host ,  Db , and  User  fields.  The  Host  and  User  fields are matched to the connecting user's hostname and MySQL user name.  The  Db  field is matched to the database the user wants to access.  If there is no entry for the  Host  and  User , access is denied.     If there is a matching  db  table entry and its  Host  field is not blank, that entry defines the user's database-specific privileges.     If the matching  db  table entry's  Host  field is blank, it signifies that the  host  table enumerates which hosts should be allowed access to the database.  In this case, a further lookup is done in the  host  table to find a match on the  Host  and  Db  fields. If no  host  table entry matches, access is denied.  If there is a match, the user's database-specific privileges are computed as the intersection ( not  the union!) of the privileges in the  db  and  host  table entries, that is, the privileges that are  'Y'  in both entries.  (This way you can grant general privileges in the  db  table entry and then selectively restrict them on a host-by-host basis using the  host  table entries.)      After determining the database-specific privileges granted by the  db  and  host  table entries, the server adds them to the global privileges granted by the  user  table.  If the result allows the requested operation, access is granted.  Otherwise, the server checks the user's table and column privileges in the  tables_priv  and  columns_priv  tables and adds those to the user's privileges.  Access is allowed or denied based on the result.      Expressed in boolean terms, the preceding description of how a user's privileges are calculated may be summarized like this:      global privileges OR (database privileges AND host privileges) OR table privileges OR column privileges      It may not be apparent why, if the global  user  entry privileges are initially found to be insufficient for the requested operation, the server adds those privileges to the database-, table-, and column-specific privileges later. The reason is that a request might require more than one type of privilege.  For example, if you execute an  INSERT ...  SELECT  statement, you need both  INSERT  and  SELECT  privileges. Your privileges might be such that the  user  table entry grants one privilege and the  db  table entry grants the other.  In this case, you have the necessary privileges to perform the request, but the server cannot tell that from either table by itself; the privileges granted by the entries in both tables must be combined.               The  host  table can be used to maintain a list of secure servers.      At TcX, the  host  table contains a list of all machines on the local network. These are granted all privileges.      You can also use the  host  table to indicate hosts that are  not  secure.  Suppose you have a machine  public.your.domain  that is located in a public area that you do not consider secure.  You can allow access to all hosts on your network except that machine by using  host  table entries like this:      +--------------------+----+- | Host               | Db | ... +--------------------+----+- | public.your.domain | %  | ... (all privileges set to 'N') | %.your.domain      | %  | ... (all privileges set to 'Y') +--------------------+----+-                   Naturally, you should always test your entries in the grant tables (for example, using  mysqlaccess ) to make sure your access privileges are actually set up the way you think they are.         User Comments Add your own comment. Top  /  Previous  /  Next  /  Up  /  Table of Contents             MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved.
GX102-58-13564582	GRANT Statement (   grant_statement )        The GRANT statement assigns  privileges  for  tables, individual columns and roles, the SELECT privilege for a sequence, and  the execution privilege for a database procedure.      Syntax      <grant_statement>  ::= GRANT <priv_spec>,... TO <grantee>,... [WITH GRANT OPTION]   | GRANT EXECUTE ON <dbproc_name>     TO <grantee>,...   | GRANT SELECT ON <sequence_name> TO <grantee>,... [WITH GRANT  OPTION]      priv_spec ,  grantee ,  dbproc_name ,   sequence_name      Explanation      The privileges in the privilege  specification are assigned to the  users ,  user groups , and   roles   ( see also:  Role Concept )  specified in the grantee list.      WITH GRANT OPTION      Users or user groups identified as  grantees are allowed to pass on their privileges to other users. The current  user must have the authorization to pass on these privileges.      The WITH GRANT OPTION cannot be  specified if  grantee  identifies a role.      GRANT EXECUTE ON      GRANT EXECUTE ON allow the user  identified by  grantee  to execute the specified  database procedure . The current user must be the owner of the database  procedure.      GRANT SELECT ON      GRANT SELECT ON allows the user  identified by  grantee  to execute the specified sequence.
GX139-38-5386668	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                          Getting Started with MySQL   This article is the first in an educational series offered by MySQL AB aimed towards providing the reader with valuable insight into the MySQL database server. Although future articles will delve into some of the more complicated topics surrounding MySQL, including replication, ODBC and optimization, it was thought to be prudent if the first tutorial started, well, at the beginning. Therefore the goal of this article is to thoroughly acquaint the reader with various topics surrounding the basic functioning of MySQL. A synopsis of what is covered is shown in the Table of Contents, listed below. You can go to any topic listed in the Table of Contents simply by clicking on its title.   Assumptions   At this point, it is assumed that the reader has successfully installed the MySQL database server. If MySQL has not yet been installed, please take some time to review the information provided in the  installation section of the MySQL documentation . It is also assumed that mysql database has been created (using mysql_install_db), and the MySQL database server has been started using safe_mysqld. If this has not yet been accomplished, take a moment to read  Section 4.16, ""Post-Installation Setup and Testing"" , located in the  MySQL documentation .   It is also assumed that the reader has at least a basic comprehension of SQL (Structured Query Language) syntax. For those readers new to the world of SQL, the following links point to a few particularly useful SQL tutorials:    Philip Greenspun's ""SQL for Web Nerds""   Mike Chapple's Introduction to SQL   James Hoffman's Introduction to SQL      Table of Contents      So You've Installed MySQL. Now What?   The MySQL Configuration File: my.cnf   The MySQL Privilege Tables   Connecting to the MySQL Server For the First Time       Exiting and Reconnecting to the MySQL Monitor       Careful With That Password!         Selecting a Database   mysqladmin   Securing a Database       The GRANT Command    The REVOKE Command      Database Backups       mysqldump    mysqlhotcopy      Conclusion      So You've Installed MySQL. Now What?    The installation instructions were scrutinized, the latest distribution was downloaded, coffee was brewed and drank and brewed again. The familiar  configure ,  make  and  make install  were wielded to once again produce another beautifully compiled application. Nods were exchanged, pats on the back traded, frothy capuccino toasts are proposed in succession. Yes, there is reason to celebrate in the office today, as the MySQL database server has been successfully installed.     You lounge back in your deskchair, surrounded by colleagues hailing the wisdom of you, the newly-christened MySQL administrator. If they only knew the pain and anguish swirling around in your mind right now, as you ponder the question, ""So now what?"".     The purpose of this tutorial is to acquaint new MySQL users with several of the key aspects of this wonderful database server. Issues regarding general server functionality, security, user and privilege administration, working with databases and tables, and data backups will all be introduced to some degree. While the reader will likely find much of this material easy to understand, keep in mind that these concepts lay much of the foundation for efficiently and properly working with the MySQL database server, in addition to implementing more complicated aspects which will be discussed in later tutorials. Therefore it is suggested that the reader take the time to not only read the tutorial, but also to actually follow along with the steps described herein, experimenting with his own MySQL installation.     The MySQL Configuration File: my.cnf    It's very likely that the first task the administrator will want to undertake is proper configuration of MySQL's configuration file. This file, entitled  my.cnf , stores default startup options for both the server and for clients. Correct configuration of this file can go a long way towards optimizing MySQL, as various memory buffer settings and other valuable options can be set here.    Interestingly, the scope of this file can be set according to its location. The settings will be considered global to all MySQL servers if stored in  /etc/my.cnf . It will be global to a specific server if located in the directory where the MySQL databases are stored ( /usr/local/mysql/data  for a binary installation, or  /usr/local/var  for a source installation). Finally, its scope could be limited to a specific user if located in the home directory of the MySQL user ( ~/.my.cnf ). Keep in mind that even if MySQL does locate a my.cnf file in /etc/my.cnf (global to all MySQL servers on that machine), it will  continue  its search for a server-specific file, and then a user-specific file. You can think of the final configuration settings as being the result of the /etc/my.cnf, mysql-data-dir/my.cnf, and ~/.my.cnf files.       In order to aid administrator's in the proper configuration of this file, the MySQL developers have included four sample  my.cnf  files within the distribution. Their names are my-huge.cnf.sh, my-large.cnf.sh, my-medium.cnf.sh, and my-small.cnf.sh, and each denotes recommended configuration settings in accordance with system resource availability.        Further Reading   4.16.5 Option Files    The MySQL Privilege Tables    Before delving into the many examples that consititute this tutorial, a brief introduction of one of the most important (and most misunderstood!) aspects of the MySQL server is in order; that is the mechanism from which MySQL secures its data and integrity: The MySQL privilege tables. The MySQL privilege tables are responsible for authenticating user access to the MySQL server, and subsequently associating those users granted access with a set of privileges. This privilege set decides what a user is capable of doing while connected to the MySQL server, controlling the user's activities on a server-wide, database, tabular and even columnar level. For example, an administrator could grant a user only enough privileges to connect to one specific MySQL database, and restrict access to all others. Furthermore, that same user might be granted only certain privileges while connected to that database, selection, insertion, and modification privileges for example. Associated with only these three privileges, that user would be denied any attempt to delete data, since the user has not been granted the deletion privilege.     Although in-depth introduction to the privilege tables is out of the scope of this article, it is important that the reader understands the very important role these tables play in securing the MySQL server. While working through the examples presented throughout the remainder of this article, keep in mind that the privilege tables are playing a role in  every single  query and command that takes place, ensuring that the user executing these commands/queries has proper permissions for doing so. It is also strongly recommended that the reader takes some time to review the links listed below, as each describes in great detail the underlying mechanics of these tables.       Further Reading   6.9 How the Privilege System Works   6.2 How to Make MySQL Secure Against Crackers   6.14 Adding New User Privileges to MySQL      Connecting to the MySQL Server For the First Time   The MySQL client program, also known as the MySQL monitor, is an interface that allows the user to connect to the MySQL server, create and modify databases, and execute queries and view their results. This program is started by executing the command mysql at the shell prompt. In general, the syntax for this command is:    %>mysql [options] [database]    Where [options] can be one or a series of options used in conjunction with the mysql program, and [database] is the name of the database to use. Since it is assumed to be the reader's first time using the MySQL monitor, take a moment to review all offered options by executing the following command:   %>mysql --help    This produces a long list of options that can be used in conjunction with the mysql program. For the moment, however, the main goal is to simply connect to the database server. Therefore, execute the following command:   %>mysql -u root    The following should appear:   Welcome to the MySQL monitor.  Commands end with ; or \g. Your MySQL connection id is 8 to server version: 3.23.28-gamma-log  Type 'help;' or '\h' for help. Type '\c' to clear the buffer  mysql>    Congratulations, you are now connected to the MySQL monitor as the almighty root user. Your first official action as this supreme leader of the MySQL database server should be to ensure that nobody else can declare this position. Therefore, make it possible to only connect as root in the future by supplying a password. Change the password from its current blank (or null) value, to something difficult to guess using the following command:   mysql>SET PASSWORD FOR 'root'@'localhost' = PASSWORD('secret_password');     The 'root', which is the username, and 'localhost', which is the hostname, constitute a unique user in MySQL. For those readers perhaps unfamiliar with networking terminology, 'localhost' is a name used to specify the local server; that is, the server upon which MySQL resides. Therefore, by stating 'root'@'localhost', this command is telling the MySQL server to set the password for a user named 'root' that will connect specifically from the local server (thus 'localhost'). More specifically, this command will change the password by updating what are commonly known as the MySQL privilege tables. These tables, collectively located in the mysql database, contain information regarding the connection and usage capabilities of all users intended to use the MySQL database server. More specifically, this command will update the user table, updating the password field of the row in which the user field's value is 'root'. The password field will be updated with the encrypted value of the string enclosed within the Password() function.     Of course, do not forget this password. Since it is stored in encrypted text on the database server, it cannot simply be looked up if forgotten.   There is also an alternative method for updating a password:  %>mysqladmin -u root  password 'secret_password'    This command will accomplish the same results as the one previously introduced.   Exiting and Reconnecting to the MySQL Monitor  In order to test the new password, exit the MySQL database using the following command:   mysql>\q     This will return you to the system shell. Now log back into the monitor, this time using the following command:    %>mysql -u root -p     Doing so will result in a prompt for the root user password, as follows:    Enter password:     Go ahead and enter the password supplied within the update command that was used to set the root password. Assuming it is entered correctly, the standard MySQL greeting will appear, and root will be connected to the MySQL server once again.    Careful With That Password!    Many readers may be tempted to instead try to include the password on the same line as the mysql connection command, as follows:     %>mysql -u root -psecret_password     Do not do this! Not only is it a highly insecure method for entering the password, but it will not produce the expected results! It is insecure not only because it will allow any onlookers the possibility of seeing the password in its plaintext format, but also because any user can use the Unix 'ps' command to look at what commands you are executing and view the password in its plaintext format from there.     It might be a good idea to store the password in your my.cnf configuration file, located in ~/.my.cnf. If you don't know what this file is, please read the earlier section entitled The MySQL Configuration File: my.cnf .     Selecting a Database    Of course, simply connecting to the MySQL server isn't going to accomplish much. Chances are you will want to select a database to work with. This is accomplished in one of two ways:       Including the name of the database along with the mysql connection command. For example, the command used to both connect to the MySQL server and select the mysql database is:   %>mysql -u root -p mysql      This might be misleading for some readers, as it seems as if the intent is to input mysql as the password. This is not correct. Take a moment to review the syntax as described in the mysql --help output, and it will be apparent that u root p actually comprise the [options] component of the syntax, and mysql comprises the [database] component.     Once connected, select the database using the use command, as follows:   mysql>use mydatabase        Once executed, all queries not explicitly specifying a database name will be directed towards the hypothetical  mydatabase  database.    mysqladmin    The  mysqladmin  program is used to administrate various aspects of the MySQL database server. Using it, the administrator can perform tasks such as: create and delete databases, shutdown the database server, update the privilege tables, and view running MySQL processes. The general syntax is:     %>mysqladmin [options] command(s)     Where [options] can be one or a series of options used in conjunction with the  mysqladmin  program, and [database] is the name of the database to use. Since it is assumed to be the reader's first time using the MySQL monitor, take a moment to review all offered options by executing the following command:     %>mysqladmin --help     This produces a long list of options that can be used in conjunction with the  mysqladmin  program. As a demonstration of how these options are used, let's use  mysqladmin  to create a new database named widgets, which will be used throughout the remainder of this article to demonstrate various other useful MySQL functions. A new database is created as follows:     %>mysqladmin -u root -p create widgets Enter Password:     Upon execution,  mysqladmin  will create the database and return to the shell prompt. Typically, the next step is to secure the new database by modifying the privilege tables. Details regarding how this is accomplished is the subject of the next section.    Further Reading   14.5 Administering a MySQL Server    Securing a Database    Security should be the first thought that comes to a MySQL administrator's mind after creating a new database. Privilege as was discussed in the section,  ""The Privilege Tables"" , securing a database is accomplished through modifications made to the tables found in the mysql database. In this section, the reader will learn how to secure the newly created widgets database. Before doing so, a brief summary of exactly how the privilege tables are modified is in order.     There are two methods used to modify the privilege tables. The first is through the use of typical SQL statements such as INSERT, UPDATE and DELETE. However, this method has largely been deprecated through the introduction of the second method, which involves the use of the special commands GRANT and REVOKE. Therefore, only this second method will be discussed in this section.     The Grant Command   The GRANT function is used both to create new users, and to assign privileges to users. Its syntax is:    mysql>GRANT priv_type [(column_list)] [, priv_type [(column_list)] ...]       ON {tbl_name | * | *.* | db_name.*}       TO user_name [IDENTIFIED BY 'password']       [, user_name [IDENTIFIED BY 'password'] ...]       [WITH GRANT OPTION]     An understanding of how GRANT works is best gained through examples. In the first example, GRANT is used to add a new user to the database. This user will be used to access the widgets database:    mysql>GRANT usage ON *.* TO widgetAdmin@localhost      ->IDENTIFIED BY 'ilovewidgets';     This will create a new user named  widgetAdmin , capable of connecting to the MySQL database server via the host  localhost  using the password  ilovewidgets . Keep in mind that this only grants connection privileges. It will not allow the user to do anything with the MySQL server! Go ahead and switch to the  mysql  database and execute the following query:    mysql>SELECT * FROM user;     Notice that the row containing the  widgetAdmin  user has N values for all of the privileges. This is good, since the user table contains a user's global privilege settings. To clarify this, if a  Y  value is set for any user's privilege in the  user  table, that user can apply that privilege to  any  MySQL database. Therefore, it is almost always best to set all privileges to  N  within this table.     So how then are user privileges assigned for a particular database? This is easily done just like the usage privilege was set in the previous example. For example, assume that the administrator wanted to grant user  widgetAdmin  with SELECT, INSERT, UPDATE and DELETE privileges for the  widget  database. This is accomplished using the following GRANT command:    mysql>GRANT SELECT, INSERT, UPDATE, DELETE      ->ON widgets.* TO widgetAdmin@localhost;     Upon execution, the user  widgetAdmin  can immediately begin using these privileges.     The privileges introduced thus far are not the only ones available to the administrator. Table 1-1 provides a listing of all available privileges.      Table 1-1: Privileges available for use within GRANT and REVOKE commands         ALL PRIVILEGES FILE RELOAD        ALTER INDEX SELECT        CREATE INSERT SHUTDOWN        DELETE PROCESS UPDATE        DROP REFERENCES USAGE        To view the new privilege table updates, execute the following query:   mysql>SELECT * FROM db;     Notice that a row has been added to the  db  table for user  widgetAdmin , with Y values assigned to the SELECT, INSERT, UPDATE and DELETE fields.     Incidentally, it is also possible to bypass the usage query, instead both creating the new user and assigning user privileges simply by executing a variation of the previous query:    mysql>GRANT SELECT, INSERT, UPDATE, DELETE     ->ON widgets.* TO widgetAdmin@localhost      ->IDENTIFIED BY 'ilovewidgets';     Assuming that the user widgetAdmin did not yet exist when this query is executed, both the  user  and  db  tables will be updated with the necessary rows.     Of course, the administrator can revoke previously granted privileges. Exactly how this is accomplished in discussed in the following section.    The Revoke Command  The REVOKE command is used to rescind privileges previously granted to a user. Its syntax is:   REVOKE priv_type [(column_list)] [, priv_type [(column_list)] ...]        ON {tbl_name | * | *.* | db_name.*}        FROM user_name [, user_name ...]     As is the case with the  GRANT  command, perhaps the best way to really understand how it operates is to experiment with several examples. Assume that the administrator wants to repeal the DELETE privilege from the user  widgetAdmin . This is accomplished using the following command:    mysql>REVOKE DELETE ON widgets.*      ->FROM widgetAdmin@localhost;     Refer to Table 1-1 for a complete listing of privilege types which can be used within the REVOKE command.     One point to keep in mind is that while REVOKE can remove all privileges (including connection privileges) from a user, it does  not  explicitly remove that user from the privilege tables. To illustrate this, consider the following command:    mysql>REVOKE ALL PRIVILEGES ON widgets.*      ->FROM widgetAdmin@localhost;     While this would result in all privileges being revoked from the user  widgetAdmin , it would not delete the relevant rows from the privilege tables! If completely removing the user from the database is the intention, the rows would have to be removed using the delete command, as follows:    mysql>DELETE FROM user WHERE user = 'widgetAdmin'; Query OK, 1 row affected (0.00 sec) mysql>flush privileges;     This will effectively deny that user from connecting to the MySQL server. Note that rows from the  user  table will have to be explicitly removed using DELETE should the administrator wish to entirely remove the user from the privilege tables.      Further Reading   7.34 Grant and Revoke Syntax      Database Backups    The final concept discussed in this tutorial is indeed an important one: data backups. In this section, two methods for making backups of MySQL data and database structures are discussed, namely  mysqldump  and  mysqlhotcopy .    mysqldump    The utility  mysqldump  provides a rather convenient way to dump existing data and table structures. Note that while  mysqldump  is not the most efficient method for creating backups (mysqlhotcopy is, described next), it does offer a convenient method for copying data and table structures which could then be used to repopulate another SQL server, that server not even necessarily being MySQL.      The function  mysqldump  can be used to backup all databases, several databases, one database, or just certain tables within a given database. In this section, the syntax involved with each scenario is provided, followed with a few examples.     Using  mysqldump  to backup just one database:   %>mysqldump [options] db_name       Using  mysqldump  to backup several tables within a database:     %>mysqldump [options] db_name table1 table2 . . . tableN       Using  mysqldump  to backup several databases:     %>mysqldump [options] --databases [options] db_name1 db_name2 . . . db_nameN       Using  mysqldump  to backup all databases:     %>mysqldump [options] --all-databases [options]      The options can be viewed by executing the following command:    %>mysqldump --help      Examples :     Backing up both the structure and data found within the widgets database would be accomplished as follows:    %>mysqldump -u root -p --opt widgets      Alternatively, perhaps just a backup of the data is required. This is accomplished by including the option  --no-create-info , which means no table creation data:    %>mysqldump -u root -p --no-create-info widgets      Another variation is just to backup the table structure. This is accompished by including the option  --no-data , which means no table data:    %>mysqldump -u root -p --no-data widgets      If you are planning on using  mysqldump  for reason of backing up data so it can be moved to another MySQL server, it is recommended that you use the option '--opt'. This will give you an optimized dump which will result in a faster read time when you later load it to another MySQL server.     While  mysqldump  provides a convenient method for backing up data, there is a second method which is both faster and more efficient. It is described in the next section.    mysqlhotcopy    The  mysqlhotcopy  utility is a perl script that uses several basic system and SQL commands to backup a database. More specifically, it will lock the tables, flush the tables, make a copy, and unlock the tables. Although it is the fastest method available for backing up a MySQL database, it is limited to backing up only those databases residing on the same machine as where it is executed.     The function  mysqlhotcopy  can be executed to backup one database, a number of databases, or only those databases matching a name specified by a regular expression. In this section, the syntax involved with each scenario is provided, followed with a few examples.      Using  mysqlhotcopy  to backup just one database:     %>mysqlhotcopy [options] db_name /path/to/new_directory       Using  mysqlhotcopy  to backup just several databases:     %>mysqlhotcopy [options] db_name_1 ... db_name_n /path/to/new_directory      Using  mysqlhotcopy  to backup only those tables within a given database that match a regular expression:     %>mysqlhotcopy [options] db_name./regex/      The options can be viewed by executing the following command:    %>mysqlhotcopy --help      Examples :  Experiment with  mysqlhotcopy  by backing up the widgets database to the directory path ""/usr/mysql/backups/"". Execute the following command:    %>mysqlhotcopy -u root -p widgets /usr/mysql/backups      As a second example, assume that the widgets database contains the tables: ""products2000"", ""products2001"", ""clientele2000"", and ""clientele2001"", with the four digits at the end of each name representing the year for which that data represents. The administrator wants to backup only those tables relative to the year ""2000"":   %>mysqlhotcopy -u root -p widgets./^.+('2000')$/ /usr/mysql/backups    In the above example, the regular expression /^.+('2000')$/ tells  mysqlhotcopy  to only backup those tables ending with the string ""2000"".      Further Reading   14.6 Dumping MySQL Database and Table Structures and Data   11 Replication in MySQL   14.7 Copying MySQL Databases and Tables     Conclusion   The goal of this tutorial was to introduce the essential topics which surround the basic functionality of the MySQL server. It is suggested that the novice reader devote some time to experimenting with all of the examples, as ""learning by doing"" is certainly the fastest way to become comfortable with MySQL.     Next time, we'll take a look at some general configuration issues, focusing on the my.cnf files first introduced at the beginning of this tutorial.       W.J. Gilmore is the author of  A Programmer's Introduction to PHP 4.0  (January, 2001 Apress). He is the Assistant Editorial Director of Web and Open Source Technologies at  Apress , and is a regular contributor to several of the Web's most prominent developer publications.     Get Certified!  MySQL Professional Certification is now available.     Related pages: More articles Send this page to a friend.        Subscribe to the monthly MySQL Newsletter!                          MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX152-37-1953055	"The World's Most Popular Open Source Database       Online shop   |   Site map   |   Search MySQL.com:                                        Company   Products   Support & Consulting   Training & Certification   Downloads   Documentation                                                  Books   Articles   Mailing Lists   Presentations   Benchmarks   Feature Comparison (aka crash-me)   Other Sites                                                      Search the MySQL manual:                                   MySQL Manual      4 Database Administration  4.4 MySQL User Account Management  4.4.1  GRANT  and  REVOKE  Syntax  4.4.2 MySQL User Names and Passwords  4.4.3 When Privilege Changes Take Effect  4.4.4 Setting Up the Initial MySQL Privileges  4.4.5 Adding New Users to MySQL  4.4.6 Deleting Users from MySQL  4.4.7 Limiting user resources  4.4.8 Setting Up Passwords  4.4.9 Keeping Your Password Secure  4.4.10 Using Secure Connections        Additional languages       French German Portuguese Russian           Buy this Reference Manual in softcover from Barnes & Noble!            Additional formats       PDF (A4) PDF (US letter) HTML, one page per chapter, tarball HTML, all on one page, tarball HTML, all on one page, ZIP               Subscribe to the monthly MySQL Newsletter!                    Previous  /  Next  /  Up  /  Table of Contents 4.4.5  Adding New Users to MySQL                         You can add users two different ways: by using  GRANT  statements or by manipulating the MySQL grant tables directly.  The preferred method is to use  GRANT  statements, because they are more concise and less error-prone. See section  4.4.1   GRANT  and  REVOKE  Syntax .      There are also several contributed programs (such as  phpMyAdmin ) that can be used to create and administer users.      The following examples show how to use the  mysql  client to set up new users.  These examples assume that privileges are set up according to the defaults described in the previous section.  This means that to make changes, you must be on the same machine where  mysqld  is running, you must connect as the MySQL  root  user, and the  root  user must have the  INSERT  privilege for the  mysql  database and the  RELOAD  administrative privilege.  Also, if you have changed the  root  user password, you must specify it for the  mysql  commands here.      First, use the  mysql  program to connect to the server as the MySQL  root  user:      shell> mysql --user=root mysql      Then you can add new users by issuing  GRANT  statements:      mysql> GRANT ALL PRIVILEGES ON *.* TO monty@localhost     ->     IDENTIFIED BY 'some_pass' WITH GRANT OPTION; mysql> GRANT ALL PRIVILEGES ON *.* TO monty@'%'     ->     IDENTIFIED BY 'some_pass' WITH GRANT OPTION; mysql> GRANT RELOAD,PROCESS ON *.* TO admin@localhost; mysql> GRANT USAGE ON *.* TO dummy@localhost;      These  GRANT  statements set up three new users:        monty    A full superuser who can connect to the server from anywhere, but who must use a password  'some_pass'  to do so.  Note that we must issue  GRANT  statements for both  monty@localhost  and  monty@""%"" .  If we don't add the entry with  localhost , the anonymous user entry for  localhost  that is created by  mysql_install_db  takes precedence when we connect from the local host, because it has a more specific  Host  field value and thus comes earlier in the  user  table sort order.   admin    A user who can connect from  localhost  without a password and who is granted the  RELOAD  and  PROCESS  administrative privileges. This allows the user to execute the  mysqladmin reload ,  mysqladmin refresh , and  mysqladmin flush-*  commands, as well as  mysqladmin processlist  .  No database-level privileges are granted. (They can be granted later by issuing additional  GRANT  statements.)   dummy    A user who can connect without a password, but only from the local host. No privileges are granted--the  USAGE  privilege type allows you to create a user with no privileges. It has the effect of setting all the global privileges to  'N' .  It is assumed that you will grant specific privileges to the account later.          You can also add the same user access information directly by issuing  INSERT  statements and then telling the server to reload the grant tables:      shell> mysql --user=root mysql mysql> INSERT INTO user VALUES('localhost','monty',PASSWORD('some_pass'),     ->          'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO user VALUES('%','monty',PASSWORD('some_pass'),     ->          'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO user SET Host='localhost',User='admin',     ->           Reload_priv='Y', Process_priv='Y'; mysql> INSERT INTO user (Host,User,Password)     ->                  VALUES('localhost','dummy',''); mysql> FLUSH PRIVILEGES;      Depending on your MySQL version, you may have to use a different number of  'Y'  values above. (Versions prior to Version 3.22.11 have fewer privilege columns, and versions from 4.0.2 on have more.)  For the  admin  user, the more readable extended  INSERT  syntax using  SET  that is available starting with Version 3.22.11 is used.      Note that to set up a superuser, you need only create a  user  table entry with the privilege fields set to  'Y' .  No  db  or  host  table entries are necessary.      In the last  INSERT  statement (for the  dummy  user), only the  Host ,  User , and  Password  columns in the  user  table record are assigned values. None of the privilege columns are set explicitly, so MySQL assigns them all the default value of  'N' . This is the same thing that  GRANT USAGE  does.      The following example adds a user  custom  who can access the  bankaccount  database only from the local host, the  expenses  database only from the host  whitehouse.gov , and the  customer  database only from the host  server.domain .  He wants to use the password  obscure  from all three hosts.      To set up this user's privileges using  GRANT  statements, run these commands:      shell> mysql --user=root mysql mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP     ->     ON bankaccount.*     ->     TO custom@localhost     ->     IDENTIFIED BY 'obscure'; mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP     ->     ON expenses.*     ->     TO custom@'whitehouse.gov'     ->     IDENTIFIED BY 'obscure'; mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP     ->     ON customer.*     ->     TO custom@'server.domain'     ->     IDENTIFIED BY 'obscure';      To set up the user's privileges by modifying the grant tables directly, run these commands (note the  FLUSH PRIVILEGES  at the end):      shell> mysql --user=root mysql mysql> INSERT INTO user (Host,User,Password)     -> VALUES('localhost','custom',PASSWORD('obscure')); mysql> INSERT INTO user (Host,User,Password)     -> VALUES('whitehouse.gov','custom',PASSWORD('obscure')); mysql> INSERT INTO user (Host,User,Password)     -> VALUES('server.domain','custom',PASSWORD('obscure')); mysql> INSERT INTO db     -> (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,     ->  Create_priv,Drop_priv)     -> VALUES     -> ('localhost','bankaccount','custom','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO db     -> (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,     ->  Create_priv,Drop_priv)     -> VALUES     -> ('whitehouse.gov','expenses','custom','Y','Y','Y','Y','Y','Y'); mysql> INSERT INTO db     -> (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,     ->  Create_priv,Drop_priv)     -> VALUES('server.domain','customer','custom','Y','Y','Y','Y','Y','Y'); mysql> FLUSH PRIVILEGES;      As in the preceding example that used  INSERT  statements, you may need to use a different number of  'Y'  values, depending on your version of MySQL.      The first three  INSERT  statements add  user  table entries that allow user  custom  to connect from the various hosts with the given password, but grant no permissions to him (all privileges are set to the default value of  'N' ).  The next three  INSERT  statements add  db  table entries that grant privileges to  custom  for the  bankaccount ,  expenses , and  customer  databases, but only when accessed from the proper hosts.  As usual, after you modify the grant tables directly , you must tell the server to reload them (with  FLUSH PRIVILEGES ) so that the privilege changes take effect.      If you want to give a specific user access from any machine in a given domain (for example,  mydomain.com ), you can issue a  GRANT  statement like the following:      mysql> GRANT ...     ->     ON *.*     ->     TO myusername@'%.mydomain.com'     ->     IDENTIFIED BY 'mypassword';      To do the same thing by modifying the grant tables directly, do this:      mysql> INSERT INTO user VALUES ('%.mydomain.com', 'myusername',     ->             PASSWORD('mypassword'),...); mysql> FLUSH PRIVILEGES;        User Comments Posted by [name withheld] on December 3 2003 10:31pm [ Delete ] [ Edit ] I had to use: GRANT ALL PRIVILEGES ON bCo.* TO `nan@%` IDENTIFIED BY 'weenie' WITH GRANT OPTION; instead of: GRANT ALL PRIVILEGES ON bCo.* TO nan@'%` IDENTIFIED BY 'weenie' WITH GRANT OPTION; as shown in the documentation in order for the query to execute. Posted by [name withheld] on December 30 2003 1:15pm [ Delete ] [ Edit ] Your second example, in which you claim MySQL is wrong in their documentation, will not work because you are trying to use a backquote (`) instead of the single quote (').  They look similar but are completely different.  Thus your example: GRANT ALL PRIVILEGES ON bCo.* TO nan@'%` IDENTIFIED BY 'weenie' WITH GRANT OPTION; does not work because nan@'%` is not properly quoted.  It should read nan@'%' instead which is fine.  This works as expected: GRANT ALL PRIVILEGES ON bCo.* TO nan@'%' IDENTIFIED BY 'weenie' WITH GRANT OPTION; Add your own comment. Top  /  Previous  /  Next  /  Up  /  Table of Contents             MySQL.com home  |  Site map  |  Contact us  |  Press  |  Jobs  |  Privacy policy  |  Trademark info  | © 1995-2003 MySQL AB. All rights reserved."
GX010-84-6544397	SUT Home                                        Project Status          Download          Papers          Documentation          License          Mailing List          Propaganda          Old Website          Links                                             Scalable UNIX Tools for Clusters   SUT is a collection of standard UNIX utilities like ls, rm, cp, etc. that are targeted at cluster use.  These tools are based on a paper by   William Gropp  and   Ewing Lusk  entitled  Unix Tools on Massively Parallel Processors .  As it stands now, the tools in the SUT package do not conform to the syntax or semantics of those described in the paper for various reasons but in many cases, the  current SUT package offers enhancements on the ideas presented in the paper.     If you are using this software, please email the  mailing list  with success or bug reports.  Thank you!    News     Friday, June 29, 2001 - It has come to my attention that  the current version of SUT does not work with the current release of MPICH .  Please wait to test SUT until this newer MPICH arrives.  Stay tuned for updates!  Friday, June 15, 2001 - SUT 1.0.0beta7 is out.  Enhancements and bugfixes.  Monday, June 4, 2001 - There is now a  quick start guide  in the  documentation section .  Check it out if you're having trouble getting started with SUT.  Friday, June 1, 2001 - SUT 1.0.0beta6 is released.  It contains a number of small convenience enhancements.  Old news        Contact  Emil Ong  about issues concerning this page.
GX000-04-0301650	Next:   Contents         Contents                   Mysql++    A C++ API for Mysql   ver 1.7   Kevin Atkinson   <kevinatk@home.com>   Sinisa Milivojevic   <sinisa@mysql.com>   Michael Widenius   <monty@mysql.com>            Contents   Introductory Material     1. Introduction     1.1 What is Mysql++   1.2 Getting Mysql++   1.3 Mysql++ Mailing List     2. Overview     The Main Database Handle   The Query Object   The Result Sets     The Dramatic Result Set   The Static Result Sets   The Dynamic Fully Mutable Sets     In addition     3. Important Changes      3.1 Current Changes   3.2 Future Changes       Usage     4. Tutorial by Example     4.1 Introduction   4.2 Assumptions   4.3 Running the Examples   4.4 The Basics     4.4.1 A Simple Example   4.4.2 A slightly more complicated example   4.4.3 Getting Info about the Fields     4.5 Specialized SQL Structures     4.5.1 Retrieving Data   4.5.2 Adding Data    4.5.3 Modifying Data    4.5.4 Less-Than-Comparable     4.6 Let us be usefull     4.6.1 Loading binary file in a BLOB column   4.6.1 Displaying images in HTML from BLOB column   4.6.2 Delete or Update from Select   4.6.2 And There's More     4.7 Template Queries     5. Class Reference      5.1 BadConversion     5.1.1 Synopses     5.2 BadNullConversion     5.2.1 Synopses     5.3 Connection     5.3.1 Synopses   5.3.2 storein(TYPE &con, const string &s)     5.4 Date     5.4.1 Synopses     5.5 DateTime     5.5.1 Synopses     5.6 FieldNames     5.6.1 Synopses     5.7 FieldTypes     5.7.1 Synopses     5.8 Fields     5.8.1 Synopses     5.9 MutableRes     5.9.1 Synopses   5.9.2 field_names() const     5.10 MutableRow     5.10.1 Synopses     5.11 MutableRow_base     5.11.1 Synopses   5.11.2 operator [](const string &i)   5.11.3 operator [](const string &i) const     5.12 Null     5.12.1 Synopses   5.12.2 Null(const null_type &n)     5.13 NullisBlank     5.13.1 Synopses     5.14 NullisNull     5.14.1 Synopses     5.15 NullisZero     5.15.1 Synopses     5.16 Query     5.16.1 Synopses   5.16.2 success()   5.16.3 execute(...)   5.16.4 store(...)   5.16.5 use(...)     5.17 ResNSel     5.17.1 Synopses     5.18 ResUse     5.18.1 Synopses     5.19 Result     5.19.1 Synopses   5.19.2 Result(const Result &other)     5.20 Row     5.20.1 Synopses   5.20.2 operator [](const char *) const   5.20.3 operator [](const string &i) const     5.21 SQLQuery     5.21.1 Synopses   5.21.2 str(query_reset r = DONT_RESET)   5.21.3 str(const SQLString &parm0, ...,const SQLString &parm11)   5.21.4 str(const SQLQueryParms & p, query_reset r = DONT_RESET)   5.21.5 reset()     5.22 SQLQueryNEParms     5.22.1 Synopses     5.23 SQLQueryParms     5.23.1 Synopses   5.23.2 set(ss a, [ss b] ,... , [ss l])     5.24 SQLString     5.24.1 Synopses     5.25 Set     5.25.1 Synopses     5.26 Time     5.26.1 Synopses     5.27 const_string     5.27.1 Synopses     5.28 const_subscript_container     5.28.1 Synopses     5.29 mysql_ColData     5.29.1 Synopses   5.29.2 operator TYPE()     5.30 mysql_type_info     5.30.1 Synopses   5.30.2 name() const   5.30.3 base_type() const   5.30.4 id() const     5.31 subscript_iterator     5.31.1 Synopses     5.32 Misc Non Members     5.32.1 mysql_cmp   5.32.2 mysql_cmp_cstr     5.33 Manipulators      6. Template Queries     6.1 Setting Them Up   6.2 Template Format   6.3 Setting the Parameters     6.3.1 At Execution Time   6.3.2 Using Defaults   6.3.3 Combining the Two   6.3.4 Error Handling   6.3.5 More Advanced Stuff       7. Specialized SQL Structures     7.1 sql_create_basic    7.2 sql_create_basic with compare    7.3 sql_create_basic with Additional Constructor    7.4 sql_create_basic General Format    7.5 sql_create_basic_c_order    7.6 sql_create_basic_c_order General Format    7.7 sql_create    7.8 sql_create_c_names    7.9 sql_create_c_names General Format    7.10 sql_create_c_order    7.11 sql_create_complete    7.12 Changing the table name    7.13 Seeing the actual code    7.14 Adding functionality    7.15 Other notes      8. Long Names     Appendices     A. Changelog     1.7 (May17 2000) Sinisa Milivojevic <sinisa@mysql.com>   1.6 (Feb 3 2000) Sinisa Milivojevic <sinisa@mysql.com>   1.5 (Dec 1 1999) Sinisa Milivojevic <sinisa@mysql.com>   1.4 (Nov 25 1999) Sinisa Milivojevic <sinisa@mysql.com>   1.3 (Nov 10 1999) Sinisa Milivojevic <sinisa@mysql.com>   1.2 (Oct 15 1999) Sinisa Milivojevic <sinisa@mysql.com>   1.1 (Aug 2 1999) Sinisa Milivojevic <sinisa@mysql.com>   1.0 (June 9 1999) Michael Widenius <monty@monty.pp.sci.fi>   .64.1.1a (Sep 27 1998)   .64.1a (Aug 1 1998)   .64.0.1a (July 31 1998)    .64.a (July 24 1998)   .63.1.a   .62.a (May 3 1998)   .61.1.a (April 28 1998)   .61.0.a   .60.3a (April 24 1998)     B. To Do   C. Credits   D. Copyright     D.1 LGPL     E. Feedback     About this document ...           2000-05-16
GX000-04-1058737	SEARCH THE ALS WEB                                     Questions & Comments         Privacy          & Security         ALS Intranet         Page last updated           October 10, 2002                                                                         Technical Specifications                             Storage Ring Parameters                  Photon Source Parameters           Beamline Parameters                                  Table of ALS Beamlines                      Clickable Beamline Imagemap              Additional information about beamlines is available from various                user groups. See  User Sites .                                          ALS Nomenclature          and CAD drawings  (Berkeley Lab use only)                ALS            Equipment Protection System drawings  (Berkeley Lab use only)
GX000-06-0654425	MySQL databases at U.S. ATLAS Tier 1 Facility        This page provides the information about  MySQL servers at U.S. ATLAS Tier 1 Facility. These servers can be browsed via web  (user/pass is the same as the ATLAS web site):         db1.usatlas.bnl.gov  - main server      atlassw1.phy.bnl.gov  - backup server accessible for reading only.  Databases are updated  from the main server nightly using the  mysqldump  utility. Also backups are copied in gzipped form to  /afs/usatlas.bnl.gov/project/mysql_archives  area where are  kept for one week. The format of file names in this area is  <db name>_<day of week>.gz           Useful links             MySQL at BNL  , including information on the access to MySQL databases and installation of MySQL software.      LAr MySQL databases page  .        MySQL-based distributed data catalog prototype (DBYA)               The MySQL databases are under construction and the updates of  these pages are performed on regular basis.  Please send comments, suggestions, and information about  noticed obsolete details  to   the U.S. ATLAS software librarian .         back to U.S. Application Software Homepage
GX000-10-1297682	Home                    Newsletter                    BESSRC Staff                    Getting Beamtime                    Calendar                    APS Status                    Standard Operating Procedures (SOPs)                    11-ID Info                    11-ID-C Info                    12-ID Info                    12-BM Info                    Online Manuals                    Downloads                    BESSRC Publications                    Photographs                    Links                                                                                                                                                         WWW       BESSRC
GX000-11-6908837	This search tool indexes primarily documentation resident on this site. It doesn't index source code in LXR. Use LXR's  own facilities for  identifier search ,  free text search , and  file search  to search source code.              Search for:      Results per page:    10  20  50    Output format:    Long  Short  URL    Default query type:    All  Any        Search through:    Entire site    JDK1.2.2  Servlets  Colt  XML4J  MySQL  Perl  emacs  PHP  Apache  ROOT    Restrict search:    All content                  Powered by  UdmSearch
GX000-14-11860806	"Experten halten kommerziellen Fusionsreaktor ab 2050 für realistisch    Ausschuss für Bildung, Forschung und Technikfolgenabschätzung (Anhörung)    Berlin : (hib/MAR) Kommerzielle Fusionskraftwerke werden nach Einschätzung von Professor Alexander Bradshaw vom Max-Planck-Institut für Plasmaphysik in Garching gegen Mitte des Jahrhunderts in Betrieb gehen können. Bei der Anhörung des Bildungs- und Forschungsausschusses zum Thema ""Kernfusion"", die am Mittwochvormittag begonnen hat, stellte Bradshaw weiter fest, das geplante ITER-Projekt (Internationaler Thermonuklearer Experimentierreaktor) werde die physikalische und technische Machbarkeit der Fusion als Energiequelle beweisen. Hier warte man auf eine politische Entscheidung, die ebenfalls den Zeitplan bestimme.    Professor Hardo Bruhns von der EU-Kommission in Brüssel skizzierte diesen Zeitplan. Danach sei für das modifizierte ITER-Projekt eine Bauzeit von zehn Jahren anzusetzen, gefolgt von einer zehnjährigen Experimentierphase. Als letzter Schritt könne dann der Demonstrationsreaktor DEMO realisiert werden, der bereits Elektrizität erzeugen wird. Die Länge der Planungs- und Bauzeiten erklärte Professor Ulrich Samm vom Forschungszentrum Jülich mit der erforderlichen Größe der Reaktoren. Energie könne nur gewonnen werden, wenn die Plasmen ausreichend groß seien. Deshalb könne es keine kleinen Fusionsreaktoren geben, auch nicht in der Experimentierphase.    Von der Mehrzahl der Sachverständigen wurde die zeitliche Prognose bis zur Inbetriebnahme eines ersten kommerziellen Fusionsreaktors als realistisch angesehen, ""wenn alle bislang geplanten, notwendigen Entwicklungsschritte erfolgreich durchgeführt werden können"" (Wolfgang Liebert, Interdisziplinäre Arbeitsgruppe Naturwissenschaft, Technik und Sicherheit - IANUS, Technische Universität Darmstadt). Dagegen setzte Professor Manfred Heindler von der Technischen Universität in Graz ""ein großes Fragezeichen"" bei der Einhaltung des Fahrplans hinsichtlich der Verfügbarkeit von Materialien für die Fusionsbauteile. Er sehe nicht, dass ITER die technische Machbarkeit zeigen werde.    Auf die Frage nach den Fördermitteln der EU für die Fusionsforschung erklärte der Kommissionsvertreter, seit Beginn des Europäischen Forschungsprogramms seien 10 Milliarden Euro eingesetzt worden. Gegenwärtig würden knapp 500 Millionen Euro pro Jahr zur Verfügung gestellt, so dass bis zu einem kommerziellen Reaktor Kosten von etwa 50 Milliarden Euro entstehen würden.    Nach den Worten der Ausschussvorsitzenden Ulrike Flach (F.D.P.) ist die Kernfusion seit vielen Jahren Hoffnungsträger für die zukünftige Energieversorgung. Grundlage der Anhörung seien die Anträge von F.D.P. ( 14/3813 ) und CDU/CSU ( 14/4498 ), in denen die Bundesregierung aufgefordert werde, weiterhin Forschung zur künftigen Nutzung der Kernfusion als Energieträger zu fördern.                                  Deutscher Bundestag           Pressezentrum           Platz der Republik 1           11011 Berlin           Tel.: (030) 2 27-3 56 42           Fax: (030) 2 27-3 61 91                             Verantwortlich:           Uta Martensen                      Redaktionsmitglieder:           Dr. Bernard Bode, Rainer Büscher, Michael Klein, Dr.          Volker Müller, Siegfried Wolf"
GX000-21-5108332	English Deutsch
