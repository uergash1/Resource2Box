id	content
clueweb09-en0006-59-22100	"                 Home  >> Worms Computer Protection: Worms   Consider them viruses; only smarter.                    An example on how fast worms can compromise an unsecured system as well as try to find new targets to infect. >        Worms . Chances are if you have ever read any type of newspaper, you have read about worms. From Love Bug to Code Red, these babies cause unimaginable amounts of damage world-wide. We have no doubt in our minds that the Internet is going to be playing a crucial role in wars from now on; if worms are programmed properly, they can be one of the fastest methods of causing damage on a global scale.        The question is how can worms spread so fast, and how are they different from viruses? We've noticed the terms virus and worm are spoken like they are synonymous with one another. While they both have many similarities, there is one distinguishing feature that separates the viruses from the worms:       Worms, unlike viruses, have self-propagating engines. What this means is while a virus needs a person to activate it (thus giving it the capability to spread), worms can do this without any human interaction.    This is how worms cause such a large amount of damage. They spread by themselves and unleash their payload on every computer they infect. This leads to another question: how do worms spread themselves???   Excellent question!  Worms  can do this in a variety of ways. With the worms we have analyzed (as well as the popular ones you see in the news), they primarily spread in the following ways:                Email address harvesting:  When a worm infects your system, it will check a variety of file types on your computer for additional email addresses to send itself to. The main file types that worms look for in email addresses are files with .doc (Microsoft Word documents), .txt (Notepad files), .htm and .html (both are webpages) extensions.             Same-domain search engine queries:  Once a worm infects your system, it will determine what domain your computer is on. Once it figures this out, the worm will actually use popular search engines such as Google and Yahoo to search for additional email addresses that match your domain name.        Want to figure out what domain your computer is on? Do the following:                Click Start, then Run...             In the new window that opens, type ""cmd"" (without the quotes) and click OK             When the black box opens, type ""ipconfig"" (without the quotes) and hit Enter             The value to the right of ""Connection-specific DNS Suffix"" is the domain your computer resides on             Once you discovered the domain your computer is on, type ""exit"" (without the quotes) and hit Enter       Think that worms are smart? Unfortunately, they are even smarter than you think. Now, you would think once worms find additional email addresses to send itself to, it would just send the exact same email to every email address... we wish that were true. Worms are developed with what you could consider an email generator. Every email that is sent through the worm can have a combination of a randomized Sender, Subject, Email Attachment (both the attachment name and its extension), and Body. Since everything can be randomized except your email address, it makes it very difficult to spot a worm. Kinda gives you a new perspective of opening junk mail, doesn't it!       Nobody ever wants to deal with worms, that is obvious (unless you are a malicious software analyzer or just crazy). Fortunately, the good guys a lot of the time know what to look for in worms and can quickly produce a remedy for the general public. There are tons of worms that have had a lifespan of less than an hour because of the rapid releases of security patches from companies worldwide! How's that for a breath of fresh air!    Want to jump into the fight of preventing worms from spreading? Do the following:                Keep your computer up-to-date with the latest patches:  We can't exaggerate the importance of this. These patches seal up security holes worms take advantage of, so it's in your best interest to keep up with the most recent patches available. Not sure if you have the most up-to-date patches? Look at  Microsoft's website  and click on the Microsoft Update link on the left-hand menu. You also have the option of having critical patches automatically update your machine when available. To set this option, do the following:    o        Click Start, then My Computer    o        Under the Other Places menu to the left, click Control Panel    o        If you are in Category View, click  Security   Center  and click on the Automatic Updates section at the bottom of the new window that opened. In the new window that opened, make sure the Automatic (recommended) is selected.    o        If you are in Classic View, click System. When the new window opens, click the Automatic Updates tab and make sure the Automatic (recommended) is selected.             Have anti-virus software installed with up-to-date virus definitions:  Having anti-virus software with the most up-to-date virus definitions is one of your best defenses against worms. Not only that, anti-virus software is pretty useless if you don't keep its virus definitions up-to-date. Have a look at the  Checklist  section for more information about anti-virus software.             Use extreme caution when opening emails from unknown users:  This is how worms like to spread. Always use anti-virus tools to scan emails for worms. Even if the email looks like it came from someone you know, it never hurts to scan it for worms. You just never know if a worm got onto a computer of someone you know and sent its own email to try and infect your system.        Do yourself a favor and have a look at this  malicious software prevention and detection suite that uses ground-breaking technology  to protect your computer.  This is by far our favorite security suite and we would not consider a computer secure without it.            home  |  computer protection news  |  myths. vs. facts of computer protection  |  computer adware protection  |   computer protection for spyware  |  computer backdoor protection  |  rootkit computer protection  |  computer trojan protection  |  virus computer protection  |  articles  |  computer worm protection  |  computer registry  |  web evidence computer internet security  |  links  |  phishing computer protection  |  computer repair and optimization protection  |  robust computer protection checklist                 Home        News        Tools        Myths vs. Facts        Adware        Spyware        Backdoors        Rootkits        Trojans        Viruses        Worms        Registry        Web Evidence        Phishing        Repair & Optimization        Checklist      --------------        Link to Us        Articles          Refer A Friend        Contact                          Site Map            Click Here for our Newsletter and FREE Identity Theft Mini-Course                              2006 EssentialComputerSecurity.com All Rights Reserved.         "
clueweb09-en0008-07-23620	"       How to 0wn the Internet in Your Spare Time     Stuart Staniford   1   Vern Paxson   2   Nicholas Weaver   3      Silicon Defense   ICSI Center for Internet Research   UC Berkeley     stuart@silicondefense.com   vern@icir.org   nweaver@cs.berkeley.edu           This paper appears in the  Proceedings of the 11th USENIX Security Symposium  (Security '02)     Also in  PDF optimized for reading online PDF optimized for printing           Abstract       The ability of attackers to rapidly gain control of vast          numbers of Internet hosts poses an immense risk to the          overall security of the Internet.  Once subverted, these          hosts can not only be used to launch massive denial of          service floods, but also to steal or corrupt great quantities          of sensitive information, and confuse and disrupt use of the          network in more subtle ways.    We present an analysis of the magnitude of the threat.  We          begin with a mathematical model derived from empirical data          of the spread of Code Red I in July, 2001.  We discuss          techniques subsequently employed for achieving greater          virulence by Code Red II and Nimda.  In this          context, we develop and evaluate several new, highly virulent          possible techniques: hit-list scanning (which creates a           Warhol  worm), permutation scanning (which enables          self-coordinating scanning), and use of Internet-sized          hit-lists (which creates a  flash  worm).    We then turn to the to the threat of  surreptitious           worms that spread more slowly but in a much harder to detect          ""contagion"" fashion.  We demonstrate that such a worm today          could arguably subvert upwards of 10,000,000 Internet          hosts.  We also consider robust mechanisms by which attackers   can control and update deployed worms.    In conclusion, we argue for the pressing need to develop a  ""Center for Disease Control"" analog for virus- and  worm-based threats to national cybersecurity, and sketch some  of the components that would go into such a Center.       Introduction       If you can control a million hosts on the Internet, you can do enormous damage.  First, you can launch distributed denial of service (DDOS) attacks so immensely diffuse that mitigating them is well beyond the state-of-the-art for DDOS traceback and protection technologies.  Such attacks could readily bring down e-commerce sites, news outlets, command and coordination infrastructure, specific routers, or the root name servers.    Second, you can access any sensitive information present on any of those million machines--passwords, credit card numbers, address books, archived email, patterns of user activity, illicit content--even blindly searching for a ""needle in a haystack,"" i.e., information that might be on a computer somewhere in the Internet, for which you trawl using a set of content keywords.    Third, not only can you access this information, but you can sow confusion and disruption by corrupting the information, or sending out false or confidential information directly from a user's desktop.    In short, if you could control a million Internet hosts, the potential damage is truly immense: on a scale where such an attack could play a significant role in warfare between nations or in the service of terrorism.    Unfortunately it is reasonable for an attacker to gain control of a million Internet hosts, or perhaps even ten million. The highway to such control lies in the exploitation of  worms : programs that self-propagate across the Internet by exploiting security flaws in widely-used services. 4    Internet-scale worms are not a new phenomenon [ Sp89 , ER89 ], but the severity of their threat has rapidly grown with  (i)  the increasing degree to which the Internet has become part of a nation's critical infrastructure, and  (ii)  the recent, widely publicized introduction of very large, very rapidly spreading Internet worms, such that this technique is likely to be particularly current in the minds of attackers.              Figure 1:   Onset of Code Red I v2, Code Red II, and Nimda: Number of  remote hosts launching confirmed attacks corresponding to different worms, as seen at the Lawrence Berkeley National Laboratory.  Hosts are detected by the distinct URLs they attempt to retrieve, corresponding to the IIS exploits and attack strings.  Since Nimda spreads by multiple vectors, the counts shown for it may be an underestimate.        We present an analysis of the magnitude of the threat.  We begin with a mathematical model derived from empirical data of the spread of Code Red I v2 in July and August, 2001 (Section  2 ).  We then discuss techniques employed for achieving greater effectiveness and virulence by the subsequent Code Red II and Nimda worms (Section  3 ). Figures  1  and  2  show the onset and progress of the Code Red and Nimda worms as seen ""in the wild.""    In this context, we develop the threat of three new techniques for highly virulent worms: hit-list scanning, permutation scanning, and Internet scale hit-lists (Section  4 ).  Hit-list scanning is a technique for accelerating the initial spread of a worm. Permutation scanning is a mechanism for distributed coordination of a worm.  Combining these two techniques creates the possibility of a  Warhol  worm, 5 seemingly capable of infecting most or all vulnerable targets in a few minutes to perhaps an hour.  An extension of the hit-list technique creates a  flash  worm, which appears capable of infecting the vulnerable population in 10s of seconds:  so fast that no human-mediated counter-response is possible .    We then turn in Section  5  to the threat of a new class of  surreptitious  worms.  These spread more slowly, but in a much harder to detect ""contagion"" fashion, masquerading as normal traffic.  We demonstrate that such a worm today could arguably subvert upwards of 10,000,000 Internet hosts.      Then in Section  6 , we discuss some possibilities by which an attacker could control the worm using cryptographically-secured updates, enabling it to remain a threat for a considerable period of time. Even when most traces of the worm have been removed from the network, such an ""updatable"" worm still remains a significant threat.    Having demonstrated the very serious nature of the threat, we then in Section  7  discuss an ambitious but we believe highly necessary strategy for addressing it: the establishment at a national or international level of a ""Center for Disease Control"" analog for virus- and worm-based threats to cybersecurity.  We discuss the roles we envision such a Center serving, and offer thoughts on the sort of resources and structure the Center would require in order to do so. Our aim is not to comprehensively examine each role, but to spur further discussion of the issues within the community.               Figure 2:   The endemic nature of Internet worms: Number of remote  hosts launching confirmed attacks corresponding to different worms, as seen at the Lawrence Berkeley National Laboratory, over several months since their onset.  Since July, 139,000 different remote Code Red I hosts have been confirmed attacking LBNL; 125,000 different Code Red II hosts; and 63,000 Nimda hosts.  Of these, 20,000 were observed to be infected  with two different worms, and 1,000 with all three worms. (Again, Nimda is potentially an underestimate because we are only counting those launching Web attacks.)            An Analysis of Code Red I      The first version of the Code Red worm was initially seen in the wild on  July 13th, 2001, according to Ryan Permeh and Marc Maiffret of Eeye  Digital Security [ EDS01a , EDS01b ], who disassembled the worm code and  analyzed its behavior.  The worm spread by compromising Microsoft IIS  web servers using the .ida vulnerability discovered also by Eeye and  published June 18th [ EDS01c ] and was assigned CVE number  CVE-2001-0500 [ CV01 ].    Once it infected a host, Code-Red spread by launching 99 threads which generated random IP addresses, and then tried to compromise those IP addresses using the same vulnerability.  A hundredth thread defaced the web server in some cases.    However, the first version of the worm analyzed by Eeye, which came to be known as CRv1, had an apparent bug.  The random number generator was initialized with a fixed seed, so that all copies of the worm in a particular thread, on all hosts, generated and attempted to compromise exactly the same sequence of IP addresses.  (The thread identifier is part of the seeding, so the worm had a hundred different sequences that it explores through the space of IP addresses, but it only explored those hundred.)  Thus CRv1 had a linear spread and never compromised many machines.    On July 19th, 2001, a second version of the worm began to spread.  This was suspected informally via mailing list discussion, then confirmed by the mathematical analysis we present below, and finally definitively confirmed by disassembly of the new worm.  This version came to be known as CRv2, or Code Red I.    Code Red I v2 was the same codebase as CRv1 in almost all respects--the only differences were fixing the bug with the random number generation, an end to web site defacements, and a DDOS payload targeting the IP address of  http://www.whitehouse.gov .    We developed a tentative quantitative theory of what happened with the spread of Code Red I worm.  The new version spread very rapidly until almost all vulnerable IIS servers on the Internet were compromised.  It stopped trying to spread at midnight UTC due to an internal constraint in the worm that caused it to turn itself off.  It then reactivated on August 1st, though for a while its spread was suppressed by competition with Code Red II (see below).  However, Code Red II died by design [ SA01 ] on October 1, while Code Red I has continued to make a monthly resurgence, as seen in Figure  2 .  Why it continues to gain strength with each monthly appearance remains unknown. 6    We call this model the Random Constant Spread (RCS) model.  The model assumes that the worm had a good random number generator that is properly seeded.  We define   as the total number of vulnerable servers which can be potentially compromised from the Internet.  (We make the approximation that   is fixed--ignoring both patching of systems during the worm spread and normal deploying and removing of systems or turning on and off of systems at night.  We also ignore any spread of the worm behind firewalls on private Intranets).      is the initial compromise rate.  That is, the number of vulnerable hosts which an infected host can find and compromise per hour at the start of the incident, when few other hosts are compromised.  We assume that   is a global constant, and does not depend on the processor speed, network connection, or location of the infected machine. (Clearly, constant   is only an approximation.)  We assume that a compromised machine picks other machines to attack completely at random, and that once a machine is compromised, it cannot be compromised again, or that if it is, that does not increase the rate at which it can find and attack new systems.  We assume that once it is compromised, it stays that way.      is a time which fixes when the incident happens.    We then have the following variables:      is the proportion of vulnerable machines which have been  compromised.     is the time (in hours).        Now, we analyze the problem by assuming that at some particular time  , a proportion of the machines   have been compromised, and then asking how many more machines,  , will get compromised in the next amount of time  .  The answer is:              (1)      The reason is that the number of machines compromised in the next increment of time is proportional to the number of machines already compromised ( ) times the number of machines each compromised machine can compromise per unit time ( ), times the increment of time ( ).  (Note that machines can compromise   others per unit time to begin with, but only   once a proportion of other machines are compromised already.)    This give us the differential equation:              (2)      with solution:              (3)         where   is a constant of integration that fixes the time position of  the incident.  This equation has been well known for many years as the   logistic  equation, and governs the rate of growth of epidemics in finite  systems when all entities are equally likely to infect any other entity  (which is true for randomized spreading among Internet-connected servers, in the absence of  firewall filtering rules that differentially affect infectability from  or to different addresses).    This is an interesting equation.  For early   (significantly before  ),   grows exponentially.  For large   (significantly after  ),   goes to   (all vulnerable machines are compromised).  The rate at which this happens depends only on   (the rate at which one machine can compromise others), and not at all on the number of machines.  This is interesting because it tells us that a worm like this can compromise all vulnerable machines on the Internet fairly fast.                Figure 3:   Hourly probe rate data for inbound port 80 at the Chemical Abstracts Service during the initial outbreak of Code Red I on July 19th, 2001.  The  -axis is the hour of the day (CDT time zone), while the  -axis is probe rate, the number of different IP addresses seen, and a fit to the data discussed in the text.       Figure  3  shows hourly probe rate data from Ken Eichmann of the Chemical Abstracts Service for the hourly probe rate inbound on port 80 at that site. Also shown is a fit to the data with  ,  , and with the top of the fit scaled to a maximum probe rate of 510,000 scans/hour. (We fit it to fall slightly below the data curve, since it seems there is a fixed background rate of web probes that was going on before the rapid rise due to the worm spread.) This very simple theory can be seen to give a reasonable first approximation explanation of the worm behavior.  See also Section  4.3  for validation of the theory via simulation.    Note that we fit the scan rate, rather than the number of distinct IPs seen at this site. The incoming scan rate seen at a site is directly proportional to the total number of infected IPs on the Internet, since there is a fixed probability for any worm copy to scan this particular site in the current time interval.  However, the number of distinct IPs seen at a site is distorted relative to the overall infection curve.  This is because a given worm copy, once it is infected, will take some amount of time before it gets around to scanning any particular site.  For a small address space, this delay can be sizeable and causes the distinct IP graph at the given site to lag behind the overall Internet infection rate graph.    Two implications of this graph are interesting.  One is that the worm came close to saturating before it turned itself off at midnight UTC (1900 CDT), as the number of copies ceased increasing a few hours before the worm's automatic turnoff.  Thus it had found the bulk of the servers it was going to find at this time.  Secondly, the infection rate was about   per hour--in the early stages of the infection, each infected server was able to find about   other servers per hour.    Although Code Red I turned itself off at midnight UTC on July 19th, hosts with inaccurate clocks kept it alive and allowed it to spread again when the worm code allowed it to re-awaken on August 1st. Figure  4  shows similar data and fit for that incident. The   here is about  .  Since the worm code-base was the same, this lower spread rate indicates that the number of vulnerable systems was a little less than 40% as many as the first time around.  That is, the data appears consistent with slightly more than half the systems having been fixed in the   days intervening.                Figure 4:   Hourly probe rate data for inbound port 80 at the  Chemical Abstracts Service, for Code Red I's reemergence on August 1st.  The x-axis the time of day on August 1st  (Central US Time).  The y-axis shows the monitored probe rate and a fit for the data discussed in the text.            ""Better"" worms--practice      In this section, we explore the strategies adopted by the two major worms released subsequent to Code Red I: ""Code Red II"" and ""Nimda.""       Localized scanning--Code Red II       The Code Red II worm was released on Saturday August 4th, 2001 and spread rapidly [ CE01 , SA01 ].  The worm code contained a comment stating that it was ""Code Red II,"" but it was an unrelated code base.  It did use the same vulnerability, however--a buffer overflow in Microsoft's IIS Web server with CVE number CVE-2001-0500.  When successful, the payload installed a root backdoor allowing unrestricted remote access to the infected host. The worm exploit only worked correctly when IIS was running on Microsoft Windows 2000; on Windows NT it caused a system crash rather than an infection.    The worm was also a single-stage scanning worm that chose random IP addresses and attempted to infect them.  However, it used a localized scanning strategy, where it was differentially likely to attempt to infect addresses close to it.  Specifically, with probability   it chose a random IP address from within the class B address space (/16 network) of the infected machine.  With probability   it chose randomly from its own class A (/8 network).  Finally, with probability   it would choose a random address from the whole Internet.    This strategy appears quite successful.  The localized spreading allows the worm to quickly infect parts of the Internet that contain many vulnerable hosts, and also means that the infection often proceeds quicker since hosts with similar IP addresses are often close together in the network topology also.  This strategy also allows a worm to spread very rapidly within an internal network once it manages to pass through the external firewall.    Unfortunately, developing an analytic model for the spread of a worm employing this type of localized scanning strategy is significantly more difficult than the modeling effort in Section  2 , because it requires incorporating potentially highly non-homogeneous patterns of population locality.  The empirical data is also harder to interpret, because Code Red I was quite active when Code Red II was released.  Indeed, it appears that Code Red II took a while to overcome Code Red I (see Figure  1 ), but fully determining the interplay between the two appears to be a significant undertaking.       Multi-vector worms--Nimda       As well illustrated by the Nimda worm/virus (and, indeed, the original Internet Worm [ Sp89 , ER89 ]), malevolent code is not restricted to a single technique.  Nimda began on September 18th, 2001, spread very rapidly, and maintained itself on the Internet for months after it started.  Nimda spread extensively behind firewalls, and illustrates the ferocity and wide reach that a multi-mode worm can exhibit.  The worm is thought to have used at least five different methods to spread itself.        By infecting Web servers from infected client machines via active probing for a Microsoft IIS  vulnerability (CVE-2000-0884).    By bulk emailing of itself as an attachment based on email addresses determined from the infected machine.    By copying itself across open network shares    By adding exploit code to Web pages on compromised servers in order to infect clients which browse the page.    By scanning for the backdoors left behind by Code Red II and also the ""sadmind"" worm [ CE03 ].           Figure  5  illustrates how rapidly the worm tried to infect one site, the Lawrence Berkeley National Laboratory.  The  -axis plots hours past midnight, PDT, while the  -axis plots HTTP connection attempts per second.  Only connections from hosts confirmed to have harbored Nimda are counted, to avoid possible confusion with concurrent Code Red connection attempts.  After the onset of the infection, the total rate of probing was about 3 times that from the hosts subsequently confirmed to harbor Nimda.    Clearly, onset was quite rapid, rising in just half an hour from essentially no probing to a sustained rate of nearly 100 probes/sec.                Figure 5:   HTTP connections per second seen at the Lawrence Berkeley  National Laboratory, rising due to the onset of Nimda, September 18.         There is an additional synergy in Nimda's use of multiple infection vectors: many firewalls allow mail to pass untouched, relying on the mail servers to remove pathogens.  Yet since many mail servers remove pathogens based on signatures, they aren't effective during the first few minutes to hours of an outbreak, giving Nimda a reasonably effective means of crossing firewalls to invade internal networks.    Finally, we note that Nimda's full functionality is  still not  known : all that is known is how it spreads, but not what it might be capable of doing in addition to spreading, if it receives the right trigger, or a prearranged time rolls around.  We return to this point in Section  7 .         ""Better"" worms--theory      There are several techniques which, although not yet employed, could further significantly increase the virulence of a worm.  Beyond the obvious factors of discovering more widespread security holes and increasing the scanning rate, some additional strategies a worm author could employ are:  (i)  hit-list scanning,  (ii)  permutation scanning,  (iii)  topologically aware worms, and  (iv)  Internet scale hit-lists. The goal is very rapid infection--in particular, considerably faster than any possible human-mediated response.    A worm's scanner can obviously be made significantly faster than the ones seen today, by careful use of threading and an understanding of the protocols.  By having many requests outstanding, a worm should be capable of scanning targets at a rate proportional to its access bandwidth.  Since it only takes 40 bytes for a TCP SYN packet to determine if a service is accessible, and often only a few hundred bytes to attempt an exploit, the potential scans per second can easily exceed 100 for even poor Internet connections.  This increases   by allowing a worm to search for a greater number of targets in a given period of time.    Similarly, the more widespread the vulnerable software is, the faster a worm using that vulnerability can spread, because each random scan of the network is more likely to pick up a target, also increasing  .  We should therefore expect that worm authors will devote considerable scrutiny to highly homogeneous, highly deployed services, both for the faster spreading and for the greater number of machines that could be compromised in a single attack.         Hit-list Scanning      One of the biggest problems a worm faces in achieving a very rapid rate of infection is ""getting off the ground."" Although a worm spreads exponentially during the early stages of infection, the time needed to infect say the first 10,000 hosts dominates the infection time, as can be seen in Figure  3 .    There is a simple way for an active worm to overcome this obstacle, which we term  hit-list scanning .  Before the worm is released, the worm author collects a list of say 10,000 to 50,000 potentially vulnerable machines, ideally ones with good network connections. The worm, when released onto an initial machine on this hit-list, begins scanning down the list. When it infects a machine, it divides the hit-list in half, communicating half to the recipient worm, keeping the other half.    This quick division ensures that even if only 10-20% of the machines on the hit-list are actually vulnerable, an active worm will quickly go through the hit-list and establish itself on all vulnerable machines in only a few seconds.  Although the hit-list may start at 200 kilobytes, it quickly shrinks to nothing during the partitioning.  This provides a great benefit in constructing a fast worm by speeding the initial infection.    The hit-list needn't be perfect: a simple list of machines running a particular server type may suffice, although greater accuracy will improve the spread.  The hit-list itself can be generated using one or several of the following techniques, prepared well in advance, generally with little fear of detection.        Stealthy scans.   Portscans are so common and so widely ignored that even a fast scan of the entire Internet would be unlikely to attract law enforcement attention or more than mild comment in the incident response community.  However, for attackers wishing to be especially careful, a randomized stealthy scan taking several months would be very unlikely to attract much attention, as most intrusion detection systems are not currently capable of detecting such low-profile scans.  Some portion of the scan would be out of date by the time it was used, but much of it would not.       Distributed scanning.   An attacker could scan the Internet using a few dozen to a few thousand already-compromised ""zombies,"" similar to what DDOS attackers assemble in a fairly routine fashion.  Such distributed scanning has already been seen in the wild--Lawrence Berkeley National Laboratory received 10 during the past year.       DNS searches.   Assemble a list of domains (for example, by using widely available spam mail lists, or trolling the address registries). The DNS can then be searched for the IP addresses of mail-servers (via MX records) or Web servers (by looking for www.domain.com).       Spiders.  For Web server worms (like Code Red), use Web-crawling techniques similar to search engines in order to produce a list of most Internet-connected Web sites. This would be unlikely to attract serious attention.       Public surveys.  For many potential targets there may be surveys available listing them, such as the Netcraft survey [ Ne02 ].       Just listen.   Some applications, such as peer-to-peer networks, wind up advertising many of their servers.  Similarly, many previous worms effectively broadcast that the infected machine is vulnerable to further attack.  For example, because of its widespread scanning, during the Code Red I infection it was easy to pick up the addresses of upwards of 300,000 vulnerable IIS servers--because each one came knocking on everyone's door!    Indeed, some individuals produced active countermeasures to Code Red II by exploiting this observation, when combined with the backdoor which Code Red II installs [ DA01 ].  However, it is not a given that future worms will broadcast their presence, and we also note that worms could readily fix the very security holes they exploit (such as is often already observed for attackers performing break-ins manually), which undermines the superficially appealing countermeasure of using the worm's vector as a means by which to disable it.              Permutation Scanning       Another limitation to very fast infection is the general inefficiency of random scanning: many addresses are probed multiple times. Similarly there is no means for a randomly scanning worm to effectively determine when all vulnerable machines are infected.  Permutation scanning  solves these problems by assuming that a worm can detect that a particular target is already infected.    In a permutation scan, all worms share a common pseudo random permutation of the IP address space. Such a permutation can be efficiently generated using a 32-bit block cipher and a preselected key: simply encrypt an index to get the corresponding address in the permutation, and decrypt an address to get its index.    Any machines infected during the hit-list phase (or local subnet scanning) start scanning just after their point in the permutation, working their way through the permutation, looking for vulnerable machines. Whenever the worm sees an already infected machine, it chooses a new, random start point and proceeds from there. Worms infected by permutation scanning would start at a random point.    This has the effect of providing a self-coordinated, comprehensive scan while maintaining the benefits of random probing. Each worm looks like it is conducting a random scan, but it attempts to minimize duplication of effort.  Any time an instance of the worm,  , encounters an already-infected host, it knows that  , the original infector of the host, is already working along the current sequence in the permutation, and is further ahead.  Hence, there's no need for   to continue working on the current sequence in addition to  .    Self-coordination keeps the infection rate high and guarantees an eventual comprehensive scan.  Furthermore, it allows the worm to make a local decision that further scanning is of little benefit.  After any particular copy of the worm sees several infected machines without discovering new vulnerable targets, the worm assumes that effectively complete infection has occurred and stops the scanning process.    A timer could then induce the worms to wake up, change the permutation key to the next one in a prespecified sequence, and begin scanning through the new permutation, starting at its own index and halting when another instance is discovered.  This process insures that every address would be efficiently rescanned at regular intervals, detecting any machines which came onto the net or were reinstalled but not patched, greatly increasing a worm's staying power.  Otherwise, the worms are silent and difficult to detect, until they receive attack orders (see Section  6 ).    A further optimization is a  partitioned permutation scan . In this scheme, the worm has a range of the permutation that it is initially responsible for. When it infects another machine, it reduces its range in half, with the newly infected worm taking the other section. When the range gets below a certain level, it switches to simple permutation scanning and otherwise behaves like a permutation scan. This scheme offers a slight but noticeable increase in scanning efficiency, by dividing up the initial workload using an approximate divide-and-conquer technique.    Permutation scanning interacts particularly well with a worm which attacks multiple security holes: after deciding that the initial exploit is exhausted, the worm resets the permutation to its current address, changes the permutation key, and exploits the second security hole.  Thus, even relatively rare secondary holes can be efficiently and quickly scanned once the worm has established itself on the network.    It may seem that the permutation scanning algorithm is spoofable, but only to a very limited degree.  If an uninfected machine responds to the scan in the same way as a worm, by falsely claiming to be infected, it will temporarily protect those machines which exist later in the current permutation from being scanned by the worm.  However, since the permutation itself changes on every rescan, the set of machines protected is constantly changing.  The result is that unless a very large number of uninfected machines respond to probes like an actual worm, the protection is almost nonexistent.         Simulation of a Warhol Worm      A combination of hit-list and permutation scanning can create what we term a  Warhol worm , capable of attacking most vulnerable targets in well under an hour, possibly less than 15 minutes.  Hit-list scanning greatly improves the initial spread, while permutation scanning keeps the worm's infection rate high for much longer when compared with random scanning.                Figure 6:   The spread of a simulated worm capable of 10 scans/second in a population of 300,000 vulnerable machines and its comparison to the model developed in Section  2 .   The simulation and theoretical results overlap completely.       In order to evaluate the effects of hit-list and permutation scanning, we wrote a small, abstract simulator of a Warhol worm's spread.  The simulator assumes complete connectivity within a   entry address space 7  using a pseudo-random permutation to map addresses to a subset of vulnerable machines.  We used a 32-bit, 6-round variant of RC5 to generate all permutations and random numbers.    We can parameterize the simulation in terms of: the number of vulnerable machines in the address space; scans per second; the time to infect a machine; number infected during the hit-list phase; and the type of secondary scan (permutation, partitioned permutation, or random).  The simulator assumes multithreaded scanning.    To ensure that the simulator produces reasonable results, Figure  6  shows a comparison between the simulator's output and the model developed in Section  2 , for a worm capable of 10 scans/second in a population of 300,000 vulnerable machines.  The simulation results fit the model for   and  .  This represents a worm which is slightly faster (less than  ) than Code Red I.                Figure 7:   The spread of three simulated worms in a population of 300,000 vulnerable machines:  (i)  a Code Red-like worm capable of 10 scans/second,  (ii)  a faster scanning worm capable of 100 scans/second, and  (iii)  a Warhol worm, capable of 100 scans/second, using a 10,000 entry hit-list and permutation scanning which gives up when 2 infected machines are discovered without finding a new target.  All graphs stop at 99.99% infection of the simulated address space.       Figure  7  then shows how both faster scanning and the Warhol strategies affect the propagation time.  The faster scanning worm (capable of 100 scans/second) reduces the infection time down to under an hour, while the combination of hit-list scanning, permutation scanning, and fast scanning, further reduces infection time to roughly 15 minutes.                Figure 8:   A closeup of the behavior of the Warhol worm seen in Figure  7 .  The infection initially progresses rapidly--effectively all worms are actively scanning the net--but as infection rates near 100%, many worms have gone dormant, correctly concluding that there are few vulnerable machines remaining and should therefore cease scanning.       Figure  8  shows in more detail the behavior of the Warhol strategies.  It gets a huge boost from the hit-list during the first few seconds of propagation, quickly establishing itself on the network and then spreading exponentially.  As the infection exceeds the 50% point, some of the worms begin recognizing that saturation is occurring and stop scanning.  By the time the graph ends (at 99.99% of the simulated population), most of the worms have gone silent, leaving a few remaining worms to finish scanning the last of the address space.         Topological Scanning      An alternative to hit-list scanning is topologically aware scanning, which uses information contained on the victim machine in order to select new targets.  Email worms have used this tactic since their inception, as they harvest addresses from their victim in order to find new potential targets, as did the Morris worm (necessary because of the very sparse address space when it was released) [ Sp89 , ER89 ].    Many future active worms could easily apply these techniques during the initial spread, before switching to a permutation scan once the known neighbors are exhausted.  An active worm that attacked a flaw in a peer-to-peer application could easily get a list of peers from a victim and use those peers as the basis of its attack, which makes such applications highly attractive targets for worm authors.  Although we have yet to see such a worm in the wild, these applications must be scrutinized for security.  These applications are also vulnerable to contagion worms, as discussed in Section  5 .    Similarly, a worm attacking web servers could look for URLs on disk and use these URLs as seed targets as well as simply scanning for random targets.  Since these are known to be valid web servers, this would tend to greatly increase the initial spread by preferentially probing for likely targets.       Flash Worms       We further observe that there is a variant of the hit-list strategy that could plausibly result in most of the vulnerable servers on the Internet being infected in tens of seconds. We term this a  flash worm .    The nub of our observation is that an attacker could plausibly obtain a hit-list of most servers with the relevant service open to the Internet in advance of the release of the worm. 8    In addition to the methods already discussed for constructing a hit-list in Section  4.1 , a complete scan of the Internet through an OC-12 connection would complete quickly.  Given a rate of 750,000 TCP SYN packets per second (the OC-12 provides 622 Mbps, the TCP segment takes 40 bytes, and we allow for link-layer framing), and that the return traffic is smaller in volume than the outbound (it is comprised of either same-sized SYN ACKs or RSTs, smaller ICMPs, or, most often, no response at all), it would take roughly 2 hours to scan the entire address space.  Faster links could of course scan even faster.  Such a brute-force scan would be easily within the resources of a nation-state bent on cyberwarfare.    Given that an attacker has the determination and foresight to assemble a list of all or most Internet connected addresses with the relevant service(s) open, a worm can spread most efficiently by simply attacking addresses on that list. For example, there are about   million Web servers on the Internet (according to Netcraft [ Ne02 ]), so the size of that particular address list would be 48 MB, uncompressed. The initial copy of the worm can be programmed to divide the list into   blocks, and then to find and infect the first address in each block (or an especially chosen high-bandwidth address in that block), and then hand the child worm the list of addresses for that block. That copy of the worm can then re-iterate the process to infect everything in its block. A threaded worm could begin infecting hosts before it had received the full host list from its parent to work on, to maximize the parallelization process, and it could start work on looking for multiple children in parallel.    This design is somewhat fragile if an early copy of the worm is neutralized very quickly, or infects a site from which it cannot scan out.  To mitigate this, the worm copies could overlap in their scanning so that all addresses were scanned a small number of times, with every target address being scanned by different paths through the infection tree.  This has the additional side-effect of removing the need for further parent-to-child communication after initial infection occurs.    A related design would call for most of the address list to be located in pre-assigned chunks on one or a number of high-bandwidth servers that were well-known to the worm. Each copy of the worm would receive an assignment from its parent, and then fetch the address list from there. The server would only have to send out  portions  of the list, not the entire list; in principle, it should only have to transmit each address in the list once.  In addition, after the worm has propagated sufficiently that a large number of copies are attempting to fetch their (now quite small) lists, at that point the worm collective could switch to sending around the address list with each new infection, rather than having the infectees each contact the server.    This process will result in relatively little wasted effort. For example, if the worm had a list of Web servers, and a zero-day IIS vulnerability, about   of the list would be vulnerable. No server would be probed twice. If  , then the infection tree for the   million vulnerable servers would be just   layers deep.    The spread rate of such a worm would likely be constrained by one of two things. The worm itself is likely to be small (Code Red I was about 4 KB, and a highly malicious worm could easily be less than 100 KB, even allowing for a complex payload).  Thus, at the start, the address list is much larger than the worm itself, and the propagation of the worm could be limited by the time required to transmit the host list out of the initial infection site or servers where it was stored. Since all the children of the infection will have much smaller lists to transmit, these later lists are less likely to limit the worm spread (unless a first generation child has less than   of the initial copy's bandwidth available to it).  The exact time required to transmit the list will depend on the available bandwidth of the storage sites. As an example, however, we point out that a 48 MB address list could be pushed down an OC-12 link in less than a second. 9    Thus, starting the worm on a high-bandwidth link is desirable for the attacker, and bandwidth is probably a concern at the next layer or two.  Compression of the list could make the list delivery much faster.  Indeed, we took a sorted list of the 9 million server addresses discussed in Section  5  and found that  gzip  compression shrinks the list from 36 MB to 13 MB, and differencing the addresses prior to compression reduced it to 7.5 MB.    Another possible limitation is simply the latency required to infect each new layer in the tree. Given that probes can be issued in parallel, and substantially more threads can be spawned than   (the number of children), we do not have to add up the time required for a given copy to cycle through its list, but simply take the maximum infection latency. A single second is a reasonable latency, but with   and a large hit-list to transfer, it might take a little longer to get 10 copies of the worm through a given site's link. However, not much longer--if a 5 KB worm can get 50% utilization through a 256 Kbps DSL uplink, it can transmit ten copies of itself in three seconds. That leads to a sub-thirty-second limit on the total infection time, given an infection tree seven layers deep and a design where the new worm children go to a server for their addresses.  (An additional concern here is the possibility of elements of the worm interfering with one another, either directly, by inducing congestion, or indirectly, for example by overflowing ARP tables, as happened during the Code Red I outbreak [ SA01 ].  These possibilities are difficult to analyze.)    In conclusion, we argue that a compact worm that begins with a list including all likely vulnerable addresses, and that has initial knowledge of some vulnerable sites with high-bandwidth links, appears able to infect almost all vulnerable servers on the Internet in less than thirty seconds.         Stealth worms--contagion      The great speed with which the worms described in the previous sections can propagate presents a grave threat to the Internet's security, because there is so little time available to react to their onset.  Still, there might be a possibility of devising mechanisms that automatically detect the spread of such worms and shut them down in some fashion [ MSVS02 ].  Such mechanisms would likely be triggered by the singular communication patterns the worms evince--hosts generating much more diverse and rapid Internet traffic than they usually do.    We now turn to a different paradigm of worm propagation,  contagion , which, while likely spreading significantly slower than the rapidly-propagating worms, evinces almost  no  peculiar communication patterns.  As such these worms could prove much more difficult to detect and counter, allowing a patient attacker to slowly but surreptitiously compromise a vast number of systems.    The core idea of the contagion model can be expressed with the following example.  Suppose an attacker has attained a pair of exploits:  , which subverts a popular type of Web server; and  , which subverts a popular type of Web client (browser).  The attacker begins the worm on a convenient server or client (it doesn't matter which, and they could start with many, if available by some other means), and then they simply wait.  If the starting point is a server, then they wait for clients to visit (perhaps baiting them by putting up porn content and taking care that the large search engines index it).  As each client visits, the subverted server detects whether the client is vulnerable to  .  If so, the server infects it, sending along  both    and  .  As the client's user now surfs other sites, the infected client inspects whether the servers on those sites are vulnerable to  , and, if so, again infects them, sending along   and  .    In this fashion, the infection spreads from clients to servers and along to other clients, much as a contagious disease spreads based on the incidental traffic patterns of its hosts.    Clearly, with the contagion model there are no unusual communication patterns to observe, other than the larger volume of the connections due to the worm sending along a copy of itself as well as the normal contents of the connection--in the example, the URL request or the corresponding page contents.  Depending on the type of data being transferred, this addition might be essentially negligible (for example, for MP3s).  Thus, without an analyzer specific to the protocol(s) being exploited, and which knows how to detect abnormal requests and responses, the worm could spread very widely without detection (though perhaps other detection means such as Tripwire file integrity checkers [ Tw02 ] might discover it).    In addition to exploiting the natural communication patterns to spread the worm, these might also be used by the attacker to then control it and retrieve information from the infected hosts, providing that the endemic traffic patterns prove of sufficient frequency and volume for the attacker's purposes.  (Or, of course, the attacker might more directly command the infected hosts when the time is ripe, ""blowing their cover"" in the course of a rapid strike for which keeping the hosts hidden can now be sacrificed.)    As described above, one might find contagion worms a clear theoretical threat, but not necessarily such a grave threat in practice.  The example requires a pair of exploits, and will be limited by the size of the populations vulnerable to those attacks and the speed with which Web surfing would serve to interconnect the populations.  While some argue the Web exhibits the ""small world"" phenomenon [ Br+00 ], in which the distance between different Web items in the hypertext topology is quite low, this doesn't necessarily mean that the dynamic patterns by which users  visit  that content exhibit a similar degree of locality.    We now present a more compelling example of the latent threat posed by the contagion model, namely leveraging  peer-to-peer  (P2P) systems.  P2P systems generally entail a large set of computers  all running the same software .  Strictly speaking, the computers need only all run the same protocol, but in practice the number of independent implementations is quite limited, and it is plausible that generally a single implementation heavily dominates the population.    Each node in the P2P network is both a client and a server. 10 Accordingly, the problem of finding a pair of exploits to infect both client and server might likely be reduced to the problem of finding a  single  exploit, significantly less work for the attacker.  P2P systems have several other advantages that make them well suited to contagion worms:  (i)  they tend to interconnect with many different peers,  (ii)  they are often used to transfer large files,  (iii)  the protocols are generally not viewed as mainstream and hence receive less attention in terms of monitoring by intrusion detection systems and analysis of implementation vulnerabilities,  (iv)  the programs often execute on user's desktops rather than servers, and hence are more likely to have access to sensitive files such as passwords, credit card numbers, address books, and  (v)  the use of the P2P network often entails the transfer of ""grey"" content (e.g., pornography, pirated music and videos), arguably making the P2P users less inclined to draw attention to any unusual behavior of the system that they perceive.    The final, sobering quality of P2P networks for forming contagion worms is their  potentially immense size .  We obtained a trace of TCP port 1214 traffic recorded in November, 2001, at the border of a large university.  Port 1214 is used by the  KaZaA  [ Ka01 ] and  Morpheus  [ Mu01 ] P2P sharing systems (both 11 built on the FastTrack P2P framework [ Fa01 ]).  As of January, 2002, the  KaZaA  distributors claim that more than 30,000,000 copies have been downloaded [ Ka01 ].  Since our data does not allow us to readily distinguish between  KaZaA  and  Morpheus  traffic, for ease of exposition we will simply refer to all of the traffic as  KaZaA .    Our  KaZaA  trace consists of summaries of TCP connections recorded by a passive network monitor.  We have restricted the data to only those connections for which successful SYN and FIN handshakes were both seen (corresponding to connections reliably established and terminated, and eliminating unsuccessful connections such as those due to scanning).    The volume of  KaZaA  traffic at the university is immense: it comprises 5-10 million established connections per day.  What is particularly striking, however, is the diversity of the remote hosts with which hosts at the university participated in  KaZaA  connections. During the month of November,  9 million  distinct remote IP addresses engaged in successful  KaZaA  connections with university hosts. (There were 5,800 distinct university  KaZaA  hosts during this time.)    Distinct addresses do not directly equate to distinct computers.  A single address can represent multiple computers due to the use of NAT, DHCP, or modem dialups accessed by different users.  On the other hand, the same computer can also show up as different addresses due to these mechanisms.  Thus, we do not have a precise sense of the number of distinct computers involved in the November trace, but it appears reasonable to estimate it as around 9 million.     KaZaA  uses a variant of HTTP for framing its application protocol. Given HTTP's support for variable-sized headers, it would not be surprising to find that a buffer overflow exploit of  KaZaA  exists. Given such an exploit, it is apparent that if an attacker started out having infected all of the university's  KaZaA  hosts, then after a month they would have control of about 9 million hosts, assuming that the  KaZaA  clients are sufficiently homogeneous that a single exploit could infect them all. 12    How plausible is it that the attacker could begin with control over all of the university's  KaZaA  hosts?  Quite: while the goal of the contagion worm is to evade detection, the attacker can likely risk a more blatant attack on a single university.  If they can find a university lacking in diligent security monitoring (surely there must be a few of these!), they can then compromise a single host at the university, engage in ""noisy"" brute-force scanning of the internal hosts to find all of the  KaZaA  clients, and infect them.  They  then  switch into contagion spreading. 13    While the above argues that the attacker could gain the 9 million hosts within a month, the actual spread is likely  much  faster, because once a remote host is infected, it too contributes to spreading the contagion.  Not only does this accelerate the epidemic, but it also likely turns it into a pandemic, because the remote hosts can connect with other remote hosts that wouldn't happen to visit the university.  Furthermore, depending on the protocol, a single infected node could pretend to have information it doesn't have, in order to appear highly attractive and increase the number of connections received, although that would somewhat disrupt the normal patterns of communication.    We would like therefore to better understand the rate at which a  KaZaA   contagion worm could spread,  "
clueweb09-en0004-69-37387	                                                                                                      W32.Sober.AA@mm                 spreads in the wild  - May 01, 2007                                         Sober.AA  is                 a mass mailing worm uses e-mail addresses                 collected from the system to distribute infected                 mails. The worm uses its own SMTP engine to                 spread. |  More                 details                     W32.Stration@mm                 worm spreads in the wild  - October                 23, 2006                                         Stration aka Warezov  is                 a mass mailing worm, uses e-mail addresses                 collected from the infected system to distribute                 infected messages.  Stration worm arrives as an e-mail                 attachment. It has the ability to download new                 variants of malware from Internet . |  More                 details                   SRN                 Micro launches new version of Solo Antivirus 2007                  - October 3, 2006                                         SRN Micro, the growing                 antivirus software developing concern launched                 new improved version of Solo Antivirus 2007 -                 Version 5.0. The new version effectively fights                 against viruses and spyware. The new version                 comes with improved scan engine and online update                 facility. |  More                 details                     W32.Blackmal.E@mm                 worm spreads in the wild  - January                 17, 2006                                         W32.Blackmal.E@mm  aka                 VB.BI is a mass mailing worm, uses e-mail                 addresses collected from the infected system to                 distribute infected messages. It attempts spread                 through network shares. |  More                 details                     Zotob                 worm spreads in the wild  - August                 14, 2005                                         Zotob is a network Worm,                 exploits LSASS and Microsoft Windows Plug and                 Play Service (PNP) vulnerabilities present in                 Windows as explained by Microsoft Security                 Bulletin MS04-011 and MS05-039.  |  More                 details                     Reatle                 worm spreads in the wild  - July 15,                 2005                                         Reatle is a mass mailing                 and network Worm, spreads using e-mail                 attachments and exploits a remote code execution                 vulnerability LSASS explained by Microsoft                 Security Bulletin MS04-011.  |  More                 details                     Mytob                 worm variants spreads in the wild  -                 April 5, 2005                                         Mytob  is                 a mass mailing worm, uses e-mail addresses                 collected from the infected system to distribute                 infected messages. It also spreads using the DCOM                 RPC vulnerability and the Microsoft Windows Local                 Security Authority Service Remote Buffer Overflow                 vulnerability .                  |  More                 details                     W32.Beagle.AZ@mm                 spreads in the wild  - Jan. 26, 2005                                         Beagle.AZ  is                 a mass mailing worm, uses e-mail addresses                 collected from the infected system to distribute                 infected messages.  Beagle worm arrives as an e-mail                 attachment. |  More                 details                     W32.Sober.I@mm                 spreads in the wild  - Nov. 19, 2004                                         Sober.I  is                 a mass mailing worm uses e-mail addresses                 collected from the system to distribute infected                 mails. The worm uses its own SMTP engine to                 spread. The worm is written in visual basic and                 compressed with UPX. |  More                 details                     W32.Beagle.AV@mm                 spreads in the wild  - Oct. 29, 2004                                         Beagle.AV  is                 a mass mailing worm, uses e-mail addresses                 collected from the infected system to distribute                 infected messages.  Beagle worm arrives as an e-mail                 attachment.     Bagle.AV searches C to Z                 drives and copies itself to folders containing                 the string ""share"" or                 ""sharing"".   |  More                 details                     W32.Sasser.Worm                 spreads in the wild  - Apr. 30, 2004                                         Sasser is a network                 Worm,  exploits a remote code execution                 vulnerability LSASS to infect target systems.  It                 scans for IP addresses and infects unpatched                 systems. This worm targets Windows 2000, and                 Windows XP systems. Solo Antivirus can detect and                 remove Sasser worm and its variants safely.   |  More                 details                     W32.Netsky.P@mm                 spreads in the wild  - Mar. 22 2004                                        Netsky.P  is                 a modified variant of Netsky.C worm. This mass                 mailing worm spreads using  e-mail addresses                 collected from MSG, OFT, SHT, DBX, TBB, ADB, DOC,                 WAB, ASP, UIN, RTF, VBS, HTML, HTM, PL, PHP, TXT,                 SHTM, DHTM, CGI and EML files to distribute                 infected messages.  Netsky.P worm arrives as an e-mail                 attachment.  The infected attachment name,                 message body and subject is randomly chosen by                 the worm.  |  More                 details                     W32.Netsky.D@mm                 spreads in the wild  - Mar. 01, 2004                                        Netsky.D  is                 a modified variant of Netsky.C worm. This mass                 mailing worm spreads using  e-mail addresses                 collected from MSG, OFT, SHT, DBX, TBB, ADB, DOC,                 WAB, ASP, UIN, RTF, VBS, HTML, HTM, PL, PHP, TXT,                 SHTM, DHTM, CGI and EML files to distribute                 infected messages.  Netsky.D worm arrives as an e-mail                 attachment.  The infected attachment name,                 message body and subject is randomly chosen by                 the worm.  |  More                 details                     W32.Netsky.B@mm                 spreads in the wild  - Feb. 18, 2004                                         Netsky.B  is                 a modified variant of Netsky.A worm. This mass                 mailing worm spreads using  e-mail addresses                 collected from MSG, OFT, SHT, DBX, TBB, ADB, DOC,                 WAB, ASP, UIN, RTF, VBS, HTML, HTM, PL, PHP, TXT                 and EML files to distribute infected messages.  Netsky.b worm arrives as                 an e-mail attachment.  The infected attachment                 name, message body and subject is randomly chosen                 by the worm.  |  More                 details                     W32.Mydoom@mm                 spreads in the wild  - Jan. 26, 2004                                         Novarg aka Mydoom   is                 a mass mailing worm, uses  e-mail addresses                 collected from .wab, .adb, .tbb, .dbx, .asp,                 .php, .sht, .htm, .txt files to distribute                 infected messages.  Novarg worm arrives as an e-mail                 attachment.  The infected attachment name,                 subject and message body is randomly chosen by                 the worm.  The worm also spreads using                 KaZaA P2P network. |  More                 details                     W32.Mimail.J@mm                 spreads in the wild  - Nov. 17, 2003                                         Mimail.J                 is a modified variant of Mimail.I worm. It                 attempts to steal credit card and personal                 information from the infected user. Mimail.J worm                 arrives as an e-mail attachment. It collects                 e-mail addresses stored in the local hard disk to                 distribute infected messages.|  More                 details                   W32.Mimail.C@mm                 spreads in the wild  - Oct. 31, 2003                                          Mimail.C  is                 a modified variant of  Mimail                  worm. It collects e-mail addresses stored in the                 local hard disk to distribute infected messages.  Mimail.C worm arrives as                 an e-mail attachment. The infected attachment                 name will be "" photos.zip "". |  More                 details                   W32.Swen.A@mm                 spreads in the wild  - Sept. 18, 2003                                         Swen aka                 Gibe.F is an Internet worm, spreads using  e-mail, KaZaA, IRC and                 network shares. Swen worm sends fakes email as it                 is an  update coming from Microsoft.  It                 is very similar to Gibe Worm and uses its own                 SMTP engine to send infected mails. |  More                 details                   W32.Sobig.F@mm                 spreads in the wild  - Aug. 19, 2003                                         Sobig.F worm uses  e-mail                 addresses collected from DBX, HTML, DBX, EML,                 HML, TXT and WAB files to send infected messages.                 It is very similar to  Sobig.B                  Worm. Sobig.F infects Windows 95, 98, ME, 2000,                 NT, XP systems. It also copies to shared network                 drives. Sobig.F worm will not spread after                 10th September, 2003 |  More                 details                   W32.Blaster.Worm                 spreads in the wild  - Aug. 11, 2003                                         Blaster worm exploits a                 vulnerability DCOM RPC [ Buffer Overrun In RPC                 Interface ] to infect target systems.  The                 worm randomly scans for IP addresses and infects                 the vulnerable systems. This worm targets Windows                 NT, 2000, XP, and Windows Server 2003 systems   |  More                 details                   W32.Sobig.E@mm                 spreads in the wild  - Jun. 25, 2003                                         Sobig.E worm uses  e-mail                 addresses collected from DBX, HTML, DBX, EML,                 HML, TXT and WAB files to send infected messages.                 It is very similar to  Sobig.B                  Worm. Sobig.E infects Windows 95, 98, ME, 2000,                 NT, XP systems. It also copies to shared network                 drives. Sobig.E worm will not spread after                 July 13th 2003. |  More                 details                   W32.Bugbear.B@mm                 spreads in the wild  - Jun. 04, 2003                                         BugBear.b is a new                 variant of  Bugbear  worm, uses  e-mail                 addresses stored in Windows address book  and network shares to                 spread.  It                 collects addresses from  .dbx, .mbx, .eml, and .ocs files   to                 distribute infected messages. The worm randomly                 chooses the message body and subject. This                 variant infects local files in the hard                 disk.  |  More                 details                   W32.Fizzer.A@mm                 spreads in the wild  - May. 09, 2003                                         Fizzer is a mass mailing                 worm spreads through  e-mail,                 Kazza P2P and IRC. It also copies to shared                 network drives and drops backdoor programs in the                 infected system. Fizzer uses e-mail addresses                 collected from Windows address book and Microsoft                 Outlook to send infected mails.  |  More                 details                   W32.LoveGate.F@mm                 spreads in the wild  - Mar. 24, 2003                                         Lovegate.F is a modified                 variant of  Lovegate.C                 worm ,                 uses  e-mail                 addresses collected from *.ht* files to send                 infected messages. It also copies to shared                 network drives and drops backdoor programs in the                 system.  |  More                 details                   W32.Lirva.A@mm                 worm spreads rapidly  - Jan. 8, 2003                                         Lirva is a mass mailing                 Internet worm, spreads through e-mail, ICQ, IRC,                 KaZaA and open network shares.  The                 message body and subject is randomly chosen from                 the worm body. It collects e-mail addresses from                 DBX, MBX, WAB, HTML, EML, HTM, TBB, SHTML, NCH                 and IDX files to send infected messages.  |  More                 details                   Bugbear                 worm spreads in the wild  - Sept. 30,                 2002                                         BugBear is an Internet                 worm, uses  e-mail                 addresses stored in Windows Address book  and network shares.                  It also collects addresses from  .dbx, .mbx, .eml, and                 .ocs files   to                 distribute infected messages. The worm randomly                 chooses the message body and subject. |  More                 details                   Yaha.E                 Worm reported in the wild  - July 17,                 2002                                         Yaha.E  is                 a mass mailing worm uses e-mail addresses stored                 in Windows Address book and also collects                 addresses from .ht* files to distribute infected                 messages. It also spreads through MSN messenger                 list, ICQ list and Yahoo pager list. |  More                 details                   Klez.H                 Worm heavily reported in the wild  -                 Apr 18, 2002                                         Klez.H                 is modified variant of original Klez worm. Klez.H                 variant rapidly spreads in the wild.  It arrives as an e-mail                 attachment and the attachments are embedded                 within the e-mail and it won't visible to the                 user .|  More                 details                     Gibe Worm                 spreads in the wild  - Jan 13, 2002                                         Gibe is                 an Internet worm  uses Microsoft Outlook and its own                 SMTP engine to spread. The worm is 122880 bytes                 long and the e-mail attachment name will be  "" Q216309.exe "".  Gibe worm sends fakes                 email as it is an  update coming from                 Microsoft. |  More                 details                     Klez.E Worm                 reported in the wild  - Oct 27, 2001                                         Klez.E                 is modified variant of original Klez worm. Klez.E                 variant rapidly spreads in the wild.  I-worm/Klez.E arrives as                 an e-mail attachment. The attachments are                 embedded within the e-mail and it won't visible                 to the user .|  More                 details                     APost Worm                 reported in the wild  - Oct 22, 2001                                         APost is                 an Internet worm  uses Microsoft Outlook to spread.                 The worm is  24,576  bytes long and written in Visual                 Basic 6.0. It needs ""MSVBVM60.dll"" to                 spread otherwise it will show dll missing error.                 The attachment name will be                 ""Readme.exe"". It is also known as                 I-Worm.Readme, WORM_APOST.  |  More                 details                     Nimda Worm                 spreads in the wild  - Sep 21, 2001                                         Nimda                 is a mass mailing worm uses different techniques                 to spread. It will infect network shares, local                 PE files and  already                 vulnerable Microsoft IIS web servers. Because of                 the IIS server infection it generates heavy                 network traffic. Nimda also uses  CodeRed  dropped trojan to find                 the target server. |  More                 details                     CodeRed Worm                 strikes unprotected IIS servers  -                 Jul 20, 2001                                         CodeRed worm spreads                 using .ida buffer overflow attack vulnerability                 in IIS Web servers. The worm will attack                 unprotected IIS servers. Web administrators are                 requested to install the security patch provided                 by Microsoft.  |  More                 details                     I-Worm/SirCam                 - New deadly worm spreading  - Jul                 19, 2001                                         SirCam                 is a mass mailing worm spread using e-mail                 addresses stored in Windows Address book and also                 collects addresses from temporary Internet                 folder. It will e-mail the infected files using                 its own SMTP engine. SirCam is also network aware                 worm. It searches for network shares and infects                 them too.  |  More                 details                     VBS/HomePage -                 A new worm spreads rapidly  - May 08,                 2001                                         VBS/HomePage aka                 VBS/VBSWG.X is a encrypted VB script worm uses                 Microsoft outlook to spread. The email message                 subject will be  ""   Homepage  ""  and the attachment will be  ""homepage.HTML.vbs""                  and the message body will be  "" Hi!                   You've got to see this page! It's really cool                 ;O)"" .  |  More                 details                     I-Worm/BadTrans                 reported in the wild  - April 11,                 2001                                         BadTrans                 is an encrypted worm spreads via MAPI function of                 Microsoft Outlook and it also drops                 Trojan.PSW.Hooker.b in the victims PC. The virus                 author can steal username and password details                 using the password stealer.  |  More                 details                     Win32/Magistr                 - A high risk worm spreading  - Mar                 04, 2001                                         Win32/Magistr                 is a complex polymorphic worm spreads via email                 and it contains virus components to infect PE                 files  [*.EXE,                 *.SCR]  in Windows                 environment. It infects local machine and PCs                 connected to the local network (LAN). It is                 discovered in March 2001 and frequently reported                 in the wild.  |  More                 details                     Win32/Kriz to                 strike again on Christmas day  - Dec                 20, 2000                                         Win32/Kriz is a PE file                 virus infects EXE files under Win9x and WinNT 4.0                 platforms. This virus will wake up or get                 activated on 25th of December [Christmas day] and                 it will damage the motherboard and the hard disk.                 The damage caused could be extreme and expensive.  |  More                 details                     Hybris aka                 Hahaha Worm Spreading Rapidly  - Nov                 14, 2001                   Hybris is a                 complex deadly worm, it will update the plugins                 from the virus author's site or through a virus                 conference news group alt.comp.virus. The worm                 uses  Win95/Babylonia                 virus  technique                 to download plugins, but it uses strong                 encryption on plugins using RSA 128 bit keys. The                 worm patches WSOCK32.DLL to email automatically.  |  More                 details                   I-Worm/Prolin                 reported in the wild  - Dec 4, 2000                                         Proilin                 is an Internet worm,  uses Microsoft Outlook to email                 itself.The worm is  Prolin  36,834 bytes long and                 written in Visual Basic version 6. It needs                 ""MSVBVM60.dll"" to spread otherwise it                 show DLL missing error. The e-mail attachment                 name will be will ""Creative.exe"".  |  More                 details                   I-Worm/MTX                 - A virus carrier spreads via e-mail                  - Sep 26, 2000                                         MTX                 is a complex encrypted worm spreads via email and                 carries a virus to infect local machine files. It                 is discovered one month back and frequently                 reported in the wild.  When executed,  the worm                 patches WSOCK32.DLL to email automatically.   The virus                 component uses  EPO ( Entry Point                 Obscuring )  technology   to                 infect files. |  More details                   Are                 you forced to wish ""SHANKAR'S"" birthday                  - Jul 23, 2000                                         W97M/Marker-O is a                 modified variant of W97M/Marker virus. It is a                 Polymorphic Word macro virus. While opening the                 document, If checks for system date. If the month                 is 7 and day is greater than or equal to 23 it                 will display the message  ""Did You                 Wish Shankar on his Birthday ?"".  It                 will alow the user to proceed.   |  More                 details                   VBS/Stages                 worm downs many e-mail servers  - Jun                 21, 2000                                         VBS/Stages is a multi                 application Windows worm uses Microsoft outlook,                 mIRC, Pirch and mapped drives to spread. Because                 of the mass mailing routine it downs many e-mail                 servers. The attachment name will be "" LIFE_STAGES.TXT.SHS""                  and size will be 39,936 bytes .  |  More                 details                   Win32/FunLove                 virus Detected  - November 16, 1999                                         This                 virus is a Win32 PE file virus infects EXE, SCR,                 OCX files under Win9x and WinNT 4.0 platforms.  The infected files will                 increase by 4099 bytes. What is notable about                 this virus is that it uses a new strategy to                 attack the Windows NT file security system and it                 runs as a service on Windows NT systems.  |  More                 details                   Dangerous                 E-mail worm Explorezip  - June 22,                 1999                                         ExploreZip                 is an e-mail worm, it uses standard e-mail                 software such as Outlook, Outlook Express and                 Exchange to spread. It infects Windows 95/98/NT                 systems and damages the data. It searches for the                 files with extensions doc, xls, ppt, h, asm, c,                 cpp in the local hard drives and mapped drives                 and reduces the file size to zero byte. It will                 infect other networked computers too. |  More                 details                   CIH                 - The first virus attacks BIOS chips                  - August 14, 1998                                         A more dangerous and                 deadly virus called ""CIH"" has spread                 rapidly and remains dormant in many computers.                 This virus will wake up or get activated on 26th                 of April and it will damage the motherboard and                 the hard disk. The damage caused could be extreme                 and expensive. |  More details                                                                                                                                             "
clueweb09-enwp02-16-00348	"                     Computer worm          From Wikipedia, the free encyclopedia        (Redirected from  Worm (computing) )            Jump to:  navigation ,  search          A  computer worm  is a self-replicating  computer program . It uses a network to send copies of itself to other nodes (computers on the network) and it may do so without any user intervention. Unlike a  virus , it does not need to attach itself to an existing program. Worms almost always cause at least some harm to the network, if only by consuming  bandwidth , whereas viruses almost always corrupt or modify files on a targeted computer.           Contents       1   Payloads   2   Worms with good intent   3   Protecting against dangerous computer worms   4   Mitigation techniques   5   See also   6   References   7   External links               [ edit ]   Payloads   Many worms that have been created are only designed to spread, and don't attempt to alter the systems they pass through. However, as the  Morris worm  and  Mydoom  showed, the network traffic and other unintended effects can often cause major disruption. A "" payload "" is code designed to do more than spread the worm - it might delete files on a host system (e.g., the  ExploreZip  worm), encrypt files in a  cryptoviral extortion  attack, or send documents via  e-mail . A very common payload for worms is to install a  backdoor  in the infected computer to allow the creation of a "" zombie "" under control of the worm author -  Sobig  and  Mydoom  are examples which created zombies. Networks of such machines are often referred to as  botnets  and are very commonly used by  spam  senders for sending junk email or to cloak their website's address. [ 1 ]  Spammers are therefore thought to be a source of funding for the creation of such worms, [ 2 ] [ 3 ]  and worm writers have been caught selling lists of  IP addresses  of infected machines. [ 4 ]  Others try to blackmail companies with threatened  DoS  attacks. [ 5 ]   Backdoors can be exploited by other malware, including worms. Examples include  Doomjuice , which spreads better using the backdoor opened by  Mydoom , and at least one instance of malware taking advantage of the  rootkit  and backdoor installed by the  Sony/BMG   DRM  software utilized by millions of music CDs prior to late 2005.     [ edit ]   Worms with good intent   Beginning with the very first research into worms at  Xerox PARC  there have been attempts to create useful worms. The  Nachi  family of worms, for example, tried to download and install patches from Microsoft's website to fix vulnerabilities in the host system  by exploiting those  same  vulnerabilities. In practice, although this may have made these systems more secure, it generated considerable network traffic, rebooted the machine in the course of patching it, and did its work without the consent of the computer's owner or user.   Other worms, such as  XSS worms  have been written for research to determine the factors of how worms spread, such as social activity and change in user behavior.   Still, more worms do very little, or are  pranks , such as one that sends the popular  image macro of an owl  with the phrase "" O RLY? "" to a print queue in the infected computer.   Most security experts regard all worms as  malware , whatever their payload or their writers' intentions.     [ edit ]   Protecting against dangerous computer worms   Worms spread by exploiting vulnerabilities in operating systems. All vendors supply regular security updates [ 6 ]  (see "" Patch Tuesday ""), and if these are installed to a machine then the majority of worms are unable to spread to it. If a vendor acknowledges a vulnerability, but has yet to release a security update to patch it, a  zero day  exploit is possible. However, these are relatively rare.   Users need to be wary of opening unexpected email [ 7 ] , and should not run attached files or programs, or visit web sites that are linked to such emails. However, as with the  ILOVEYOU  worm, and with the increased growth and efficiency of  phishing  attacks, it remains possible to trick the end-user into running a malicious code.   Anti-virus  and  anti-spyware  software are helpful, but must be kept up-to-date with new pattern files at least every few days. The use of a  firewall  is also recommended.   In the April-June, 2008, issue of IEEE Transactions on Dependable and Secure Computing, computer scientists describe a potential new way to combat internet worms. The researchers discovered how to contain the kind of worm that scans the Internet randomly, looking for vulnerable hosts to infect. They found that the key is for software to monitor the number of scans that machines on a network sends out. When a machine starts sending out too many scans, it is a sign that it has been infected, allowing administrators to take it off line and check it for viruses. [ 8 ] [ 9 ]     [ edit ]   Mitigation techniques     TCP Wrapper / libwrap  enabled network service  daemons   ACLs  in  routers  and  switches   Packet-filters   Nullrouting       [ edit ]   See also     Timeline of notable computer viruses and worms   Computer virus   Trojan horse (computing)   Spam   Computer surveillance   XSS Worm       [ edit ]   References       ^   The Seattle Times: Business & Technology: E-mail viruses blamed as spam rises sharply   ^   Cloaking Device Made for Spammers   ^   http://www.channelnewsasia.com/stories/afp_world/view/68810/1/.html   ^   heise online - Uncovered: Trojans as Spam Robots   ^   BBC NEWS | Technology | Hacker threats to bookies probed   ^   USN list | Ubuntu   ^   Information on the Nimda Worm   ^   http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?isnumber=4509574&arnumber=4358715&count=10&index=3  Sellke, SH. Shroff, NB. Bagchi, S (2008). Modeling and Automated Containment of Worms. IEEE Transactions on Dependable and Secure Computing. 5(2), 71-86   ^   Newswise: A New Way to Protect Computer Networks from Internet Worms  Retrieved on June 5, 2008.         [ edit ]   External links     The Wildlist  - List of viruses and worms 'in the wild' (i.e. regularly encountered by anti-virus companies)   Jose Nazario discusses worms  - Worms overview by a famous security researcher.   Computer worm suspect in court   Vernalex.com's Malware Removal Guide  - Guide for understanding, removing and preventing worm infections   John Shoch, Jon Hupp ""The ""Worm"" Programs - Early Experience with a Distributed Computation""   RFC 1135  The  Helminthiasis  of the Internet   Surfing Safe  - A site providing tips/advice on preventing and removing viruses.   Computer Worms Information   The Case for Using Layered Defenses to Stop Worms                   v      d      e     Botnets             Main articles     Botnet     Computer worm     Malware     Malbot     Operation: Bot Roast               Notable botnets     Storm botnet     Kraken botnet     Srizbi botnet       Mega-D botnet     Conficker                         Retrieved from "" http://en.wikipedia.org/wiki/Computer_worm ""      Categories :  Computer worms  |  Malware  |  WikiProject Computer Security articles                                   Views                   Article        Discussion        Edit this page        History                   Personal tools                Log in / create account                                 Navigation                Main page       Contents       Featured content       Current events       Random article                    Search                                                Interaction                About Wikipedia       Community portal       Recent changes       Contact Wikipedia       Donate to Wikipedia       Help                    Toolbox                What links here       Related changes   Upload file   Special pages       Printable version      Permanent link Cite this page                   Languages                       Bn-lm-g       Bosanski              Catal       esky       Deutsch       Espaol       Euskara              Franais              Hrvatski       Bahasa Indonesia       Italiano              Magyar       Bahasa Melayu       Nederlands              Norsk (bokml)       Polski       Portugus              Slovenina        / Srpski       Suomi       Svenska              Ting Vit                                                                         This page was last modified on 5 February 2009, at 19:10.        All text is available under the terms of the  GNU Free Documentation License . (See  Copyrights  for details.)   Wikipedia® is a registered trademark of the  Wikimedia Foundation, Inc. , a U.S. registered  501(c)(3)   tax-deductible   nonprofit   charity .        Privacy policy        About Wikipedia        Disclaimers                      "
clueweb09-enwp00-76-04559	"                     Computer worm          From Wikipedia, the free encyclopedia        (Redirected from  E-mail worm )            Jump to:  navigation ,  search          A  computer worm  is a self-replicating  computer program . It uses a network to send copies of itself to other nodes (computers on the network) and it may do so without any user intervention. Unlike a  virus , it does not need to attach itself to an existing program. Worms almost always cause at least some harm to the network, if only by consuming  bandwidth , whereas viruses almost always corrupt or modify files on a targeted computer.           Contents       1   Payloads   2   Worms with good intent   3   Protecting against dangerous computer worms   4   Mitigation techniques   5   See also   6   References   7   External links               [ edit ]   Payloads   Many worms that have been created are only designed to spread, and don't attempt to alter the systems they pass through. However, as the  Morris worm  and  Mydoom  showed, the network traffic and other unintended effects can often cause major disruption. A "" payload "" is code designed to do more than spread the worm - it might delete files on a host system (e.g., the  ExploreZip  worm), encrypt files in a  cryptoviral extortion  attack, or send documents via  e-mail . A very common payload for worms is to install a  backdoor  in the infected computer to allow the creation of a "" zombie "" under control of the worm author -  Sobig  and  Mydoom  are examples which created zombies. Networks of such machines are often referred to as  botnets  and are very commonly used by  spam  senders for sending junk email or to cloak their website's address. [ 1 ]  Spammers are therefore thought to be a source of funding for the creation of such worms, [ 2 ] [ 3 ]  and worm writers have been caught selling lists of  IP addresses  of infected machines. [ 4 ]  Others try to blackmail companies with threatened  DoS  attacks. [ 5 ]   Backdoors can be exploited by other malware, including worms. Examples include  Doomjuice , which spreads better using the backdoor opened by  Mydoom , and at least one instance of malware taking advantage of the  rootkit  and backdoor installed by the  Sony/BMG   DRM  software utilized by millions of music CDs prior to late 2005.     [ edit ]   Worms with good intent   Beginning with the very first research into worms at  Xerox PARC  there have been attempts to create useful worms. The  Nachi  family of worms, for example, tried to download and install patches from Microsoft's website to fix vulnerabilities in the host system  by exploiting those  same  vulnerabilities. In practice, although this may have made these systems more secure, it generated considerable network traffic, rebooted the machine in the course of patching it, and did its work without the consent of the computer's owner or user.   Other worms, such as  XSS worms  have been written for research to determine the factors of how worms spread, such as social activity and change in user behavior.   Still, more worms do very little, or are  pranks , such as one that sends the popular  image macro of an owl  with the phrase "" O RLY? "" to a print queue in the infected computer.   Most security experts regard all worms as  malware , whatever their payload or their writers' intentions.     [ edit ]   Protecting against dangerous computer worms   Worms spread by exploiting vulnerabilities in operating systems. All vendors supply regular security updates [ 6 ]  (see "" Patch Tuesday ""), and if these are installed to a machine then the majority of worms are unable to spread to it. If a vendor acknowledges a vulnerability, but has yet to release a security update to patch it, a  zero day  exploit is possible. However, these are relatively rare.   Users need to be wary of opening unexpected email [ 7 ] , and should not run attached files or programs, or visit web sites that are linked to such emails. However, as with the  ILOVEYOU  worm, and with the increased growth and efficiency of  phishing  attacks, it remains possible to trick the end-user into running a malicious code.   Anti-virus  and  anti-spyware  software are helpful, but must be kept up-to-date with new pattern files at least every few days. The use of a  firewall  is also recommended.   In the April-June, 2008, issue of IEEE Transactions on Dependable and Secure Computing, computer scientists describe a potential new way to combat internet worms. The researchers discovered how to contain the kind of worm that scans the Internet randomly, looking for vulnerable hosts to infect. They found that the key is for software to monitor the number of scans that machines on a network sends out. When a machine starts sending out too many scans, it is a sign that it has been infected, allowing administrators to take it off line and check it for viruses. [ 8 ] [ 9 ]     [ edit ]   Mitigation techniques     TCP Wrapper / libwrap  enabled network service  daemons   ACLs  in  routers  and  switches   Packet-filters   Nullrouting       [ edit ]   See also     Timeline of notable computer viruses and worms   Computer virus   Trojan horse (computing)   Spam   Computer surveillance   XSS Worm       [ edit ]   References       ^   The Seattle Times: Business & Technology: E-mail viruses blamed as spam rises sharply   ^   Cloaking Device Made for Spammers   ^   http://www.channelnewsasia.com/stories/afp_world/view/68810/1/.html   ^   heise online - Uncovered: Trojans as Spam Robots   ^   BBC NEWS | Technology | Hacker threats to bookies probed   ^   USN list | Ubuntu   ^   Information on the Nimda Worm   ^   http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?isnumber=4509574&arnumber=4358715&count=10&index=3  Sellke, SH. Shroff, NB. Bagchi, S (2008). Modeling and Automated Containment of Worms. IEEE Transactions on Dependable and Secure Computing. 5(2), 71-86   ^   Newswise: A New Way to Protect Computer Networks from Internet Worms  Retrieved on June 5, 2008.         [ edit ]   External links     The Wildlist  - List of viruses and worms 'in the wild' (i.e. regularly encountered by anti-virus companies)   Jose Nazario discusses worms  - Worms overview by a famous security researcher.   Computer worm suspect in court   Vernalex.com's Malware Removal Guide  - Guide for understanding, removing and preventing worm infections   John Shoch, Jon Hupp ""The ""Worm"" Programs - Early Experience with a Distributed Computation""   RFC 1135  The  Helminthiasis  of the Internet   Surfing Safe  - A site providing tips/advice on preventing and removing viruses.   Computer Worms Information   The Case for Using Layered Defenses to Stop Worms                   v      d      e     Botnets             Main articles     Botnet     Computer worm     Malware     Malbot     Operation: Bot Roast               Notable botnets     Storm botnet     Kraken botnet     Srizbi botnet       Mega-D botnet     Conficker                         Retrieved from "" http://en.wikipedia.org/wiki/Computer_worm ""      Categories :  Computer worms  |  Malware  |  WikiProject Computer Security articles                                   Views                   Article        Discussion        Edit this page        History                   Personal tools                Log in / create account                                 Navigation                Main page       Contents       Featured content       Current events       Random article                    Search                                                Interaction                About Wikipedia       Community portal       Recent changes       Contact Wikipedia       Donate to Wikipedia       Help                    Toolbox                What links here       Related changes   Upload file   Special pages       Printable version      Permanent link Cite this page                   Languages                       Bn-lm-g       Bosanski              Catal       esky       Deutsch       Espaol       Euskara              Franais              Hrvatski       Bahasa Indonesia       Italiano              Magyar       Bahasa Melayu       Nederlands              Norsk (bokml)       Polski       Portugus              Slovenina        / Srpski       Suomi       Svenska              Ting Vit                                                                         This page was last modified on 5 February 2009, at 19:10.        All text is available under the terms of the  GNU Free Documentation License . (See  Copyrights  for details.)   Wikipedia® is a registered trademark of the  Wikimedia Foundation, Inc. , a U.S. registered  501(c)(3)   tax-deductible   nonprofit   charity .        Privacy policy        About Wikipedia        Disclaimers                      "
clueweb09-enwp00-17-19191	"                     Anti-worm          From Wikipedia, the free encyclopedia                 Jump to:  navigation ,  search          Anti-worm  has multiple meanings within the field of  computer security . It can be a piece of  software  designed to protect against  computer worms , combining the features of  anti-virus software  and a  personal firewall . It can also mean a worm designed to do something that its author feels is helpful.           Contents       1   Concept   2   Criticism   3   Example   4   Notes               [ edit ]   Concept   The concept of ""anti-worms"" is a proactive method of dealing with virus and computer worm outbreaks. Just like malicious computer worms, anti-worms reach computers by scanning IP ranges and placing a copy of themselves on vulnerable hosts. The anti-worm then patches the computer's vulnerability and uses the affected computer to find other vulnerable hosts. Anti-worms have the ability to spread just as fast as regular computer worms, utilizing the same ""scan, infect, repeat"" model that malicious computer worms use.     [ edit ]   Criticism   Many  computer security  experts have denounced the so-called ""anti-worm"". Their position is that no code should be run on a system without the system owner's consent. Worm code, even if its author has good intentions, can wreak havoc on a network. It can overflow the traffic capacity of the network. Its author does not know the exact configuration of the system on which the code is running, and it could render that system useless for its intended purpose.   It is important to note that most jurisdictions which have computer crime laws covering worms do not distinguish ""worms"" from ""anti-worms,"" thus making the author(s) of such code liable to prosecution.     [ edit ]   Example   The Santy worm was released shortly before Christmas 2004 and spread quickly, using  Google  to search for vulnerable versions of  phpBB . The worm exploited a  bug  in the phpBB software to infect the host, defacing the website and deleting all of the messages stored on the forums. The worm was poised to spread to hundreds of thousands of other websites running the phpBB forum. Approximately 10 days after the worm's launch, someone released another worm to combat the Santy worm and patch the vulnerable phpBB forum. The anti-Santy worm spread quickly affecting thousands of servers running the phpBB.   However, the anti-santy worm caused problems of its own. Many site administrators reported that the anti-worm crashed their systems by flooding them with requests, resulting in a  denial-of-service attack . Others reported that the patch did not work.   Whether or not the anti-worm had a significant positive impact on the spread Santy worm is unknown. Within several hours of Santy's release, Google blocked the search string the worm was using to find vulnerable hosts. Thus, the worm could not find new hosts to infect. There is no way to determine if Google's actions or the anti-Santy worm did more to protect hosts.   Anti-worms have also been used to combat the effects of the  Code Red  worm. [ 1 ]     [ edit ]   Notes       ^   'Anti-worms' fight off Code Red threat               Retrieved from "" http://en.wikipedia.org/wiki/Anti-worm ""      Categories :  Computer network security  |  Computer worms                                   Views                   Article        Discussion        Edit this page        History                   Personal tools                Log in / create account                                 Navigation                Main page       Contents       Featured content       Current events       Random article                    Search                                                Interaction                About Wikipedia       Community portal       Recent changes       Contact Wikipedia       Donate to Wikipedia       Help                    Toolbox                What links here       Related changes   Upload file   Special pages       Printable version      Permanent link Cite this page                                                   This page was last modified on 7 November 2008, at 21:53.        All text is available under the terms of the  GNU Free Documentation License . (See  Copyrights  for details.)   Wikipedia® is a registered trademark of the  Wikimedia Foundation, Inc. , a U.S. registered  501(c)(3)   tax-deductible   nonprofit   charity .        Privacy policy        About Wikipedia        Disclaimers                      "
clueweb09-enwp00-06-19250	"                     Anti-worm          From Wikipedia, the free encyclopedia        (Redirected from  Antiworm )            Jump to:  navigation ,  search          Anti-worm  has multiple meanings within the field of  computer security . It can be a piece of  software  designed to protect against  computer worms , combining the features of  anti-virus software  and a  personal firewall . It can also mean a worm designed to do something that its author feels is helpful.           Contents       1   Concept   2   Criticism   3   Example   4   Notes               [ edit ]   Concept   The concept of ""anti-worms"" is a proactive method of dealing with virus and computer worm outbreaks. Just like malicious computer worms, anti-worms reach computers by scanning IP ranges and placing a copy of themselves on vulnerable hosts. The anti-worm then patches the computer's vulnerability and uses the affected computer to find other vulnerable hosts. Anti-worms have the ability to spread just as fast as regular computer worms, utilizing the same ""scan, infect, repeat"" model that malicious computer worms use.     [ edit ]   Criticism   Many  computer security  experts have denounced the so-called ""anti-worm"". Their position is that no code should be run on a system without the system owner's consent. Worm code, even if its author has good intentions, can wreak havoc on a network. It can overflow the traffic capacity of the network. Its author does not know the exact configuration of the system on which the code is running, and it could render that system useless for its intended purpose.   It is important to note that most jurisdictions which have computer crime laws covering worms do not distinguish ""worms"" from ""anti-worms,"" thus making the author(s) of such code liable to prosecution.     [ edit ]   Example   The Santy worm was released shortly before Christmas 2004 and spread quickly, using  Google  to search for vulnerable versions of  phpBB . The worm exploited a  bug  in the phpBB software to infect the host, defacing the website and deleting all of the messages stored on the forums. The worm was poised to spread to hundreds of thousands of other websites running the phpBB forum. Approximately 10 days after the worm's launch, someone released another worm to combat the Santy worm and patch the vulnerable phpBB forum. The anti-Santy worm spread quickly affecting thousands of servers running the phpBB.   However, the anti-santy worm caused problems of its own. Many site administrators reported that the anti-worm crashed their systems by flooding them with requests, resulting in a  denial-of-service attack . Others reported that the patch did not work.   Whether or not the anti-worm had a significant positive impact on the spread Santy worm is unknown. Within several hours of Santy's release, Google blocked the search string the worm was using to find vulnerable hosts. Thus, the worm could not find new hosts to infect. There is no way to determine if Google's actions or the anti-Santy worm did more to protect hosts.   Anti-worms have also been used to combat the effects of the  Code Red  worm. [ 1 ]     [ edit ]   Notes       ^   'Anti-worms' fight off Code Red threat               Retrieved from "" http://en.wikipedia.org/wiki/Anti-worm ""      Categories :  Computer network security  |  Computer worms                                   Views                   Article        Discussion        Edit this page        History                   Personal tools                Log in / create account                                 Navigation                Main page       Contents       Featured content       Current events       Random article                    Search                                                Interaction                About Wikipedia       Community portal       Recent changes       Contact Wikipedia       Donate to Wikipedia       Help                    Toolbox                What links here       Related changes   Upload file   Special pages       Printable version      Permanent link Cite this page                                                   This page was last modified on 7 November 2008, at 21:53.        All text is available under the terms of the  GNU Free Documentation License . (See  Copyrights  for details.)   Wikipedia® is a registered trademark of the  Wikimedia Foundation, Inc. , a U.S. registered  501(c)(3)   tax-deductible   nonprofit   charity .        Privacy policy        About Wikipedia        Disclaimers                      "
clueweb09-enwp00-06-19122	"                     Anti-worm          From Wikipedia, the free encyclopedia        (Redirected from  Anti-worms )            Jump to:  navigation ,  search          Anti-worm  has multiple meanings within the field of  computer security . It can be a piece of  software  designed to protect against  computer worms , combining the features of  anti-virus software  and a  personal firewall . It can also mean a worm designed to do something that its author feels is helpful.           Contents       1   Concept   2   Criticism   3   Example   4   Notes               [ edit ]   Concept   The concept of ""anti-worms"" is a proactive method of dealing with virus and computer worm outbreaks. Just like malicious computer worms, anti-worms reach computers by scanning IP ranges and placing a copy of themselves on vulnerable hosts. The anti-worm then patches the computer's vulnerability and uses the affected computer to find other vulnerable hosts. Anti-worms have the ability to spread just as fast as regular computer worms, utilizing the same ""scan, infect, repeat"" model that malicious computer worms use.     [ edit ]   Criticism   Many  computer security  experts have denounced the so-called ""anti-worm"". Their position is that no code should be run on a system without the system owner's consent. Worm code, even if its author has good intentions, can wreak havoc on a network. It can overflow the traffic capacity of the network. Its author does not know the exact configuration of the system on which the code is running, and it could render that system useless for its intended purpose.   It is important to note that most jurisdictions which have computer crime laws covering worms do not distinguish ""worms"" from ""anti-worms,"" thus making the author(s) of such code liable to prosecution.     [ edit ]   Example   The Santy worm was released shortly before Christmas 2004 and spread quickly, using  Google  to search for vulnerable versions of  phpBB . The worm exploited a  bug  in the phpBB software to infect the host, defacing the website and deleting all of the messages stored on the forums. The worm was poised to spread to hundreds of thousands of other websites running the phpBB forum. Approximately 10 days after the worm's launch, someone released another worm to combat the Santy worm and patch the vulnerable phpBB forum. The anti-Santy worm spread quickly affecting thousands of servers running the phpBB.   However, the anti-santy worm caused problems of its own. Many site administrators reported that the anti-worm crashed their systems by flooding them with requests, resulting in a  denial-of-service attack . Others reported that the patch did not work.   Whether or not the anti-worm had a significant positive impact on the spread Santy worm is unknown. Within several hours of Santy's release, Google blocked the search string the worm was using to find vulnerable hosts. Thus, the worm could not find new hosts to infect. There is no way to determine if Google's actions or the anti-Santy worm did more to protect hosts.   Anti-worms have also been used to combat the effects of the  Code Red  worm. [ 1 ]     [ edit ]   Notes       ^   'Anti-worms' fight off Code Red threat               Retrieved from "" http://en.wikipedia.org/wiki/Anti-worm ""      Categories :  Computer network security  |  Computer worms                                   Views                   Article        Discussion        Edit this page        History                   Personal tools                Log in / create account                                 Navigation                Main page       Contents       Featured content       Current events       Random article                    Search                                                Interaction                About Wikipedia       Community portal       Recent changes       Contact Wikipedia       Donate to Wikipedia       Help                    Toolbox                What links here       Related changes   Upload file   Special pages       Printable version      Permanent link Cite this page                                                   This page was last modified on 7 November 2008, at 21:53.        All text is available under the terms of the  GNU Free Documentation License . (See  Copyrights  for details.)   Wikipedia® is a registered trademark of the  Wikimedia Foundation, Inc. , a U.S. registered  501(c)(3)   tax-deductible   nonprofit   charity .        Privacy policy        About Wikipedia        Disclaimers                      "
clueweb09-enwp02-06-03159	"                     Morris worm          From Wikipedia, the free encyclopedia        (Redirected from  Morris Worm )            Jump to:  navigation ,  search          The  Morris worm  or  Internet worm  was one of the first  computer worms  distributed via the  Internet ; it is considered the first worm and was certainly the first to gain significant mainstream media attention. It also resulted in the first conviction in the US under the 1986  Computer Fraud and Abuse Act . [ 1 ]  It was written by a student at  Cornell University ,  Robert Tappan Morris , and launched on  November 2 ,  1988  from  MIT .           Contents       1   Architecture of the worm   2   The mistake   3   Effects of the worm   4   See also   5   Notes and references   6   External links               [ edit ]   Architecture of the worm          Disk containing the source code for the Morris Worm held at the  Boston Museum of Science       According to its creator, the Morris worm was not written to cause damage, but to gauge the size of the Internet. However, the worm was released from MIT to disguise the fact that the worm originally came from Cornell. (Incidentally, Morris is now an  associate professor  at MIT.) Additionally, the Morris worm worked by exploiting known vulnerabilities in  Unix   sendmail ,  Finger , rsh/rexec and weak passwords.   A supposedly  unintended consequence  of the code, however, caused it to be more damaging: a computer could be infected multiple times and each additional process would slow the machine down, eventually to the point of being unusable. The main body of the worm could only infect  DEC   VAX  machines running  BSD  4, and  Sun  3 systems. A portable C ""grappling hook"" component of the worm was used to pull over the main body, and the grappling hook could run on other systems, loading them down and making them peripheral victims.     [ edit ]   The mistake   The critical error that transformed the worm from a potentially harmless intellectual exercise into a virulent  denial of service  attack was in the spreading mechanism. The worm could have determined whether or not to invade a new computer by asking if there was already a copy running. But just doing this would have made it trivially easy to kill; everyone could just run a process that would answer ""yes"" when asked if there was already a copy, and the worm would stay away. The defense against this was inspired by  Michael Rabin 's  mantra , ""Randomization."" To compensate for this possibility, Morris directed the worm to copy itself even if the response is ""yes"", 1 out of 7 times  [ 2 ] . This level of replication proved excessive and the worm spread rapidly, infecting some computers multiple times. Rabin remarked when he heard of the mistake, that he ""should have tried it on a simulator first.""     [ edit ]   Effects of the worm   It is usually reported that around 6,000 major Unix machines were infected by the Morris worm.  Paul Graham  has claimed [ 3 ]  that     ""I was there when this statistic was cooked up, and this was the recipe: someone guessed that there were about 60,000 computers attached to the Internet, and that the worm might have infected ten percent of them.""     The U.S.  GAO  put the cost of the damage at $10M100M [ citation needed ] .   The Morris worm prompted  DARPA  to fund the establishment of the  CERT/CC  at  Carnegie Mellon University  to give experts a central point for coordinating responses to network emergencies. [ 4 ]   Gene Spafford  also created the  Phage mailing list  to coordinate a response to the emergency.   Robert Morris was tried and convicted of violating the 1986  Computer Fraud and Abuse Act . After appeals he was sentenced to three years probation, 400 hours of community service, and a fine of $10,000. [ 5 ]   The Morris worm has sometimes been referred to as the ""Great Worm"", because of the devastating effect it had upon the Internet at that time, both in overall system downtime and in psychological impact on the perception of security and reliability of the Internet. The name derives from the ""Great Worms"" of  Tolkien :  Scatha  and  Glaurung . [ 6 ]     [ edit ]   See also     Notable computer viruses and worms   Buffer overflow       [ edit ]   Notes and references       ^  Dressler, J. Cases and Materials on Criminal Law, ""United States v. Morris""  ISBN 9780-314-17719-3   ^   Court Appeal of Morris   ^   The Submarine   ^   Security of the Internet. CERT/CC   ^   ""Computer Intruder is Put on Probation and Fined"" by John Markoff, New York Times   ^   Great Worm  from The  Jargon File         [ edit ]   External links     Cornell commission findings  - in the  ACM Digital Library  ((from the abstract: ""sheds new light and dispels some myths""))   the full text of The Cornell commission findings (.pdf) is also  available  via paid subscription from the ACM Digital Library   Archive of worm material, incl. papers and code   An analysis of the worm by Eugene Spafford   An analysis of the worm by Mark Eichin and Jon Rochlis   ""The Morris Internet Worm"" by Charles Schmidt and Tom Darby   RFC 1135  - ""Helminthiasis of the Internet"" - an analysis of the worm infestation   A Report On The Internet Worm, by Bob Page, University of Lowell             Retrieved from "" http://en.wikipedia.org/wiki/Morris_worm ""      Categories :  Malware  |  Computer worms Hidden categories:  All articles with unsourced statements  |  Articles with unsourced statements since June 2008                                   Views                   Article        Discussion        Edit this page        History                   Personal tools                Log in / create account                                 Navigation                Main page       Contents       Featured content       Current events       Random article                    Search                                                Interaction                About Wikipedia       Community portal       Recent changes       Contact Wikipedia       Donate to Wikipedia       Help                    Toolbox                What links here       Related changes   Upload file   Special pages       Printable version      Permanent link Cite this page                   Languages                       esky       Dansk       Espaol       Franais       Nederlands              Polski       Portugus              Svenska       Ting Vit                                                           This page was last modified on 18 December 2008, at 20:59.        All text is available under the terms of the  GNU Free Documentation License . (See  Copyrights  for details.)   Wikipedia® is a registered trademark of the  Wikimedia Foundation, Inc. , a U.S. registered  501(c)(3)   tax-deductible   nonprofit   charity .        Privacy policy        About Wikipedia        Disclaimers                      "
clueweb09-en0010-98-26843	                                                                                             Subscribe   Contact Us   About Us   Advertising   Editorial Calendar   SC US   SC Aus/NZ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Home                                                                                                           News                            Features                                                                                 Products                            Reviews Group Tests                                                                                 Whitepapers                                                                                                           Suppliers                                                                                                           Jobs                                                                                                           Issue Archive                                                                                                           Subscribe                            News by Email Subscribe to SC Magazine                                                                                 Events                            SC Awards SC Magazine Conference SpeakersChannel.tv Other Events                                                                                 Webcasts                            Archive 2007 Archive 2008                                                                                                        Topic Center:                            Email Security                                             Patch Management                                             Mobile/End Point Security                                             Compliance                                                 RSS  |  Login  |  Register                                                              IT security news, reviews and opinion   >  News  > Corporate networks warned over outbreak of Downadup worm                                                                                                     Corporate networks warned over outbreak of Downadup worm                 SC Staff           January 08, 2009                                                                                Print                     Email                     Reprint                   Font Size:  A  |                           A  |  A                                                                                                                                                                                                                                                                                                                                                                                                  Related Articles Worm exploiting Microsoft vulnerability developing into botnet Application control could have prevented hospital worm Microsoft hit by worm threat despite patch Social networking worm detected Worm infects over three million PCs since New Year                                    More In News Ex-employee pleads guilty to sabotaging his former employer's computer system Mac specific anti-virus and anti-spyware tool launched Rise in inauguration-related spam predicted for next week VeriSign names Mark McLaughlin as president and chief operating officer SafeNet hardware security module works with Microsoft SQL Server 2008                                                                         Windows workstations and servers could be hit by the Downadup' worm.      F-Secure has claimed to receive several reports of corporate networks getting infected with variants of this worm since the New Year, and is working closely with affected companies as well as with various CERT organisations to fight the outbreak.      It claimed that Downadup (also known as Conficker) is a large family of network worms that is difficult to remove, especially in case of an internal infection inside a corporate network.      It can use several different methods to spread, including using the recently patched vulnerability in Windows Server Service, guessing network passwords and infecting USB sticks. As an end result, once the malware gains access to the inside of a corporate network, it can be unusually hard to eradicate fully.      Typical problems generated by the worm include locking network users out of their accounts. This happens because the worm tries to guess (or brute-force) network passwords, tripping the automatic lock-out of a user who has too many password failures.      Once this worm infects a machine, it protects itself very aggressively by setting itself to restart very early in the boot-up process of the computer, and by setting Access Rights to the files and registry keys of the worm so that the user cannot remove or change them.      The worm downloads modified versions of itself from a long list of websites. The names of these websites are generated by an algorithm based on current date and time. As there are hundreds of different domain names that could be used by the malware, it is complex for security companies to locate and shut them all down in time.      F-Secure recommends standard procedures such as checking your anti-virus vendor's website for disinfection instructions and restricting USB stick usage and block unnecessary traffic at your firewalls if you are  already infected.                                                                                                                                                                                                               Most Popular           Most Emailed           Most Recent                       Home Office criticised over email data plans Top 25 dangerous programming errors identified by panel of experts Ex-employee pleads guilty to sabotaging his former employer's computer system Hackers hijack Apple speech with prank announcements New spam campaign uses Microsoft and Trend Micro logos HMRC reports 'prolific' tax rebate phishing scams  IT managers remain concerned about anonymous proxies Outgoing emails cause more problems with Home Office database Researcher warns of Safari vulnerability Fake CNN Gaza news report contains Trojan                       Internet Explorer users encouraged to switch to other browsers Corporate networks warned over outbreak of Downadup worm Microsoft to release emergency patch today for Explorer Spam YouTube messages contain malware Almost 200 million could be affected by data loss this year Microsoft releases emergency patch for Internet Explorer  Researcher warns of Safari vulnerability Business managers do not take encryption seriously and disable the function Home Office criticised over email data plans Companies do not monitor their internet usage or security                         Ex-employee pleads guilty to sabotaging his former employer's computer system Rating service sues former member over data theft claims Mac specific anti-virus and anti-spyware tool launched Rise in inauguration-related spam predicted for next week VeriSign names Mark McLaughlin as president and chief operating officer SafeNet hardware security module works with Microsoft SQL Server 2008 Worm infects over three million PCs since New Year Spam YouTube messages contain malware EU approves biometric passports Jericho Forum announces election of five board members                                        Popular Tags Breaches & Exposures      Browser Flaws      Compliance      Consumer Threats      Email Security      Emerging Threats      Finance      Government      Groundbreakers      Healthcare      High Tech      Insider Threats      IT Security Training      Lawbreakers & Cybercrime      Legal & Professional Services      Manufacturing      Microsoft      Mobile Endpoint Security      Patch Management      Phishing      Privacy Regulation      Product News      Spam Techniques      Trojans      Vulnerabilities & Flaws                                                                                                     Sponsored Links                                                                                                                                                                  Home  |  News  |  Products  |  Whitepapers  |  Jobs  |  Subscribe  |  Contact Us  |  About Us  |  Advertising  |  Editorial  |    RSS   This material may not be published, broadcast, rewritten or redistributed in any form without prior authorization.    Your use of this website constitutes acceptance of Haymarket Media's  Privacy Policy  and  Terms & Conditions                                                                                      
