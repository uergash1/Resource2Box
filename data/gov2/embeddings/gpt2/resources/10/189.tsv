id	content
GX080-29-11634306	"~  [   source navigation   ]  ~  [   diff markup   ]  ~  [   identifier search   ]  ~  [   freetext search   ]  ~  [   file search   ]  ~        D0 Code        * Comprehensively cross-referenced and searchable code browser *        Produced by        Linux          Cross Reference                Version:     ~  [   development   ]  ~              This release created / updated: Tue Dec 23 02:49:25 CST 2003            <Code Browser> Top of source tree        1  #!/usr/bin/env python    2  from posixpath import exists    3  import os, sys, string, time    4  #    5  from farmUtil import untarme    6  from farmUtil import samtimestamp, samresponse    7  from farmUtil import commander, commanderTimeout, isProjectThere    8  from make_desc_file import make_desc_file    9  from make_desc_root import make_desc_root   10  from checkBuffers import checkBuffers   11  import commands   12  #   13  #   14  #   15  def startWorker (reco_vers, station, project_name, cmddir, logdir, samdb,    16                   outdir_root, outlogdir, preco_anal, restart,    17                   restart_analysis_name, no_of_events):   18     19      try:   20          verbose = 1   21     22          JobDone = ""No More Files Available !""   23          recotime = 200   24     25          scratchdir = os.environ['FBS_SCRATCH']   26          os.chdir(scratchdir)   27       28          HOST=os.popen('hostname').readlines(0)[0][0:-1]   29          USER=os.popen('whoami').readlines(0)[0][0:-1]   30         31          if os.environ.has_key('FBS_PROC_NO'):   32                  full_job_id = os.environ['FBS_PROC_NO']   33                  farm_job_id = os.environ['FBS_JOB_ID']   34                  farm_disk_area=os.environ['FBS_SCRATCH']   35                  disk_area=""/local/stage2/sam""   36                  disk_area1=""/local/stage2/sam1""   37                  print ""full_job_id, farm_job_id, farm_disk_area, disk_area: "", full_job_id, farm_job_id, farm_disk_area, disk_area    38          else:   39                  print ""no variable FBS_PROC_NO defined""   40                  sys.exit(0)   41     42          N=os.environ['FBS_PROC_NO']   43          JID=farm_job_id    44     45          if restart == ""TRUE"":   46             analysis_name = restart_analysis_name   47             old_farm_job_id = string.split(analysis_name,""."")    48             JID = old_farm_job_id[-1]   49          else:   50             analysis_name = ""farm.""+reco_vers+"".""+farm_job_id   51             JID = farm_job_id        52     53     54          os.environ['SAM_STATION'] = ""protofarm""   55          os.environ['SAM_PROJECT'] = analysis_name   56          os.environ['SAMLOG']=logdir+""/""+farm_job_id+""_""+N+""_sam.log""    57          os.environ['FSSLOG']=logdir+""/""+farm_job_id+""_""+N+""_fss.log""   58          os.environ['JOBSUM']=logdir+""/""+farm_job_id+"".sum""   59  #   60          print "" Start running worker job on analysis project "" + analysis_name    61  #   62          outdir = ""/pnfs/sam/mammoth/mcc99_2/d0farm/reco""   63          outlogdir = outlogdir +""/""+JID   64  #          65  # stagger jobs a bit   66  #       wait = N+""0""   67  #       commander(""sleep "" + wait, verbose)   68  #   69  #...copy the executable code   70          codelocation = 'd0farm@d0bbin-farm:/home/d0farm/d0reco/'+reco_vers+'.tar'   71          command = 'fcp '+codelocation+ ' .'   72          status = commander(command,verbose)   73          if (status != 0):   74            print ""copy of the code error ""   75            sys.exit(0)   76  #...untar copied code   77          trytar = 0   78          while(untarme(reco_vers+'.tar') !=0 & trytar < 10):   79              print ""try to untar it yet again "", trytar   80              trytar = trytar+1   81     82  # get the run_config_db   83          dblocation = 'd0farm@d0bbin-farm:/home/d0farm/d0reco/run_config_db.tar'   84          command = 'fcp '+dblocation+ ' .'   85          status = commander(command,verbose)   86          if (status != 0):   87            print ""copy of the code error ""   88            sys.exit(0)   89  #...untar copied code   90          os.system(""rm -rf run_config_db"")   91          untarme('run_config_db.tar')   92          os.system(""ls "")   93  #   94  #       95          print "" Farm batch jobs starting on  worker number "" + N + ""\t"" + JID+""\t"" + HOST   96  #   97          status = (isProjectThere(analysis_name) == 0)   98          if(status != 0):   99              print ""Project error -- no project found""  100              sys.exit(0)  101  #  102  #...find consumer id  103          CIDFILE = ""/home/d0farm/samjobs/""+farm_job_id+"".CID""  104          print ""Consumer ID file should be "" + CIDFILE  105          if not(os.path.isfile(CIDFILE)):  106              print ""no consumer id file ""  107              sys.exit(0)  108    109          response = samresponse(CIDFILE)  110            111                112          if (response[0] == ""ERROR"") :  113              print ""bad consumer ID""  114              sys.exit(0)  115    116          CID = response[1]  117          print ""Consumer ID is "" + CID  118  #  119  #...second consumer  120          if preco_anal==""recon_root"":  121            CIDFILE_sec = ""/home/d0farm/samjobs/""+farm_job_id+""_sec.CID""  122            print ""Consumer ID file should be "" + CIDFILE_sec  123            if not(os.path.isfile(CIDFILE_sec)):  124               print ""no second consumer id file ""  125               sys.exit(1)  126    127            response_sec = samresponse(CIDFILE_sec)  128            if (response_sec[0] == ""ERROR"") :  129                print ""bad second consumer ID""  130                sys.exit(1)  131    132            CID_sec = response_sec[1]  133            print ""Consumer ID is "" + CID_sec  134  #  135  #  136  #...remove sam direcory that allocate buffer was possible(important when project is restarted)  137  #        command = ""sam deallocate buffer --disk="" + disk_area + "" --sizeK=2500000 --project=""+ analysis_name +"">> $SAMLOG""  138  #        status = commander(command,1)  139  #        if(status != 0):  140  #          print ""sam deallocate buffer failed""    141    142  #       os.system (""sleep 10"")  143    144  ##        command = ""/bin/rm -r "" +  disk_area + ""/"" + analysis_name  145  ##        if  commander(command,verbose) != 0:  146  ##            print ""sam allocate failed""  147  ##            sys.exit(1)  148  #  149          if (exists(disk_area+""/""+analysis_name) and restart == ""TRUE""):  150              print "" already have a buffer, no need to remake""  151          elif (exists(disk_area+""/""+analysis_name)):  152              #...allocate second buffer if two job from one project are running  153              #...on the same host  154              command = ""sam allocate buffer --disk="" + disk_area1 + "" --sizeK=2500000 --project=""+ analysis_name +"">> $SAMLOG""  155              disk_area_choosen = disk_area1  156          else:  157              command = ""sam allocate buffer --disk="" + disk_area + "" --sizeK=2500000 --project=""+ analysis_name +"">> $SAMLOG""  158              disk_area_choosen = disk_area  159  #  160  #        status = commands.getoutput (command)  161  #        print ""status: "", status  162  #        if status != """":  163              status = commander(command,verbose)  164              if status != 0:  165                    print ""sam allocate failed""  166                    sys.exit(1)  167  #  168  # Now, start and run the actual consumer process  169  #  170          RTFILE=farm_disk_area+""/consumer.""+HOST+"".""+USER+"".out""  171          command = ""sam establish process --cid=""+CID+"" --rtfile=""+ RTFILE +"">> $SAMLOG""  172          status = commander(command,verbose)  173          if (status != 0):  174              print ""consumer start failed""  175              s = commander(""sam dump project --verbose "",verbose)  176              cleaning(disk_area_choosen, analysis_name)  177              sys.exit(1)  178    179          response = samresponse(RTFILE)  180          CPID = response[1]  181  #  182  #...second consumer  183          if preco_anal==""recon_root"":  184            RTFILE_sec=farm_disk_area+""/consumer.""+HOST+"".""+USER+""_sec.out""  185            command = ""sam establish process --cid=""+CID_sec+"" --rtfile=""+ RTFILE_sec +"">> $SAMLOG""  186            status = commander(command,verbose)  187            if (status != 0):  188               print ""second consumer start failed""  189               s = commander(""sam dump project --verbose "",verbose)  190               cleaning(disk_area_choosen, analysis_name)  191               sys.exit(1)  192    193            response_sec = samresponse(RTFILE_sec)  194            CPID_sec = response_sec[1]  195  #  196  #  197  #-----loop over all files in the project-----  198  #  199  #  200          recentbad = 0  201          while (0==0):  202              print ""begin of a loop over all files in data set""  203              userstatus = 'ok'  204  #  205              status = (isProjectThere(analysis_name) == 0)  206              if(status !=0):  207                  print ""Project has gone away""  208                  cleaning(disk_area_choosen, analysis_name)  209                  sys.exit(1)  210  #  211  #Get the file from SAM  212              print"" try a get next file ""  213  #           if not(os.path.isdir('/pnfs/sam/mammoth')):  214  #               print ""directory /pnfs/sam/mammoth does not exist ""  215  #               break  216              numtogo = checkBuffers()  217              print "" there are numtogo files left""  218              if(numtogo == 0):  219                  print ""see how many are local""  220                  os.system(""ls -lrt ""+disk_area_choosen+""/""+analysis_name)  221    222              RTFILE=farm_disk_area+""/getnextfile.""+HOST+"".""+USER+"".out""  223              command = ""sam get next file --cpid=""+CPID+"" --rtfile=""+RTFILE+"" >> $SAMLOG""  224  #           status = commander(command,verbose)  225  #           if(status != 0):  226              status = commanderTimeout(command, verbose,18000)  227              print ""startWorkerChain.py - status: %s\n"" % status  228              if status == 123456789:  229                 #... status == 123456789 indicates that timeout occured  230                 print ""timeout in sam: get next file\n""   231                 cleaning(disk_area_choosen, analysis_name)  232                 sys.exit(1)  233              elif status != 0:  234                 #... status != indicates error in 'sam get next file'  235                  print ""file problem delivery or last file ???????????\n""   236  #               sys.exit(1)  237    238              response = samresponse(RTFILE)  239              print ""response from sam get next file: "", response  240    241              the_file = response[1]  242              print ""The file name is :"" + the_file  243              status = (isProjectThere(analysis_name) == 0)  244              if(status !=0):  245                  print ""Project has gone away""  246     247              if((the_file == ""ERROR"") | (the_file == """") | (the_file == ""ERROR!"") ):  248                  print ""sam get next file response: "", response  249                  os.system(""sleep 600"")  250                  cleaning(disk_area_choosen, analysis_name)  251                  sys.exit(1)  252    253              if(the_file == ""EMPTY_FILE""):  254                  os.system(""sleep 600"")  255                  print ""There is an emptyfile for some reason ""  256                  cleaning(disk_area_choosen, analysis_name)  257                  sys.exit(1)  258    259    260    261              if(the_file == ""END""):  262                  os.system(""sleep 600"")  263                  print ""Job is done--everythig was done correctly""  264                  raise JobDone  265    266              status = commander(""ls -lrt "" +  the_file,verbose)  267              status = commander(""mv ""+RTFILE+"" lastfile"",verbose)  268  #  269  #work on file--make all the processing  270  #  271    272              status = commander(""ln -s ""+the_file+"" inputfile"",verbose)  273    274              the_full_file = the_file  275              the_file = os.path.split(the_file)[1]  276              print "" the local file name is "" + the_file  277               278              if reco_vers == ""preco04.00.04"":   279                  if preco_anal == ""root"":         280                    outputname=the_file  281                  else:  282                    outputname=""reco.""+the_file+""_""+reco_vers  283                  routputname=""recoA.""+outputname+"".root""  284              else:  285                  if preco_anal == ""root"":         286                    outputname=the_file  287                    status = commander(""ln -s ""+the_full_file+"" outputfile"",verbose)  288                  else:  289                    outputname=""reco_""+the_file+""_""+reco_vers  290                  routputname=""recoA_""+outputname+"".root""  291    292              os.environ['outputfile']=outputname  293              os.environ['routputfile']=routputname  294    295              FILE_NAME=outputname  296              RFILE_NAME=routputname  297              PARENT=the_file  298              RPARENT = FILE_NAME  299    300              TIER=""reconstructed""  301              RTIER = ""root-tuple""  302              start=samtimestamp()  303              START_DATE = start[0]  304              START_TIME = start[1]  305              print """"  306              print "" output file will be "" + outputname  307              print """"  308              print "" start reco on file inputfile =""+ the_file  309  #  310  #  311  #                 312              if(samdb == ""prd""):  313                  if preco_anal == ""recon_root"":  314                      status = commander('./runboth ' + the_full_file + ' ' + no_of_events, verbose)  315                  elif preco_anal == ""recon"":  316                      status = commander('./runme ' + the_full_file + ' ' + no_of_events, verbose)  317                  elif preco_anal == ""root"":  318                      status = commander('./runrecoanalyze ' + the_full_file + ' ' + no_of_events, verbose)   319              else:  320  # fake it  321                  status = commander('csh -vx ~/bin/runfake ' + the_full_file + ' ' + no_of_events,verbose)  322    323  #  324  #  325  # if it fails, save the offending input file  326  #  327              outdiskdir = outlogdir  328              badinput = 0  329              if(status != 0):  330                  badinput = status  331                  print ""reco failed"",badinput  332                    333  #               commander("" cat reco.out  "",verbose)  334  #               commander("" cat reco.stderr "",verbose)  335  #               commander("" cat reco.log "",verbose)  336  #               commander("" cat recoa.out "",verbose)  337  #               commander("" cat recoa.stderr "",verbose)  338  #               commander("" cat recoa.log "",verbose)  339                  outdiskdir = outlogdir+ ""/badinput""  340                  userstatus = ""RECOFAILURE""  341  #               if(badinput !=2):  342  #                   command = ""fcp inputfile  "" + outdiskdir+""/""+the_file  343  #               if(preco_anal != ""root""):  344  ##                  command = ""fcp outputfile "" + outdiskdir+""/""+outputname  345  #                   status = commander(command,verbose)  346                  if(os.path.isfile(""core"")):  347                         command = ""fcp core "" + outdiskdir + ""/logs/"" + outputname + "".core""  348                         commander(command,verbose)  349                         command = ""rm core""  350                         commander(command,verbose)  351  #               commander(""fcp ""+ the_file +"" "" + outdiskdir +""/."",verbose)  352                  recentbad = recentbad+1  353                  if recentbad > 3:  354                      print ""I've crashed 3 times in a row, I give up""  355                      cleaning(disk_area_choosen, analysis_name)  356                      sys.exit(1)  357    358    359  # end of the failure stuff  360    361              else:  362  # reset the bad file counter  363                  recentbad = 0  364    365              if(os.path.isfile(""outputfile"") and preco_anal != ""root""):  366                 command = ""mv outputfile ""+outputname  367                 status = commander(command,verbose)  368    369              if(os.path.isfile(""root_RecoAnalyze.rtpl"")):  370                  command = ""mv root_RecoAnalyze.rtpl ""+routputname  371                  status = commander(command,verbose)  372              elif(os.path.isfile(""root_clobal.ntpl"")):  373                  command = ""mv root_global.ntpl "" + routputname  374                  status = commander(command,verbose)  375    376              end=samtimestamp()  377              END_DATE = end[0]  378              END_TIME = end[1]  379    380  #           print "" about to try to write to ""+outdir+"" from CPID ""+CPID+ "" >> $FSSLOG""  381              savestatus = 0  382       383              if preco_anal == ""recon_root"" or preco_anal == ""recon"":  384               if(os.path.isfile(FILE_NAME)):  385                  SIZE=os.path.getsize(FILE_NAME)  386                  string1 = make_desc_file(FILE_NAME, SIZE,'reco.out', TIER, START_DATE, START_TIME, END_DATE, END_TIME, PARENT, CPID)   387                  metadata=open('metadata.py','w')  388                  metadata.write(string1)  389    390                  metadata.close()  391                  print string1      392                  if( badinput == 0):  393                      print ""badinput is ok""  394    395                      command = ""fcp ""+ outputname +"" ""+ outdiskdir+""/""+outputname  396                      savestatus = savestatus + commander(command,verbose)  397                      command = ""fcp metadata.py "" + outdiskdir+""/""+outputname+"".meta.py""           398                      savestatus = commander(command,verbose)*4+savestatus  399    400    401              if preco_anal == ""recon_root"" or preco_anal == ""root"":  402               if(os.path.isfile(RFILE_NAME)):  403                 RSIZE=os.path.getsize(RFILE_NAME)  404                 if preco_anal == ""recon_root"":  405                   string2 = make_desc_root(RFILE_NAME,RSIZE,'recoa.out', RTIER,START_DATE, START_TIME, END_DATE,END_TIME, RPARENT, CPID_sec)  406                 else:  407                   string2 = make_desc_root(RFILE_NAME,RSIZE,'recoa.out', RTIER,START_DATE, START_TIME, END_DATE,END_TIME, RPARENT, CPID)  408                   409                 rmetadata = open('rmetadata.py','w')           410                 rmetadata.write(string2)  411                 rmetadata.close()  412                 print string2  413                 if(badinput == 0):  414                     print "" badinput is ok""  415                     command = ""fcp ""+ routputname +"" ""+ outdiskdir+""/""+routputname  416                     savestatus = commander(command,verbose)*2 + savestatus  417    418                     command = ""fcp rmetadata.py "" + outdiskdir+""/""+routputname+"".meta.py""  419                     savestatus = commander(command,verbose)*8+savestatus  420  #  421  #  422  # send the data to disk  423  #  424                425              if (savestatus != 0):  426                  print 'fcp of outputfile problem'   427    428              if (savestatus >= 4):  429                  print 'fcp or metadata problem'   430    431              if preco_anal == ""recon_root"" or preco_anal == ""recon"":  432                command = ""fcp reco.out "" + outdiskdir +""/logs/"" + outputname + "".outlog""      433                commander(command,0)  434                command = ""fcp reco.log "" + outdiskdir +""/logs/"" + outputname + "".errlog""  435                commander(command,0)  436                command = ""fcp reco.stderr "" + outdiskdir +""/logs/"" + outputname + "".stderr""  437                commander(command,0)  438    439              if preco_anal == ""recon_root"" or preco_anal == ""root"":  440                command = ""fcp recoa.out "" + outdiskdir +""/logs/"" + routputname + "".outlog""      441                commander(command,0)  442                command = ""fcp recoa.log "" + outdiskdir +""/logs/"" + routputname + "".errlog""  443                commander(command,0)  444                command = ""fcp recoa.stderr "" + outdiskdir +""/logs/"" + routputname + "".stderr""  445                commander(command,0)  446    447              command = ""fcp events.read "" + outdiskdir +""/logs/"" + outputname + "".eventsread""  448              commander(command,0)  449              command = ""fcp events.write "" + outdiskdir +""/logs/"" + outputname + "".eventswritten""  450              commander(command,0)  451    452    453              print "" worker output copied back to I/O node from worker ""+N  454  #  455  #...remove output file from the local disk  456  #            status=commander(""rm ""+ the_file,verbose)  457  #            if(status != 0):  458  #               print ""rm of the file: "" +the_file+ "" failed""  459  #  460              status=commander(""rm inputfile"",verbose)  461              if(status != 0):  462                  print ""rm of the inputfile failed""  463    464              os.system(""rm ""+outputname)  465              if(status != 0):  466                  print ""rm of the outputname failed""  467    468              os.system(""rm metadata.py"")  469              if(status != 0):  470                  print ""rm of the metadata.py failed""   471    472              if preco_anal == ""recon_root"" or preco_anal == ""root"":  473                os.system(""rm rmetadata.py"")  474                if(status != 0):  475                  print ""rm of the metadata.py failed""   476  #  477  #...release already processed file  478              print  "" release the file "" + the_file  479              if(savestatus != 0):  480                  userstatus = ""copyfailed""  481                482              command = ""sam release --status=""+userstatus+"" --file=""+the_file+"" --cpid=""+CPID+"" >> $SAMLOG""  483              status = commander(command,verbose)  484              if(status != 0):  485                  print ""sam release problem""   486  #  487  #  488              print ""end of loop""       489              continue  490  #  491  #.......end of the loop of input files in the project  492  #  493  #  494  # ... program should never exectute this line  495  #  496              print ""before exit from job""  497              sys.exit(0)  498  #  499  #  500  #  501  #...job was succesfully completed  502      except JobDone:  503          print ""Job is done""  504          status = commander(""sam dump consumer --cid=""+CID,verbose)  505          if(status !=0):  506              print ""tried to dump project at end of job but failed""  507          cleaning(disk_area_choosen, analysis_name)  508          sys.exit(0)  509  #  510  #  511  #  512  def cleaning(disk_area, analysis_name):  513          #...deallocate buffer       514  #        command = ""ls""  515          command = ""sam deallocate buffer --disk="" + disk_area + "" --sizeK=2500000 --project=""+ analysis_name +"">> $SAMLOG""  516          status = commander(command,1)  517          if(status != 0):  518             print ""sam deallocate buffer failed""          519  #  520  #  521  #  522  if __name__ == '__main__':  523      if len(sys.argv) != 13:  524          print ' wrong argument list:', sys.argv  525          sys.exit(1)  526      else:  527          print 'arguments: ', sys.argv  528      startWorker (sys.argv[1],sys.argv[2],sys.argv[3],sys.argv[4],sys.argv[5],sys.argv[6],sys.argv[7],sys.argv[8], sys.argv[9], sys.argv[10], sys.argv[11], sys.argv[12])  529  #  530  #  531  #        ~  [   source navigation   ]  ~  [   diff markup   ]  ~  [   identifier search   ]  ~  [   freetext search   ]  ~  [   file search   ]  ~      This page was automatically generated by the   LXR engine .   Visit the  LXR main site  for more information."
GX035-61-8669189	~  [   source navigation   ]  ~  [   identifier search   ]  ~  [   freetext search   ]  ~  [   file search   ]  ~        D0 Code        * Comprehensively cross-referenced and searchable code browser *        Produced by        Linux          Cross Reference                Version:     ~  [   development   ]  ~              This release created / updated: Wed Dec 17 03:06:33 CST 2003            <Code Browser> Top of source tree      Identifier:              ~  [   source navigation   ]  ~  [   identifier search   ]  ~  [   freetext search   ]  ~  [   file search   ]  ~      This page was automatically generated by the   LXR engine .   Visit the  LXR main site  for more information.
GX000-23-2264803	[   source navigation   ]   [   identifier search   ]   [   freetext search   ]   [   file search   ]   [   repository   ]         Software     Cross Reference                       Version:      [   current   ]            Identifier:                  [   source navigation   ]   [   identifier search   ]   [   freetext search   ]   [   file search   ]   [   repository   ]       This page was automatically generated by the   LXR engine . Visit the  LXR main site  for more information.   This version by  Torre Wenaus .
GX021-77-3132175	NCBI Home       IEB Home       C++ Toolkit docs       C Toolkit source browser       C Toolkit source browser (2)               NCBI C++ Toolkit Cross Reference                        source navigation    identifier search    freetext search    file search                   Identifier:    All Any first entry Class Struct type Enum type Union type Type Function prototype Function Class (forwarded) Macro Variable               [  source navigation  ]    [  identifier search  ]    [  freetext search  ]    [  file search  ]                                    This page was automatically generated by the         LXR engine .               Visit the  LXR main site  for more       information.
GX021-64-8810888	NCBI Home       IEB Home       C Toolkit docs       C++ Toolkit source browser       C Toolkit source browser (2)               NCBI C Toolkit Cross Reference                        source navigation    identifier search    freetext search    file search                   Identifier:    All Any first entry Class Struct type Enum type Union type Type Function prototype Function Class (forwarded) Macro Variable               [  source navigation  ]    [  identifier search  ]    [  freetext search  ]    [  file search  ]                                    This page was automatically generated by the         LXR engine .               Visit the  LXR main site  for more       information.
GX103-38-14263817	"~  [   source navigation   ]  ~  [   diff markup   ]  ~  [   identifier search   ]  ~  [   freetext search   ]  ~  [   file search   ]  ~        D0 Code        * Comprehensively cross-referenced and searchable code browser *        Produced by        Linux          Cross Reference                Version:     ~  [   development   ]  ~              This release created / updated: Thu Dec 25 02:38:23 CST 2003            <Code Browser> Top of source tree        1  #!/usr/bin/env python    2  import os, sys, string, time    3  from untarme import untarme    4  from farmutil import timestamp    5  from farmsamutil import samtimestamp    6  from FileExists import FileExists    7  from FileName import FileName    8  from FileSize import FileSize    9  from farmsamutil import samresponse   10  from farmutil import sleep   11  from farmutil import commander   12  from make_descrip_file_new import make_descrip_file   13  from farmsamutil import isProjectThere   14     15     16  def worker_control_no_stager(reco_vers,station,project_name,cmddir,logdir,samdb,outdir_root,outlogdir):   17     18      try:   19          verbose = 1   20          reco = 1   21     22     23     24          NoProject = ""No Running Project Exception!""   25          copyok = ""fine""   26          D0ConfigError = ""D0 configuration not loaded!""   27          NoContext = ""No Job Context Exception!""   28          NoFileDelivered = ""SAM failed to deliver a file""   29          StagerError = ""Stager Error Exception!""   30          OutputStagerError = ""Output Stager Error Exception!""   31          ConsumerError = ""Consumer Error Exception!""   32          FileDeliveryError = ""File Delivery Exception!""   33          FileReleaseError = ""File Release Exception!""   34          JobDone = ""No More Files Available !""   35          recotime = 200   36          disksize = ""2000000""   37          userstatus = 'ok'   38     39             40     41          scratchdir = os.environ['PC_BATCH_SCRATCH']   42          os.chdir(scratchdir)   43     44       45          HOST=os.popen('hostname').readlines(0)[0][0:-1]   46          USER=os.popen('whoami').readlines(0)[0][0:-1]   47     48         49          if os.environ.has_key('PC_BATCH_JOB_ID'):   50                  full_job_id = os.environ['PC_BATCH_JOB_ID']   51                  farm_job_id = os.environ['FBS_JOB_ID']   52                  disk_area=os.environ['PC_BATCH_SCRATCH']   53          else:   54                  full_job_id = ""local-"" + timestamp()   55                  farm_job_id = ""local-"" + timestamp()   56                  disk_area='.'   57     58          N=os.environ['PC_BATCH_PROC_NO']   59     60  #       print os.environ['PYTHON_DIR']   61     62          JID=farm_job_id    63     64          analysis_name = ""farm.""+reco_vers+"".""+farm_job_id   65     66          os.environ['SAM_STATION'] = ""protofarm""   67          os.environ['SAM_PROJECT'] = analysis_name   68          os.environ['SAMLOG']=logdir+""/""+full_job_id+""_""+N+""_sam.log""    69          os.environ['FSSLOG']=logdir+""/""+full_job_id+""_""+N+""_fss.log""   70          os.environ['JOBSUM']=logdir+""/""+full_job_id+"".sum""   71     72     73          print "" Start running worker job on analysis project "" + analysis_name    74             75  #       status = commander(""sam dump project --verbose > /dev/null "",verbose)   76          status = (isProjectThere(analysis_name) == 0)   77          if(status != 0):   78              print ""Project error""   79              raise NoProject   80     81          print ""output goes to "" + outdir_root[0:4]   82     83          samstore = (outdir_root[0:4] == ""pnfs"")   84     85     86     87          if (samstore == 0):   88              outdir = outlogdir +""/"" + JID   89              outlogdir = outlogdir +""/""+JID   90          else:   91              outdir = ""/pnfs/sam/mammoth/mcc99_2/d0farm/reco""   92              outlogdir = outlogdir +""/""+JID   93             94          if samstore:   95              print ""output files will go to SAM:   ""+ outdir   96          else:   97              print ""output files will go to disk:  ""+ outdir       98     99    100  # stagger jobs a bit  101            102          wait = N+""0""  103          commander(""sleep "" + wait, verbose)  104    105  #       commander(""sleep 100"", verbose)  106    107    108    109          # get the code  110    111    112          codelocation = 'd0farm@d0bbin:/home/d0farm/d0reco/'+reco_vers+'/'+reco_vers+'.tar'  113    114    115          k = 0  116    117          while k < 10:  118              command = 'rcp '+codelocation+ ' .'  119              status = commander(command,verbose)  120              if (status == 0) :  121                  k = 11  122              else:  123                  k = k+1  124                  commander(""sleep 60"",verbose)  125                  print "" retry copy ""  126    127          if(status !=0):  128              raise ConfigError  129            130          untarme(reco_vers+'.tar')  131          os.system('ls -lrt')  132    133        134    135  #       print N  136  #       print JID  137  #       print HOST  138          print "" Farm batch jobs starting on  worker number "" + N + ""\t"" + JID+""\t"" + HOST  139    140    141          print  "" go to the local scratch directory "" + disk_area  142  #  143      144     145  #       status = commander(""sam dump project --verbose > /dev/null  "",verbose)  146          status = (isProjectThere(analysis_name) == 0)  147          if(status != 0):  148              print ""Project error""  149              raise NoProject  150    151          print "" There is a valid project ""  152    153          CIDFILE = ""/home/d0farm/samjobs/""+farm_job_id+"".CID""  154    155          print ""Consumer ID file should be "" + CIDFILE  156    157    158          if(FileExists(CIDFILE) != ""TRUE""):  159              print ""no consumer id file ""  160              raise NoContext  161    162          response = samresponse(CIDFILE)  163          if (response[0] == ""ERROR"") :  164              print ""bad consumer ID""  165              raise ConsumerError  166    167          CID = response[1]  168    169          print ""Consumer ID is "" + CID  170    171            172    173    174  #-------------------------start up a stager -------------------  175    176    177  #       RTFILE = disk_area + ""/stager.""+HOST+USER+"".out""  178    179  #       status = commander(""sam start stager --verbose --rtfile=""+RTFILE+"" --max-transfers=1 > $SAMLOG"",verbose)  180  #       if(status !=0):  181  #           print ""sam start stager failed""  182  #           raise StagerError  183    184  #        print  status  185    186  #       print "" look at the returned file ""  187  #       response = samresponse(RTFILE)  188  #       print ""result of sam start stager""   189  #       print response  190  #       if (response[0] == ""ERROR"") :  191  #           print ""sam start stager failed""  192  #           raise StagerError  193                194    195  #       if (response[0] == ""NO_SUCH_FILE""):  196  #           print ""stager is pretty messed up - no such file message!""  197  #           raise StagerError  198            199  #       STAGER_PID = response[1]  200    201          STAGER_PID = firstline(""~/samjobs/HOST/stagerid"")  202            203    204    205    206          sleep(3)  207    208    209    210    211  #sleep 3  212    213  # input stager  214    215          command = ""sam add stager --verbose  --pid=""+STAGER_PID+"" --project=""+analysis_name+"" --diskdir=""+disk_area+"" --disksize=""+disksize+"" >> $SAMLOG""  216    217          status = commander(command,verbose)  218          if status != 0:  219              print ""sam add stager failed""  220              raise StagerError  221    222  # output stager  223          if samstore:  224              command = ""sam add stager --verbose --pid=""+STAGER_PID+"" --fss=FSS >> $FSSLOG""  225    226              status = commander(command,verbose)  227              if status != 0:  228                  print ""Output Stager Not Added""  229                  raise OutputStagerError  230    231    232  #           command = ""sam dump fss   >> $FSSLOG""  233  #           status = commander(command,verbose)  234  #           if status !=0:  235  #               print ""Output Stager Not Really There""  236  #               raise OutputStagerError  237    238    239    240    241  #------------------------start up the consumer ------------  242    243  #       status = commander(""sam dump project --verbose > /dev/null "",verbose)  244          status = (isProjectThere(analysis_name) == 0)     245     246  #  247  # Now, start and run the actual consumer process  248  #  249  #        os.system(""ls -lrt"")  250    251          RTFILE=disk_area+""/consumer.""+HOST+"".""+USER+"".out""  252          command = ""sam establish process --cid=""+CID+"" --rtfile=""+ RTFILE +"">> $SAMLOG""  253          status = commander(command,verbose)  254     255    256    257          if (status != 0):  258              print ""consumer start failed""  259              print response  260              s = commander(""sam dump project --verbose "",verbose)  261              raise ConsumerError  262    263          response = samresponse(RTFILE)  264    265          CPID = response[1]  266    267    268    269  #-----------------------set up D0 stuff -----------------  270    271    272    273    274          print  "" Reco version will be "" + reco_vers  275    276  # not much going on for now...  277    278    279          while (0==0):  280              userstatus = 'ok'  281              sleep (2)  282  #           status = commander(""sam dump project --verbose > /dev/null "",verbose)  283              status = (isProjectThere(analysis_name) == 0)  284              if(status !=0):  285                  print ""Project has gone away""  286                  raise NoProject  287    288              print"" try a get next file ""  289    290  #Get the file from SAM  291    292              RTFILE=disk_area+""/getnextfile.""+HOST+"".""+USER+"".out""  293              command = ""sam get next file --cpid=""+CPID+"" --rtfile=""+RTFILE+"" >> $SAMLOG""  294              status = commander(command,verbose)  295              if(status != 0):  296                  print ""error on next file""  297                  raise FileDeliveryError  298    299              response = samresponse(RTFILE)  300              print response  301    302              if ((response[0] == ""ERROR"") | (response[0] == """")) :  303                  print ""getnextfile failed""  304                  raise FileDeliveryError  305    306              the_file = response[1]  307                308              print ""The file name is :"" + the_file  309    310              if((the_file == ""ERROR"") | (the_file == ""ERROR"") | (the_file == """")):  311                  raise FileDeliveryError  312    313              if(the_file == ""END""):  314                  print ""Job is done""  315                  raise JobDone  316    317              status = commander(""ls -lrt "" +  the_file,verbose)  318              status = commander(""mv ""+RTFILE+"" lastfile"",verbose)  319     320                321              if(FileExists(the_file) != ""TRUE""):  322                  print ""File ""+the_file+ "" not delivered""  323                  nowtime = time.time()  324                  nowtimestring = time.asctime(time.localtime(nowtime))  325     326                  command = ""echo "" + nowtime+"" "" + HOST + "" "" + the_file + ""not delivered""             327                  commander(command +"" >> $JOBSUM"",verbose)  328                  continue  329    330  #work on file  331    332              status = commander(""ln -s ""+the_file+"" inputfile"",verbose)  333    334    335              localname=FileName(the_file)  336              print "" the local file name is "" + localname  337  #           outputname=""reco.""+localname+""_""+JID+""_""+N+""_""+reco_vers  338              outputname=""reco.""+localname+""_""+reco_vers  339              os.environ['outputfile']=outputname  340    341              FILE_NAME=outputname  342              PARENT=localname  343              TIER=""reconstructed""  344              start=samtimestamp()  345              START_DATE = start[0]  346              START_TIME = start[1]  347              print """"  348              print "" output file will be "" + outputname  349              print """"  350              print "" start reco on file inputfile =""+ the_file  351    352    353  # fake reco  354    355  #           sleep(recotime)  356    357              if(reco):  358                  if(reco_vers != ""preco01.00""):  359                      print "" run runme""  360                      status=commander('csh -vx ./runme',verbose)  361                  else:  362                    363                      status = commander(""./D0reco.x -rcp runD0reco -log reco.log"",verbose)  364              else:  365                  status = 0  366                  print "" faked reco""  367    368                  os.system(""mv inputfile outputfile"")  369    370  # if it fails, save the offending input file  371              outdiskdir = outlogdir  372              if(status != 0):  373                  print ""reco failed""  374                  commander("" cat reco.out "",verbose)  375                  commander("" cat reco.stderr "",verbose)  376                  commander("" cat reco.log "",verbose)  377                  outdiskdir = outlogdir+ ""/badinput""  378                  userstatus = ""RECOFAILURE""  379                  commander(""rcp -p ""+ the_file +"" "" + outdiskdir +""/."",verbose)  380    381              os.system(""mv outputfile ""+outputname)  382              status = commander(""ls -lrt "" + outputname,verbose)  383    384              end=samtimestamp()  385              END_DATE = end[0]  386              END_TIME = end[1]  387              SIZE=FileSize(FILE_NAME)  388              EVENTS=""1""  389  #echo ""meta  $FILE_NAME $SIZE 1 $EVENTS $EVENTS $TIER $START_TIME $END_TIME $PARENT ""  390    391              string = make_descrip_file(FILE_NAME, SIZE,'reco.out', TIER, START_DATE, START_TIME, END_DATE, END_TIME ,PARENT, CPID)   392              metadata=open('metadata.py','w')  393              metadata.write(string)  394              metadata.close()  395              print string  396                397              status = commander(""cat metadata.py"",verbose)  398    399  #           SAM_OUTPUT_DIR=""/pnfs/sam/mammoth/mcc99_1/sim""  400                401    402                403  #            if samstore:  404  #               status = commander(""sam dump fss --verbose >> /dev/null "",verbose)  405    406              print "" about to try to write to ""+outdir+"" from CPID ""+CPID+ "" >> $FSSLOG""  407    408                409              if samstore:  410                  savestatus = 0  411    412                  command = ""sam store --descrip=metadata --source=""+disk_area+"" --dest=""+outdir+"">> $FSSLOG""  413    414                  savestatus = commander(command,verbose)  415    416  #               status = commander(""sam dump fss --verbose >> $FSSLOG"",verbose)  417  # send the data back  418    419                  print ""done with sam store of file""  420    421              else:   422                  savestatus = 0  423                  command = ""rcp -p ""+outputname+"" ""+ outdiskdir  424                  savestatus = commander(command,verbose)  425    426              command = ""rcp -p metadata.py "" + outdiskdir+""/""+outputname+"".meta.py""            427              savestatus = savestatus + commander(command,verbose)  428    429              command = ""rcp -p reco.out "" + outdiskdir +""/logs/"" + outputname + "".outlog""                 430              commander(command,verbose)  431              command = ""rcp -p reco.log "" + outdiskdir +""/logs/"" + outputname + "".errlog""  432              commander(command,verbose)  433              command = ""rcp -p reco.stderr "" + outdiskdir +""/logs/"" + outputname + "".stderr""  434              commander(command,verbose)  435              command = ""rcp -p events.read "" + outdiskdir +""/logs/"" + outputname + "".eventsread""  436              commander(command,verbose)  437              command = ""rcp -p events.write "" + outdiskdir +""/logs/"" + outputname + "".eventswritten""  438              commander(command,verbose)  439    440    441    442              os.system(""rm ""+outputname)  443    444    445              print "" worker output copied back to I/O node from worker ""+N  446    447   #inform SAm that you're done  448              print  "" release the file "" + the_file  449    450              if(savestatus != 0):  451                  userstatus = ""copyfailed""  452    453              command = ""sam release --status=""+userstatus+"" --file=""+the_file+"" --cpid=""+CPID+"" >> $SAMLOG""  454              status = commander(command,verbose)  455              if(status != 0):  456                  raise FileReleaseError  457    458              commander(""rm ""+ the_file,verbose)  459              commander(""rm inputfile"",verbose)  460              os.system(""df"")  461              sleep(10)  462       463              nowtime = time.time()  464              nowtimestring = time.asctime(time.localtime(nowtime))  465     466              command =  ""echo "" + nowtimestring + "" "" + HOST + "" "" + the_file +"" ""+ userstatus  467              commander(command +"" >> $JOBSUM"",verbose)  468    469              print "" end of loop ""  470              print "" end of loop ""  471                472    473              continue  474                475                476  # HMS now don't stop the stager as we will try to keep it going  477    478          print "" all done, DON'T stop stager""  479          status = commander(""sam stop stager  --pid=""+STAGER_PID +"" >> $SAMLOG "",verbose)  480    481          sys.exit(0)  482    483      except NoProject:  484          print ""No project""  485  #       status = commander(""sam stop stager --pid=""+STAGER_PID,verbose)  486          sys.exit(1)  487      except D0ConfigError:  488          print ""Unable to get D0 code""  489          sys.exit(1)  490      except NoContext:  491          print ""No Context File found""  492  #       status = commander(""sam stop stager --pid=""+STAGER_PID,verbose)  493          sys.exit(1)  494    495      except OutputStagerError:  496          print ""Output stager error handling""  497          status = commander(""sam dump project"",verbose)  498          status = commander(""sam stop stager --pid=""+STAGER_PID,verbose)  499          sys.exit(1)  500    501      except FileReleaseError:  502          print ""File release error handling""  503          status = commander(""sam dump project"",verbose)  504          status = commander(""sam stop stager --pid=""+STAGER_PID,verbose)  505          sys.exit(1)  506    507      except FileDeliveryError:  508          print ""File delivery error handling""  509          status = commander(""sam dump project"",verbose)  510          status = commander(""sam stop stager --pid=""+STAGER_PID,verbose)  511          sys.exit(1)  512    513    514      except StagerError:  515          print ""stager error handling""  516          status = commander(""sam dump project"",verbose)  517          status = commander(""sam stop stager  --pid=""+STAGER_PID,verbose)  518          sys.exit(1)  519    520      except JobDone:  521          print ""Job is done""  522          status = commander(""sam dump consumer --cid=""+CID,verbose)  523          if(status !=0):  524              print ""tried to dump project at end of job but failed""  525          status = commander(""sam stop stager --pid=""+STAGER_PID,verbose)  526          sys.exit(0)  527            528    529  if __name__ == '__main__':  530      if len(sys.argv) != 9:  531          print ' wrong argument list:', sys.argv  532          sys.exit(1)  533      worker_control(sys.argv[1],sys.argv[2],sys.argv[3],sys.argv[4],sys.argv[5],sys.argv[6],sys.argv[7],sys.argv[8])        ~  [   source navigation   ]  ~  [   diff markup   ]  ~  [   identifier search   ]  ~  [   freetext search   ]  ~  [   file search   ]  ~      This page was automatically generated by the   LXR engine .   Visit the  LXR main site  for more information."
GX000-24-14067779	[   source navigation   ]   [   identifier search   ]   [   freetext search   ]   [   file search   ]   [   repository   ]         Software     Cross Reference                       Version:      [   current   ]            Search for files using regular expressions   Find file:                  [   source navigation   ]   [   identifier search   ]   [   freetext search   ]   [   file search   ]   [   repository   ]       This page was automatically generated by the   LXR engine . Visit the  LXR main site  for more information.   This version by  Torre Wenaus .
GX144-78-7143692	"[   source navigation   ]   [   identifier search   ]   [   freetext search   ]   [   file search   ]   [   repository   ]         Software     Cross Reference            . / atlas / graphics / ObjectBrowser / src / net / hep / graphics / ObjectBrowser / Browser / SortVector.java             Version:      [   current   ]           File /home/lxr/source/current//atlas/graphics/ObjectBrowser/src/net/hep/graphics/ObjectBrowser/Browser/SortVector.java     1   package  net.hep.graphics.ObjectBrowser.Browser;    2      3   // Java     4   import  java. util .Comparator;    5   import  java. util . Vector ;    6      7   /** @version 1.0.0     8     * @author L.Cunha     9     * @author L.Tuura    10     * @author <a href=""mailto:Julius.Hrivnac@cern.ch"">J.Hrivnac</a> */    11   class  SortVector {   12     13     private   Vector  m_vector;   14     private   String [] m_strings;   15     16     public  SortVector( Vector  aVector) {   17      m_vector = aVector;   18      m_strings =  new   String [m_vector. size ()];   19      }   20     21     public   void  sortvector() {   22      Comparator comp =  new  Comparator() {   23                           public   int   compare ( Object  a,  Object  b) {   24                             return  (( String )a).compareToIgnoreCase(( String ) b);   25                            }   26                          };   27      m_vector.copyInto(m_strings);   28      java. util .Arrays. sort (m_strings, comp);   29      }   30     31     public   Vector  solution() {   32       // Reset m_vector to build it again    33       m_vector. clear ();   34       for  ( int  j = 0; j < m_strings. length ; j++) {   35        m_vector. add (m_strings[j]);   36        }   37       return  m_vector;   38      }   39         40    }   41     42              [   source navigation   ]   [   identifier search   ]   [   freetext search   ]   [   file search   ]   [   repository   ]       This page was automatically generated by the   LXR engine . Visit the  LXR main site  for more information.   This version by  Torre Wenaus ."
GX064-16-12579993	[   source navigation   ]   [   identifier search   ]   [   freetext search   ]   [   file search   ]   [   repository   ]         Software     Cross Reference            . / atlas / graphics / Aravis / Aravis / AravisArc.h             Version:      [   current   ]           File /home/lxr/source/current//atlas/graphics/Aravis/Aravis/AravisArc.h     1   /***************************************************************************     2    Graphics primitive for Aravis.     3    ------------------------------     4    ATLAS Collaboration     5    ***************************************************************************/     6      7   // $Id:     8       9  #ifndef  ARAVIS_ARAVISARC_H    10  #  define   ARAVIS_ARAVISARC_H    11     12   //<<<<<< INCLUDES                                                       >>>>>>    13      14  #include  <Aravis/AravisPlottableRep.h>> >   15  #include  <CLHEP/Geometry/Transform3D.h>> >   16  #include  <Aravis/GraphicsVector.h>> >   17  #include  <vector>> >   18     19   //<<<<<< PUBLIC DEFINES                                                 >>>>>>    20   //<<<<<< PUBLIC CONSTANTS                                               >>>>>>    21   //<<<<<< PUBLIC TYPES                                                   >>>>>>    22   //<<<<<< PUBLIC VARIABLES                                               >>>>>>    23   //<<<<<< PUBLIC FUNCTIONS                                               >>>>>>    24   //<<<<<< CLASS DECLARATIONS                                             >>>>>>    25      26     27   class   AravisArc :  public   AravisPlottableRep    28  {   29       // The arc segment is assumed to be in the xy plane with an axis    30        // perpendicular to this plane oriented with its axis along the  Z axis,     31        // and its centre  at the origin. One end of the arc is assumed to be at    32        // phi=0 and the other end at a value delta_phi measured anticlockwise     33        // from the x-axis.    34        // The transform specifies how     35        // the arc is to be placed in its final position by rotation and     36        // translation,    37        // Arguments to constructor are:    38        // the radius of the arc    39        // delta_phi    40        // the transform.    41        // The second constructor allows the caller to specify the number of     42        // points to be drawn on the arc. The first constructor assumes         43        // that the arc will be approximated with 25*delta_phi/MPI  points.    44       45   public :   46         47       AravisArc ( const   double   radius ,  const   double   delta_phi ,    48                      const   HepTransform3D &  position );   49     50       AravisArc ( const   double   radius ,  const   double   delta_phi ,     51                      const   HepTransform3D &  position ,  const   int   npoints );   52         53       ~AravisArc ();   54         55       virtual   void   draw ();   56     57   private :   58       void   make_arc ( const   double   radius ,  const   double   delta_phi ,    59                          const   HepTransform3D &  position );   60                                   // To work out the points for drawing the    61                                    // arc.    62        int  m_npoints;               // Number of points to approximate arc    63        std :: vector < GraphicsVector > m_points;   64  };   65     66     67  #endif  // ARAVIS_ARAVISARC_H    68              [   source navigation   ]   [   identifier search   ]   [   freetext search   ]   [   file search   ]   [   repository   ]       This page was automatically generated by the   LXR engine . Visit the  LXR main site  for more information.   This version by  Torre Wenaus .
GX043-70-1444710	NCBI Home       IEB Home       C++ Toolkit docs       C Toolkit source browser       C Toolkit source browser (2)               NCBI C++ Toolkit Cross Reference       C++ / src / gui / print / print_dlg.fl                  source navigation    diff markup    identifier search    freetext search    file search                   1  # data file for the Fltk User Interface Designer (fluid)    2  version 1.0104     3  do_not_include_H_from_C     4  header_name {../../../include/gui/print/print_dlg_.hpp}     5  code_name {print_dlg_.cpp}    6  class NCBI_GUIUTILS_EXPORT CPrintDlg {open selected : {public CDialog}    7  } {    8    decl {CPrintDlg();} {public    9    }   10    decl {CPrintDlg(const CPrintOptions& options);} {public   11    }   12    decl {void Init(void);} {public   13    }   14    decl {const CPrintOptions& GetOptions(void) const;} {public   15    }   16    Function {x_Create(void)} {} {   17      Fl_Window {} {   18        label Print open   19        private xywh {504 158 465 216} type Double visible   20      } {   21        Fl_Group {} {   22          label {Output Location} open   23          xywh {5 10 455 105} box ENGRAVED_FRAME align 21   24        } {   25          Fl_Round_Button m_LocationPrint {   26            label Printer   27            callback {x_OnSelectPrint();}   28            private xywh {20 40 65 25} type Radio down_box ROUND_DOWN_BOX   29          }   30          Fl_Round_Button m_LocationFile {   31            label File   32            callback {x_OnSelectFile();}   33            private xywh {20 80 65 25} type Radio down_box ROUND_DOWN_BOX value 1   34          }   35          Fl_File_Input m_Filename {   36            private xywh {90 70 280 35}   37          }   38          Fl_Button {} {   39            label {Browse...}   40            callback {x_OnBrowse();}   41            xywh {375 80 75 25}   42          }   43        }   44        Fl_Group {} {   45          label {Output Format} open   46          xywh {5 120 455 60} box ENGRAVED_FRAME align 21   47        } {   48          Fl_Choice m_Format {open   49            private xywh {90 145 280 25} down_box BORDER_BOX when 3 resizable   50          } {   51            menuitem m_Pdf {   52              label {Portable Document Format (PDF)}   53              user_data m_Pdf user_data_type {Fl_Menu_Item*}   54              private xywh {15 15 100 20}   55            }   56            menuitem m_Postscript {   57              label Postscript   58              user_data m_Postscript user_data_type {Fl_Menu_Item*}   59              private xywh {5 5 100 20} deactivate   60            }   61            menuitem m_Svg {   62              label {Scalable Vector Graphic (SVG)}   63              user_data m_Svg user_data_type {Fl_Menu_Item*}   64              private xywh {25 25 100 20} deactivate   65            }   66          }   67        }   68        Fl_Group Buttons {   69          xywh {5 185 455 25}   70        } {   71          Fl_Return_Button {} {   72            label OK   73            callback {x_OnOK();}   74            xywh {380 185 80 25}   75          }   76          Fl_Button {} {   77            label Cancel   78            callback {x_OnCancel();}   79            xywh {295 185 80 25}   80          }   81          Fl_Button {} {   82            label Options   83            callback {x_OnOptions();}   84            xywh {210 185 80 25}   85          }   86          Fl_Group {} {open   87            xywh {5 185 205 25} resizable   88          } {}   89        }   90      }   91    }   92    decl {CPrintOptions m_Options;} {}   93    decl {void x_OnOK(void);} {}   94    decl {void x_OnBrowse(void);} {}   95    decl {void x_OnSelectFormat(const Fl_Menu_Item* item);} {}   96    decl {void x_OnSelectPrint(void);} {}   97    decl {void x_OnSelectFile(void);} {}   98    decl {void x_OnOptions(void);} {}   99    decl {void x_UpdateOptions(void);} {}  100  }         [  source navigation  ]    [  diff markup  ]    [  identifier search  ]    [  freetext search  ]    [  file search  ]                                    This page was automatically generated by the         LXR engine .               Visit the  LXR main site  for more       information.
