<?xml version='1.0' encoding='UTF-8'?>
<search_results><query id="7478">protect kids online</query><engine status="OK" timestamp="2014-04-20 18:23:13" name="CiteSeerX" id="FW14-e004"/><snippets><snippet id="FW14-e004-7478-01"><link cache="FW14-topics-docs/e004/7478_01.html" timestamp="2014-04-20 18:23:14">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.126.9257&amp;rank=1</link><title>The Protection of Information in Computer Systems</title><description>The Protection of Information in Computer Systems

by Jerome H. Saltzer, Michael D. Schroeder , 1975

"... ﻿The Protection of Information in Computer Systems Abstract About this paper JEROME H. SALTZER ..."

Abstract \- Cited by 618 (2 self) \- Add to MetaCart

This tutorial paper explores the mechanics of &lt;em&gt;protecting&lt;/em&gt; computer-stored information from</description></snippet><snippet id="FW14-e004-7478-02"><link cache="FW14-topics-docs/e004/7478_02.html" timestamp="2014-04-20 18:24:43">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.47.6145&amp;rank=2</link><title>A Sense of Self for Unix Processes</title><description>A Sense of Self for Unix Processes

by Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, Thomas A. Longstaff \- In Proceedings of the 1996 IEEE Symposium on Security and Privacy , 1996

"... of identity and protection than those afforded by current operating systems, and they could provide a layer ..."

Abstract \- Cited by 530 (27 self) \- Add to MetaCart

and &lt;em&gt;protection&lt;/em&gt; than those afforded by current operating systems, and they could provide a layer of general</description></snippet><snippet id="FW14-e004-7478-03"><link cache="FW14-topics-docs/e004/7478_03.html" timestamp="2014-04-20 18:25:38">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.136.4322&amp;rank=3</link><title>GroupLens: An Open Architecture for Collaborative Filtering of Netnews</title><description>GroupLens: An Open Architecture for Collaborative Filtering of Netnews

by Paul Resnick, Neophytos Iacovou, Mitesh Suchak, Peter Bergstrom, John Riedl , 1994

"... on the heuristic that people who agreed in the past will probably agree again. Users can protect their privacy ..."

Abstract \- Cited by 1114 (33 self) \- Add to MetaCart

in the past will probably agree again. Users can &lt;em&gt;protect&lt;/em&gt; their privacy by entering ratings under pseudonyms</description></snippet><snippet id="FW14-e004-7478-04"><link cache="FW14-topics-docs/e004/7478_04.html" timestamp="2014-04-20 18:26:18">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.334.378&amp;rank=4</link><title>Is it an Agent, or just a Program?: A Taxonomy for Autonomous Agents</title><description>Is it an Agent, or just a Program?: A Taxonomy for Autonomous Agents

by Stan Franklin, Art Graesser \- In Intelligent Agents III , 1997

"... at definitions come from an online white paper by Sankar Virdhagriswaran of Crystaliz, Inc.,defining mobile agent ..."

Abstract \- Cited by 558 (26 self) \- Add to MetaCart

The advent of software agents gave rise to much discussion of just what such an agent is, and of how they differ from programs in general. Here we propose a formal definition of an autonomous agent which clearly distinguishes a software agent from just any program. We also offer the beginnings of a natural kinds taxonomy of autonomous agents, and discuss possibilities for further classification. Finally, we discuss subagents and multiagent systems.</description></snippet><snippet id="FW14-e004-7478-05"><link cache="FW14-topics-docs/e004/7478_05.html" timestamp="2014-04-20 18:30:09">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.17.1073&amp;rank=5</link><title>The Sybil Attack</title><description>The Sybil Attack

by John Douceur, Judith S. Donath , 2002

"... to protect against integrity violations (data loss). Others [5, 6, 7, 16, 28] fragment tasks among several ..."

Abstract \- Cited by 1122 (1 self) \- Add to MetaCart

Large-scale peer-to-peer systems face security threats from faulty or hostile remote computing elements. To resist these threats, many such systems employ redundancy. However, if a single faulty entity can present multiple identities, it can control a substantial fraction of the system, thereby undermining this redundancy. One approach to preventing these "Sybil attacks" is to have a trusted agency certify identities. This paper shows that, without a logically centralized authority, Sybil attacks are always possible except under extreme and unrealistic assumptions of resource parity and coordination among entities.</description></snippet><snippet id="FW14-e004-7478-06"><link cache="FW14-topics-docs/e004/7478_06.html" timestamp="2014-04-20 18:32:56">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.337.3070&amp;rank=6</link><title>Why Do Some Countries Produce So Much More Output Than Others? Quarterly</title><description>Why Do Some Countries Produce So Much More Output Than Others? Quarterly

by Robert E. Hall, Charles, I. Jones \- Journal of Economics , 1999

"... to list for an outpouring of helpful commentary. Data used in the paper are available online from http ..."

Abstract \- Cited by 935 (15 self) \- Add to MetaCart

Output per worker varies enormously across countries. Why? On an accounting basis our analysis shows that differences in physical capital and educational attainment can only partially explain the variation in output per worker—we find a large amount of variation in the level of the Solow residual across countries. At a deeper level, we document that the differences in capital accumulation, productivity, and therefore output per worker are driven by differences in institutions and government policies, which we call social infrastructure. We treat social infrastructure as endogenous, determined historically by location and other factors captured in part by language. I.</description></snippet><snippet id="FW14-e004-7478-07"><link cache="FW14-topics-docs/e004/7478_07.html" timestamp="2014-04-20 18:33:23">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.116.8880&amp;rank=7</link><title>Bro: A System for Detecting Network Intruders in Real-Time</title><description>Bro: A System for Detecting Network Intruders in Real-Time

by Vern Paxson \- Computer Networks , 1999

"... on audit information gathered by the hosts in the network they are trying to protect, and those ..."

Abstract \- Cited by 686 (37 self) \- Add to MetaCart

Abstract not found</description></snippet><snippet id="FW14-e004-7478-08"><link cache="FW14-topics-docs/e004/7478_08.html" timestamp="2014-04-20 18:36:40">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.11.4846&amp;rank=8</link><title>The EigenTrust Algorithm for Reputation Management in P2P Networks</title><description>The EigenTrust Algorithm for Reputation Management in P2P Networks

by Sepandar D. Kamvar, Mario T. Schlosser, Hector Garcia-molina \- in Proceedings of the 12th International World Wide Web Conference (WWW 2003 , 2003

"... and protection] General Terms P2P Keywords Peer-to-Peer, trust, distributed eigenvector computation 1 ..."

Abstract \- Cited by 703 (21 self) \- Add to MetaCart

Peer-to-peer file-sharing networks are currently receiving much attention as a means of sharing and distributing information. However, as recent experience with P2P networks such as Gnutella shows, the anonymous, open nature of these networks offers an almost ideal environment for the spread of self-replicating inauthentic files.</description></snippet><snippet id="FW14-e004-7478-09"><link cache="FW14-topics-docs/e004/7478_09.html" timestamp="2014-04-20 18:38:29">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.95.3585&amp;rank=9</link><title>Dynamically discovering likely program invariants to support program evolution</title><description>Dynamically discovering likely program invariants to support program evolution

by Michael D. Ernst, Jake Cockrelit, William G. Griswoldt, David Notkint \- IEEE Transactions on Software Engineering , 2001

"... an equally critical role in software evolution. In particular, invariants can protect a programmer from ..."

Abstract \- Cited by 544 (66 self) \- Add to MetaCart

Explicitly stated program invariants can help programmers by identifying program properties that must be preserved when modifying code. In practice, however, these invari-ants are usually implicit. An alternative to expecting pro-grammers to fully annotate code with invariants is to au-tomatically infer invariants from the program itself. This research focuses on dynamic techniques for discovering in-variants from execution traces. This paper reports two results. First, it describes techniques for dynamically discovering invariants, along with an instru-menter and an inference engine that embody these tech-niques. Second, it reports on the application of the engine to two sets of target programs. In programs from Gries’s work on program derivation, we rediscovered predefined in-variants. In a C program lacking explicit invariants, we dis-covered invariants that assisted a software evolution task.</description></snippet><snippet id="FW14-e004-7478-10"><link cache="FW14-topics-docs/e004/7478_10.html" timestamp="2014-04-20 18:38:50">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=481E007D40927B21A510E7DC41FA12A3?doi=10.1.1.114.9535&amp;rank=10</link><title>A Fast File System for UNIX</title><description>A Fast File System for UNIX

by Marshall Kirk Mckusick, William N. Joy, Samuel J. Leffler, Robert S. Fabry \- ACM Transactions on Computer Systems , 1984

"... system’s disk partition. Because the super-block contains critical data, it is replicated to protect ..."

Abstract \- Cited by 507 (5 self) \- Add to MetaCart

A reimplementation of the UNIX file system is described. The reimplementation provides substantially higher throughput rates by using more flexible allocation policies that allow better locality of reference and can be adapted to a wide range of peripheral and processor characteristics. The new file system clusters data that is sequentially accessed and provides two block sizes to allow fast access to large files while not wasting large amounts of space for small files. File access rates of up to ten times faster than the traditional UNIX file system are experienced. Long needed enhancements to the programmers’ interface are discussed. These include a mechanism to place advisory locks on files, extensions of the name space across file systems, the ability to use long file names, and provisions for administrative control of resource usage.</description></snippet></snippets></search_results>