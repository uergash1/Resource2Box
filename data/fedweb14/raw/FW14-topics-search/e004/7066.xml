<?xml version='1.0' encoding='UTF-8'?>
<search_results><query id="7066">awk trim non-printable characters</query><engine status="OK" timestamp="2014-04-19 00:27:26" name="CiteSeerX" id="FW14-e004"/><snippets><snippet id="FW14-e004-7066-01"><link cache="FW14-topics-docs/e004/7066_01.html" timestamp="2014-04-19 00:27:30">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.32.7648&amp;rank=1</link><title>An Empirical Study of the Reliability of UNIX Utilities</title><description>An Empirical Study of the Reliability of UNIX Utilities

by Barton P. Miller, Lars Fredriksen, Bryan So \- In Proceedings of the Workshop of Parallel and Distributed Debugging , 1990

"... were including non-printable (control) characters, including the NULL (zero) byte, and maximum length ..."

Abstract \- Cited by 196 (4 self) \- Add to MetaCart

This report describes these tests and an analysis of the program bugs that caused the crashes. Content Indicators D.2.5 (Testing and Debugging), D.4.9 (Programs and Utilities), General term: reliability, UNIX. ####################################</description></snippet><snippet id="FW14-e004-7066-02"><link cache="FW14-topics-docs/e004/7066_02.html" timestamp="2014-04-19 00:28:21">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.29.8615&amp;rank=2</link><title>Lightweight Structured Text Processing</title><description>Lightweight Structured Text Processing

by Robert C. Miller, Brad A. Myers \- In Proc. of USENIX 1999 Annual Technical Conference , 1999

"... assume that a text file is divided into records separated by newlines (or some other delimiter character ..."

Abstract \- Cited by 24 (8 self) \- Add to MetaCart

Text is a popular storage and distribution format for information, partly due to generic text-processing tools like Unix grep and sort. Unfortunately, existing generic tools make assumptions about text format (e.g., each line is a record) that limit their applicability. Custom-built tools are one alternative, but they require substantial time investment and programming expertise. We describe a new approach, lightweight structured text processing, which overcomes these difficulties by enabling users to define text structure interactively and manipulate the structure with generic tools. Our prototype system, LAPIS, is a web browser that can highlight, filter, and sort text regions described by the user. LAPIS has several advantages over other systems: (1) the ability to define custom structure with a simple, intuitive pattern language; (2) interactive specification, showing pattern matches in context and letting users choose the most convenient combination of manual selection and patter...</description></snippet><snippet id="FW14-e004-7066-03"><link cache="FW14-topics-docs/e004/7066_03.html" timestamp="2014-04-19 00:29:30">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.363.708&amp;rank=3</link><title>An empirical study of the robustness of macos applications using random testing</title><description>An empirical study of the robustness of macos applications using random testing

by Barton P. Miller, Gregory Cooksey, Fredrick Moore \- In Proceedings of the 1st international workshop on Random testing , 2006

"... characters; non-printable characters can cause sign-bit problems in variables of type char. A number ..."

Abstract \- Cited by 12 (0 self) \- Add to MetaCart

We report on the fourth in a series of studies on the reliability of application programs in the face of random input. Over the previous 15 years, we have studied the reliability of UNIX command line and X-Window based (GUI) applications and Windows applications. In this study, we apply our fuzz testing techniques to applications running on the Mac OS X operating system. We continue to use a simple, or even simplistic technique: unstructured black-box random testing, considering a failure to be a crash or hang. As in the previous three studies, the technique is crude but seems to be effective in locating bugs in real programs. We tested the reliability of 135 command-line UNIX utilities and thirty graphical applications on Mac OS X by feeding random input to each. We report on application failures – crashes (dumps core) or hangs (loops indefinitely) – and, where source code is available, we identify the causes of these failures and categorize them. Our testing crashed only 7 % of the command-line utilities, a considerably lower rate of failure than observed in almost all cases of previous studies. We found the GUI-based applications to be less reliable: of the thirty that we tested, only eight did not crash or hang. Twenty others crashed, and two hung. These GUI results were noticeably worse than either of the previous Windows (Win32) or UNIX (X-Windows) studies.</description></snippet><snippet id="FW14-e004-7066-04"><link cache="FW14-topics-docs/e004/7066_04.html" timestamp="2014-04-19 00:30:33">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.119.40&amp;rank=4</link><title>Workshop summary</title><description>Workshop summary

by Barton P. Miller, Lars Fredriksen \- In Proceedings of the Workshop of Parallel and Distributed Debugging , 1988

"... variations in test data were including non-printable (control) characters, including the NULL (zero) byte ..."

Abstract \- Cited by 4 (0 self) \- Add to MetaCart

Operating system facilities, such as the kernel and utility programs, are typically assumed to be reliable. In our recent experiments, we have been able to crash 25-33 % of the utility programs on any version of UNIX that was tested. This report describes these tests and an analysis of the program bugs that caused the crashes. Content Indicators D.2.5 (Testing and Debugging), D.4.9 (Programs and Utilities), General term: reliability, UNIX.</description></snippet><snippet id="FW14-e004-7066-05"><link cache="FW14-topics-docs/e004/7066_05.html" timestamp="2014-04-19 00:31:44">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.420.7078&amp;rank=5</link><title>A Survey of Some of the Most Useful SAS ® Functions</title><description>A Survey of Some of the Most Useful SAS ® Functions

by Ron Cody, Camp Verde

"... and throw away all the rest. This is especially useful when your string contains non-printable characters ..."

Abstract \- Add to MetaCart

SAS Functions provide amazing power to your DATA step programming. Some of these functions are essential— some of them save you writing volumes of unnecessary code. This paper covers some of the most useful SAS functions. Some of these functions may be new to you and they will change the way you program and approach common programming tasks.</description></snippet><snippet id="FW14-e004-7066-06"><link cache="FW14-topics-docs/e004/7066_06.html" timestamp="2014-04-19 00:32:50">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.6.7725&amp;rank=6</link><title>Discovering Thread Interactions in a Concurrent System</title><description>Discovering Thread Interactions in a Concurrent System

by Jonathan E. Cook, Zhidian Du \- Journal of Systems and Software , 2002

"... weighted non-printed edge, and proceeds from there. Each clique is given a weight that is the average ..."

Abstract \- Cited by 6 (1 self) \- Add to MetaCart

Understanding the behavior of a system is a central reverse engineering task, and is crucial for being able to modify, maintain, and improve the system. An often dicult aspect of some system behaviors is concurrency, in particular identifying those areas that exhibit mutual exclusion and those that exhibit synchronization. In this paper we present a technique that builds on our previous work in behavior discovery to nd the points in the system that demonstrate mutually exclusive and synchronized behavior. Finding these points in the behavior of the system is an important aid in reverse engineering a complete and correct model of the system.</description></snippet><snippet id="FW14-e004-7066-07"><link cache="FW14-topics-docs/e004/7066_07.html" timestamp="2014-04-19 00:33:42">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.395.6406&amp;rank=7</link><title>Some Direct Evidence from the Dispersion in Borrowing Costs</title><description>Some Direct Evidence from the Dispersion in Borrowing Costs

by Simon Gilchrist, Jae W. Sim, Egon Zakrajsek, Simon Gilchrist, Jae W. Sim , 2011

"... be cleared with the author(s) to protect the tentative character of these papers.Misallocation and Financial ..."

Abstract \- Add to MetaCart

acknowledgement) should be cleared with the author(s) to protect the tentative &lt;em&gt;character&lt;/em&gt; of these papers</description></snippet><snippet id="FW14-e004-7066-08"><link cache="FW14-topics-docs/e004/7066_08.html" timestamp="2014-04-19 00:34:44">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.394.3561&amp;rank=8</link><title>Author Retains Full Rights</title><description>Author Retains Full Rights

by unknown authors

"... or otherwise non-printable characters. The output of the command is definitely more rewarding: file avira ..."

Abstract \- Add to MetaCart

This paper is taken from the GIAC directory of certified professionals. Reposting is not permited without express written permission. Interested in learning more? Check out the list of upcoming events offering</description></snippet><snippet id="FW14-e004-7066-09"><link cache="FW14-topics-docs/e004/7066_09.html" timestamp="2014-04-19 00:35:45">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.229.3273&amp;rank=9</link><title>Prof. Dr. H.-G. HegeringTable of Contents</title><description>Prof. Dr. H.-G. HegeringTable of Contents

by Johann Hacker

"... into a 64character alphabet. Each of these 64 characters is printable. Binary files contain non-printable ..."

Abstract \- Add to MetaCart

Filesystem encoding by the use of</description></snippet><snippet id="FW14-e004-7066-10"><link cache="FW14-topics-docs/e004/7066_10.html" timestamp="2014-04-19 00:36:52">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=33D0B30C21BBB431D704BB57EEE70207?doi=10.1.1.226.5500&amp;rank=10</link><title>SAS ® Reference</title><description>SAS ® Reference

by unknown authors

"... not support using hexadecimal values to specify non-printable characters. 4 When you use a macro facility name ..."

Abstract \- Add to MetaCart

For a hard-copy book: No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, photocopying, or otherwise, without the prior written permission of the publisher, SAS Institute Inc. For a Web download or e-book: Your use of this publication shall be governed by the terms established by the vendor at the time you acquire this publication. U.S. Government Restricted Rights Notice. Use, duplication, or disclosure of this software and related documentation by the U.S. government is subject to the Agreement with SAS Institute and the restrictions set forth in FAR 52.227-19 Commercial Computer Software-Restricted Rights (June 1987).</description></snippet></snippets></search_results>