<?xml version='1.0' encoding='UTF-8'?>
<search_results><query id="7474">php convert special symbols to html</query><engine status="OK" timestamp="2014-04-20 16:48:22" name="CiteSeerX" id="FW14-e004"/><snippets><snippet id="FW14-e004-7474-01"><link cache="FW14-topics-docs/e004/7474_01.html" timestamp="2014-04-20 16:48:27">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.112.4293&amp;rank=1</link><title>Space-time codes for high data rate wireless communication: Performance criterion and code construction</title><description>Space-time codes for high data rate wireless communication: Performance criterion and code construction

by Vahid Tarokh, Nambi Seshadri, Senior Member, A. R. Calderbank \- IEEE Trans. Inform. Theory , 1998

"... complexity. Simulation results are provided for 4 and 8 PSK signal sets with data rates of 2 and 3 bits/symbol ..."

Abstract \- Cited by 1225 (25 self) \- Add to MetaCart

for 4 and 8 PSK signal sets with data rates of 2 and 3 bits/&lt;em&gt;symbol&lt;/em&gt;, demonstrating excellent performance</description></snippet><snippet id="FW14-e004-7474-02"><link cache="FW14-topics-docs/e004/7474_02.html" timestamp="2014-04-20 16:49:31">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.132.7760&amp;rank=2</link><title>Learning to predict by the methods of temporal differences</title><description>Learning to predict by the methods of temporal differences

by Richard S. Sutton \- MACHINE LEARNING , 1988

"... functions Abstract. This article introduces a class of incremental learning procedures specialized ..."

Abstract \- Cited by 1226 (45 self) \- Add to MetaCart

This article introduces a class of incremental learning procedures &lt;em&gt;specialized&lt;/em&gt; for prediction</description></snippet><snippet id="FW14-e004-7474-03"><link cache="FW14-topics-docs/e004/7474_03.html" timestamp="2014-04-20 16:51:57">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.194.8080&amp;rank=3</link><title>Theory of the Firm: Managerial Behavior, Agency Costs and Ownership Structure</title><description>Theory of the Firm: Managerial Behavior, Agency Costs and Ownership Structure

by Michael C. Jensen, William H. Meckling , 1976

"... of the factors influencing the creation and issuance of debt and equity claims is a special case of the supply ..."

Abstract \- Cited by 898 (5 self) \- Add to MetaCart

&lt;em&gt;special&lt;/em&gt; case of the supply side of the completeness of markets problem.</description></snippet><snippet id="FW14-e004-7474-04"><link cache="FW14-topics-docs/e004/7474_04.html" timestamp="2014-04-20 16:56:20">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.29.1776&amp;rank=4</link><title>Formal Ontology and Information Systems</title><description>Formal Ontology and Information Systems

by Nicola Guarino , 1998

"... the proceedings of the LEGONTâ€™97 workshop at http://www.csc.liv.ac.uk/~pepijn/legont.html 3 See the forthcoming ..."

Abstract \- Cited by 594 (10 self) \- Add to MetaCart

Research on ontology is becoming increasingly widespread in the computer science community, and its importance is being recognized in a multiplicity of research fields and application areas, including knowledge engineering, database design and integration, information retrieval and extraction. We shall use the generic term information systems, in its broadest sense, to collectively refer to these application perspectives. We argue in this paper that so-called ontologies present their own methodological and architectural peculiarities: on the methodological side, their main peculiarity is the adoption of a highly interdisciplinary approach, while on the architectural side the most interesting aspect is the centrality of the role they can play in an information system, leading to the perspective of ontology-driven information systems.</description></snippet><snippet id="FW14-e004-7474-05"><link cache="FW14-topics-docs/e004/7474_05.html" timestamp="2014-04-20 16:59:06">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.134.208&amp;rank=5</link><title>Multiscalar Processors</title><description>Multiscalar Processors

by Gurindar S. Sohi, Scott E. Breach, T. N. Vijaykumar \- In Proceedings of the 22nd Annual International Symposium on Computer Architecture , 1995

"... .50 414 ILP processors and compilers typically convert the total ordering of instructions as they appear ..."

Abstract \- Cited by 516 (28 self) \- Add to MetaCart

Multiscalar processors use a new, aggressive implementation paradigm for extracting large quantities of instruction level parallelism from ordinary high level language programs. A single program is divided into a collection of tasks by a combination of software and hardware. The tasks are distributed to a number of parallel processing units which reside within a processor complex. Each of these units fetches and executes instructions belonging to its assigned task. The appearance of a single logical register file is maintained with a copy in each parallel processing unit. Register results are dynamically routed among the many parallel pro-cessing units with the help of compiler-generated masks. Memory accesses may occur speculatively without knowledge of preceding loads or stores. Addresses are disambiguated dynamically, many in parallel, and processing waits only for true data dependence. This paper presents the philosophy of the multi scalar paradigm, the structure of multiscalar programs, and the hardware architecture of a multiscalar processor. The paper also discusses performance issues in the mttltiscalar model. and compares the multiscalar paradigm with other paradigms. Experimental results evaluating the performance of a sample of multiscalar organizations are also presented. 1.</description></snippet><snippet id="FW14-e004-7474-06"><link cache="FW14-topics-docs/e004/7474_06.html" timestamp="2014-04-20 17:01:34">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.15.3043&amp;rank=6</link><title>Inductive-Data-Type Systems</title><description>Inductive-Data-Type Systems

by Frederic Blanqui, Jean-Pierre Jouannaud, Mitsuhiro Okada , 2002

"... recursive rules of higher type and additional function symbols (completely) de ned by appropriate higher ..."

Abstract \- Cited by 755 (22 self) \- Add to MetaCart

In a previous work ("Abstract Data Type Systems", TCS 173(2), 1997), the leI two authors presented a combined lmbined made of a (strongl normal3zG9 alrmal rewrite system and a typed #-calA#Ik enriched by pattern-matching definitions folnitio a certain format,calat the "General Schema", whichgeneral39I theusual recursor definitions fornatural numbers and simil9 "basic inductive types". This combined lmbined was shown to bestrongl normalIk39f The purpose of this paper is toreformul33 and extend theGeneral Schema in order to make it easil extensibl3 to capture a more general cler of inductive types, cals, "strictly positive", and to ease the strong normalgAg9Ik proof of theresulGGg system. Thisresul provides a computation model for the combination of anal"DAfGI specification language based on abstract data types and of astrongl typed functional language with strictly positive inductive types.</description></snippet><snippet id="FW14-e004-7474-07"><link cache="FW14-topics-docs/e004/7474_07.html" timestamp="2014-04-20 17:02:59">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.109.4049&amp;rank=7</link><title>The Anatomy of a Large-Scale Hypertextual Web Search Engine</title><description>The Anatomy of a Large-Scale Hypertextual Web Search Engine

by Sergey Brin, Lawrence Page \- COMPUTER NETWORKS AND ISDN SYSTEMS , 1998

"... that the cost to index and store text or HTML will eventually decline relative to the amount ..."

Abstract \- Cited by 3234 (4 self) \- Add to MetaCart

In this paper, we present Google, a prototype of a large-scale search engine which makes heavy use of the structure present in hypertext. Google is designed to crawl and index the Web efficiently and produce much more satisfying search results than existing systems. The prototype with a full text and hyperlink database of at least 24 million pages is available at http://google.stanford.edu/ To engineer a search engine is a challenging task. Search engines index tens to hundreds of millions of web pages involving a comparable number of distinct terms. They answer tens of millions of queries every day. Despite the importance of large-scale search engines on the web, very little academic research has been done on them. Furthermore, due to rapid advance in technology and web proliferation, creating a web search engine today is very different from three years ago. This paper provides an in-depth description of our large-scale web search engine -- the first such detailed public description we know of to date. Apart from the problems of scaling traditional search techniques to data of this magnitude, there are new technical challenges involved with using the additional information present in hypertext to produce better search results. This paper addresses this question of how to build a practical large-scale system which can exploit the additional information present in hypertext. Also we look at the problem of how to effectively deal with uncontrolled hypertext collections where anyone can publish anything they want.</description></snippet><snippet id="FW14-e004-7474-08"><link cache="FW14-topics-docs/e004/7474_08.html" timestamp="2014-04-20 17:05:57">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.117.695&amp;rank=8</link><title>On understanding types, data abstraction, and polymorphism</title><description>On understanding types, data abstraction, and polymorphism

by Luca Cardelli, Peter Wegner \- ACM COMPUTING SURVEYS , 1985

"... . Types are associated with constants, operators, variables, and function symbols. A type inference system ..."

Abstract \- Cited by 756 (15 self) \- Add to MetaCart

Our objective is to understand the notion of type in programming languages, present a model of typed, polymorphic programming languages that reflects recent research in type theory, and examine the relevance of recent research to the design of practical programming languages. Object-oriented languages provide both a framework and a motivation for exploring the interaction among the concepts of type, data abstraction, and polymorphism, since they extend the notion of type to data abstraction and since type inheritance is an important form of polymorphism. We develop a Î»-calculus-based model for type systems that allows us to explore these interactions in a simple setting, unencumbered by complexities of production programming languages. The evolution of languages from untyped universes to monomorphic and then polymorphic type systems is reviewed. Mechanisms for polymorphism such as overloading, coercion, subtyping, and parameterization are examined. A unifying framework for polymorphic type systems is developed in terms of the typed Î»-calculus augmented to include binding of types by quantification as well as binding of values by abstraction. The typed Î»-calculus is augmented by universal quantification to model generic functions with type parameters, existential quantification and packaging (information hiding) to model abstract data types, and</description></snippet><snippet id="FW14-e004-7474-09"><link cache="FW14-topics-docs/e004/7474_09.html" timestamp="2014-04-20 17:06:31">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.101.9822&amp;rank=9</link><title>Bigtable: A distributed storage system for structured data</title><description>Bigtable: A distributed storage system for structured data

by Fay Chang, Jeffrey Dean, Sanjay Ghemawat, Wilson C. Hsieh, Deborah A. Wallach, Mike Burrows, Tushar Chandra, Andrew Fikes, Robert E. Gruber \- IN PROCEEDINGS OF THE 7TH CONFERENCE ON USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION - VOLUME 7 , 2006

"... "com.cnn.www" "contents:" "html&gt;..." "html&gt;..." "html&gt;..." t3 t5 t6 "anchor:cnnsi.com" "CNN" t 9 ..."

Abstract \- Cited by 506 (3 self) \- Add to MetaCart

Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size: petabytes of data across thousands of commodity servers. Many projects at Google store data in Bigtable, including web indexing, Google Earth, and Google Finance. These applications place very different demands on Bigtable, both in terms of data size (from URLs to web pages to satellite imagery) and latency requirements (from backend bulk processing to real-time data serving). Despite these varied demands, Bigtable has successfully provided a flexible, high-performance solution for all of these Google products. In this paper we describe the simple data model provided by Bigtable, which gives clients dynamic control over data layout and format, and we describe the design and implementation of Bigtable. 1</description></snippet><snippet id="FW14-e004-7474-10"><link cache="FW14-topics-docs/e004/7474_10.html" timestamp="2014-04-20 17:08:03">http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=2B44E78C0D7DDD87B8C95783E32647B3?doi=10.1.1.157.2429&amp;rank=10</link><title>SRILM -- An extensible language modeling toolkit</title><description>SRILM -- An extensible language modeling toolkit

by Andreas Stolcke \- IN PROCEEDINGS OF THE 7TH INTERNATIONAL CONFERENCE ON SPOKEN LANGUAGE PROCESSING (ICSLP 2002 , 2002

"... , with prominent roles in speech recognition and natural language tagging (including specialized tasks ..."

Abstract \- Cited by 755 (17 self) \- Add to MetaCart

SRILM is a collection of C++ libraries, executable programs, and helper scripts designed to allow both production of and experimentation with statistical language models for speech recognition and other applications. SRILM is freely available for noncommercial purposes. The toolkit supports creation and evaluation of a variety of language model types based on N-gram statistics, as well as several related tasks, such as statistical tagging and manipulation of N-best lists and word lattices. This paper summarizes the functionality of the toolkit and discusses its design and implementation, highlighting ease of rapid prototyping, reusability, and combinability of tools.</description></snippet></snippets></search_results>