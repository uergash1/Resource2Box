<?xml version='1.0' encoding='UTF-8'?>
<search_results><query id="7084">Burn after reading review</query><engine status="OK" timestamp="2014-04-20 13:56:24" name="StackOverflow" id="FW14-e131"/><snippets><snippet id="FW14-e131-7084-01"><link cache="FW14-topics-docs/e131/7084_01.html" timestamp="2014-04-20 13:56:25">http://stackoverflow.com/questions/15398868/dealing-with-bugs-in-scrum-via-greenhopper</link><title>Q: Dealing with bugs in Scrum via GreenHopper [closed]</title><description>We're re-organizing workflow in our team and one of the key decisions was to use Scrum process, provided with help of Jira and Greenhopper. I've read various Scrum guides, documentation … of Greenhopper and started Scrum process implementation in our team. After some corrections and changes it mostly good, but one thing doesn't let me sleep well: bugs. Different solutions are proposed …</description></snippet><snippet id="FW14-e131-7084-02"><link cache="FW14-topics-docs/e131/7084_02.html" timestamp="2014-04-20 13:57:33">http://stackoverflow.com/questions/6804568/being-smart-about-vector-memory-allocation/6811063#6811063</link><title>A: Being Smart About Vector Memory Allocation</title><description>and peer-reviewed articles. Your example is basically doing two things that add up to the total CPU cost: it's reading and operating on elements in the input vector, and then it has to insert the elements … I'm going to answer the question I think you really meant to ask, which is "should push_back() be avoided in the inner loops of heavy algorithms?" rather than what others seem to have read into your …</description></snippet><snippet id="FW14-e131-7084-03"><link cache="FW14-topics-docs/e131/7084_03.html" timestamp="2014-04-20 14:00:49">http://stackoverflow.com/questions/17905249/how-can-i-detect-all-dependencies-of-a-function-in-node-js/18004786#18004786</link><title>A: How can I detect all dependencies of a function in Node.js?</title><description>function calls. All the rest is just filling in the blanks! The result is at the bottom of the answer, so I recommend you grab to the first comment if you don't want to read through. 1\. Limiting … , so we will return to it after we handled the function var cachedScope = currentScope, cachedName = currentFuncName; //and now we change the state currentScope = Scope(cachedScope); currentFuncName …</description></snippet></snippets></search_results>