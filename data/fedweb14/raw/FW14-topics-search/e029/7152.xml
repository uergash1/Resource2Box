<?xml version='1.0' encoding='UTF-8'?>
<search_results><query id="7152">haskell hash string</query><engine status="OK" timestamp="2014-04-22 06:25:33" name="Google Books" id="FW14-e029"/><snippets><snippet id="FW14-e029-7152-01"><link cache="FW14-topics-docs/e029/7152_01.html" timestamp="2014-04-22 06:25:34">http://books.google.nl/books?id=nh0okI1a1sQC&amp;pg=PA288&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Real World Haskell: Code You Can Believe In - Page 288</title><description>Hash. Tables. In an imperative language, the array is as much a “bread and butter” type as a list or tuple in Haskell. We take it for granted that an array in an imperative language is usually mutable; we can change an element of an array ...</description></snippet><snippet id="FW14-e029-7152-02"><link cache="FW14-topics-docs/e029/7152_02.html" timestamp="2014-04-22 06:28:30">http://books.google.nl/books?id=48eOVJYAe9oC&amp;pg=PA80&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Communicating Process Architectures 2008: WoTUG-31 - Page 80</title><description>The only way to start an explicit new concurrent process in Haskell is with the forkIO function. It takes a process ... Combining Haskell with some ideas from occam has been done before in Haskell# (“Haskell-hash”) [26]. Haskell# began with ...</description></snippet><snippet id="FW14-e029-7152-03"><link cache="FW14-topics-docs/e029/7152_03.html" timestamp="2014-04-22 06:29:31">http://books.google.nl/books?id=0vmCV2umk5QC&amp;pg=PA28&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Developing Web Applications with Haskell and Yesod - Page 28</title><description>If the last character in a line is a hash, it is ignored. ... so far is a nice, simplified HTML, but it doesn't let us interact with our Haskell code at all. How do we ... Take, for instance, the following code. data Person = Person { name :: String , age.</description></snippet><snippet id="FW14-e029-7152-04"><link cache="FW14-topics-docs/e029/7152_04.html" timestamp="2014-04-22 06:31:39">http://books.google.nl/books?id=NOX2hOaFv_oC&amp;pg=PA51&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Practical Aspects of Declarative Languages: 9th ... - Page 51</title><description>ByteString.Lazy.Char8 as B return · B.foldl hash 5381 · B.map toLower · B.filter isAlpha =&lt;&lt; B.readFile f where hash h c = h ∗ 33 + ord c By replacing the string type with our ByteString representation, Haskell is able to approach the speed of C, ...</description></snippet><snippet id="FW14-e029-7152-05"><link cache="FW14-topics-docs/e029/7152_05.html" timestamp="2014-04-22 06:32:36">http://books.google.nl/books?id=-e5FAwAAQBAJ&amp;pg=PA299&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Haskell: - Page 299</title><description>An array of 1-byte characters is several times more compact than a String = [Char] of similar length. With strictness annotations, unboxed types and automatic strictness analysis, the overhead can be reduced. The Haskell wiki is a good ...</description></snippet><snippet id="FW14-e029-7152-06"><link cache="FW14-topics-docs/e029/7152_06.html" timestamp="2014-04-22 06:33:05">http://books.google.nl/books?id=PZxr-6ohVtwC&amp;pg=PA191&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Practical Aspects of Declarative Languages: 11th ... - Page 191</title><description>hash functions operate over contiguous C strings. To address this, we began by concatenating chunks into one contiguous string. In addition, the ... This experience suggests that low-level Haskell performance tuning can be highly profitable.</description></snippet><snippet id="FW14-e029-7152-07"><link cache="FW14-topics-docs/e029/7152_07.html" timestamp="2014-04-22 06:35:21">http://books.google.nl/books?id=LG3KAgAAQBAJ&amp;pg=PA88&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Beginning Haskell: A Project-Based Approach - Page 88</title><description>... this mapping is called a hash of the original value. the types HashMap and HashSet in the unordered-containers package ... As with any other value, these containers can be nested one inside another: lists of sets, map with string keys and ...</description></snippet><snippet id="FW14-e029-7152-08"><link cache="FW14-topics-docs/e029/7152_08.html" timestamp="2014-04-22 06:36:08">http://books.google.nl/books?id=On_Hh23IXDUC&amp;pg=PA224&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Network Dictionary - Page 224</title><description>Security Hash is a mathematical algorithm that takes a variable-size message and returns a fixed-size string to authenticate ... Software Haskell Programming Language, simply called Haskell in most cases, is a standardized pure functional ...</description></snippet><snippet id="FW14-e029-7152-09"><link cache="FW14-topics-docs/e029/7152_09.html" timestamp="2014-04-22 06:39:29">http://books.google.nl/books?id=zQa5I2sHPKEC&amp;pg=PA261&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Dictionary of Information Technology - Page 261</title><description>Hash searches are highly efficient because the hashing enables direct or almost direct access to the target element. ... Haskell A functional programming language based on lambda calculus and suitable for the creation of applications that ...</description></snippet><snippet id="FW14-e029-7152-10"><link cache="FW14-topics-docs/e029/7152_10.html" timestamp="2014-04-22 06:41:39">http://books.google.nl/books?id=aYxSZurAGXEC&amp;pg=PA659&amp;dq=haskell+hash+string&amp;hl=en&amp;sa=X&amp;ei=Pe9VU_fMLIqt0QXt24CgCA&amp;redir_esc=y</link><title>Data Structures - Page 659</title><description>Hari Balakrishnan, 629 Harris RTX, 36 Hash array mapped trie, 534 Hash collision, 478, 480, 481, 487, 489, 509, 527 ... 601, 603 Hash tables, 67, 474 Hash tree, 445, 530, 531, 534 Hash trie, 534 Haskell (programming language), 54, 69, 113 ...</description></snippet></snippets></search_results>