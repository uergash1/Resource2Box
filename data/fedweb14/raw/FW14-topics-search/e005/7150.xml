<?xml version='1.0' encoding='UTF-8'?>
<search_results><query id="7150">senior java developer</query><engine status="OK" timestamp="2014-04-19 23:01:53" name="CiteULike" id="FW14-e005"/><snippets><snippet id="FW14-e005-7150-01"><link cache="FW14-topics-docs/e005/7150_01.html" timestamp="2014-04-19 23:01:57">http://www.citeulike.org/user/sjgaller/article/1740872</link><title>Pluggable Annotation Processing Updates</title><description>Most people aren’t going to create their own annotation processors. They’re more apt to use annotations created by others, like for JDBC queries. If you only use them, you don’t need to know anything in this chapter. If you need to process annotations, however, you need to know how the processing model has changed from J2SE 5.0 to Java SE 6.0. It’s not that different—just slightly—with classes moving between packages and slightly different interfaces. Use them with care, and don’t go ...</description></snippet><snippet id="FW14-e005-7150-02"><link cache="FW14-topics-docs/e005/7150_02.html" timestamp="2014-04-19 23:03:12">http://www.citeulike.org/user/agebhar1/article/9071138</link><title>Performance Limitations of the Java Core Libraries</title><description>Unlike applets, traditional systems programs written in Java place significant demands on the Java runtime and core libraries, and their performance is often critically important. This paper describes our experiences using Java to build such a systems program, namely, a high-performance web crawler. We found that our runtime, which includes a just-in-time compiler that compiles Java bytecodes to native machine code, performed well. However, we encountered several performance problems with the Java core libraries, including excessive synchronization, excessive allocation, and other ...</description></snippet><snippet id="FW14-e005-7150-03"><link cache="FW14-topics-docs/e005/7150_03.html" timestamp="2014-04-19 23:05:56">http://www.citeulike.org/user/katty77/article/1613980</link><title>A Java fork/join framework</title><description>This paper describes the design, implementation, and performance of a Java framework for supporting a style of parallel programming in which problems are solved by (recursively) splitting them into subtasks that are solved in parallel, waiting for them to complete, and then composing results. The general design is a variant of the work-stealing framework devised for Cilk. The main implementation techniques surround efficient construction and management of tasks queues and worker threads. The... ...</description></snippet><snippet id="FW14-e005-7150-04"><link cache="FW14-topics-docs/e005/7150_04.html" timestamp="2014-04-19 23:08:00">http://www.citeulike.org/group/2666/article/1356061</link><title>Java Applet Correctness: a Developer-Oriented Approach</title><description>This paper presents experiments on formal validation of Java applets. It describes a tool that has been developed at the Gemplus Research Labs. This tool allows to formally prove Java classes annotated with JML, an annotation language for Java that provides a framework for specifying class invariants and methods behaviours. The foundations and the main features of the tool are presented. The most innovative part of the tool is that it is tailored to be used by Java programmers, without... ...</description></snippet><snippet id="FW14-e005-7150-05"><link cache="FW14-topics-docs/e005/7150_05.html" timestamp="2014-04-19 23:11:50">http://www.citeulike.org/user/cklin/article/2222436</link><title>Parallel Computation in Mobile Systems Using Bluetooth</title><description>Our work targets small mobile computers with a Bluetooth wireless link. Embedded in cheap robots with data rich sensors, our target does not have enough processing power to do the required analysis on sensor data. We propose the use of parallel processing. In this paper we outline DynaMP, a dynamic message passing architecture. Using an ad-hoc network with on-demand routing based on AODV. DynaMP has a resource discovery mechanism, it distributes code and data using Java classloading, with a... ...</description></snippet><snippet id="FW14-e005-7150-06"><link cache="FW14-topics-docs/e005/7150_06.html" timestamp="2014-04-19 23:12:23">http://www.citeulike.org/user/laurobeltrao/article/7843690</link><title>Scientific Data Analysis using Jython Scripting and Java</title><description>Scientific Data Analysis using Jython Scripting and Java presents practical approaches for data analysis using Java scripting based on Jython, a Java implementation of the Python language. The chapters essentially cover all aspects of data analysis, from arrays and histograms to clustering analysis, curve fitting, metadata and neural networks. A comprehensive coverage of data visualisation tools implemented in Java is also included. Written by the primary developer of the jHepWork data-analysis framework, the book provides a reliable and complete reference source ...</description></snippet><snippet id="FW14-e005-7150-07"><link cache="FW14-topics-docs/e005/7150_07.html" timestamp="2014-04-19 23:16:18">http://www.citeulike.org/user/bunge/article/481268</link><title>The Jalapeno dynamic optimizing compiler for Java</title><description>The Jalape~no Dynamic Optimizing Compiler is a key component of the Jalape~no Virtual Machine, a new Java 1 Virtual Machine (JVM) designed to support efficient and scalable execution of Java applications on SMP server machines. This paper describes the design of the Jalape~no Optimizing Compiler, and the implementation results that we have obtained thus far. To the best of our knowledge, this is the first dynamic optimizing compiler for Java that is being used in a JVM with a compile-only... ...</description></snippet><snippet id="FW14-e005-7150-08"><link cache="FW14-topics-docs/e005/7150_08.html" timestamp="2014-04-19 23:20:54">http://www.citeulike.org/user/leosteinfeld/article/5664954</link><title>Implementing fast JVM interpreters using Java itself</title><description>Most Java Virtual Machines (JVMs) are themselves written in unsafe languages, making it unduly difficult to build trustworthy and safe JVM platforms. While some progress has been made on removing compilers from the trusted computing base (using certifying compilation), JVM interpreters continue to be built almost exclusively in C/C++. We have implemented an alternative approach, in which the JVM interpreter itself is built in Java, and runs atop a host JVM execution environment. Despite benefiting from the additional safety guarantees of ...</description></snippet><snippet id="FW14-e005-7150-09"><link cache="FW14-topics-docs/e005/7150_09.html" timestamp="2014-04-19 23:22:48">http://www.citeulike.org/group/13551/article/7271735</link><title>Unit test support for Java via reflection and annotations</title><description>Novice Java programmers face great difficulties when learning to design unit tests for any nontrivial cases. Deciding whether the result of a method, or the effect the method produced represents the expected result one must understand the difference between equality based on the values an object represents versus the reference equality (identity) --- and be able to define the correct equals method. ...</description></snippet><snippet id="FW14-e005-7150-10"><link cache="FW14-topics-docs/e005/7150_10.html" timestamp="2014-04-19 23:25:14">http://www.citeulike.org/user/pinventado/article/7410532</link><title>Rails for Java Developers</title></snippet></snippets></search_results>